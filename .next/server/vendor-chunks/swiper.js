"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/swiper";
exports.ids = ["vendor-chunks/swiper"];
exports.modules = {

/***/ "(ssr)/./node_modules/swiper/modules/free-mode.css":
/*!***************************************************!*\
  !*** ./node_modules/swiper/modules/free-mode.css ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"c5ebca5d1ba5\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZnJlZS1tb2RlLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2ZyZWUtbW9kZS5jc3M/YjAzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImM1ZWJjYTVkMWJhNVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/free-mode.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/navigation.css":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.css ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"b1ba3660c7f3\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9uYXZpZ2F0aW9uLmNzcz8yYmY3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiYjFiYTM2NjBjN2YzXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/navigation.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/pagination.css":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/pagination.css ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"f2d5a33909ef\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFnaW5hdGlvbi5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9wYWdpbmF0aW9uLmNzcz9iMWE2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiZjJkNWEzMzkwOWVmXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/pagination.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/thumbs.css":
/*!************************************************!*\
  !*** ./node_modules/swiper/modules/thumbs.css ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"da39a3ee5e6b\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvdGh1bWJzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3RodW1icy5jc3M/YmVkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImRhMzlhM2VlNWU2YlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/thumbs.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/swiper.css":
/*!****************************************!*\
  !*** ./node_modules/swiper/swiper.css ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"a66ef2733099\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3N3aXBlci5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc3dpcGVyLmNzcz8xMmQ2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiYTY2ZWYyNzMzMDk5XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/swiper.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/a11y.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/a11y.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ A11y)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n\r\nfunction A11y(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    a11y: {\r\n      enabled: true,\r\n      notificationClass: 'swiper-notification',\r\n      prevSlideMessage: 'Previous slide',\r\n      nextSlideMessage: 'Next slide',\r\n      firstSlideMessage: 'This is the first slide',\r\n      lastSlideMessage: 'This is the last slide',\r\n      paginationBulletMessage: 'Go to slide {{index}}',\r\n      slideLabelMessage: '{{index}} / {{slidesLength}}',\r\n      containerMessage: null,\r\n      containerRoleDescriptionMessage: null,\r\n      containerRole: null,\r\n      itemRoleDescriptionMessage: null,\r\n      slideRole: 'group',\r\n      id: null,\r\n      scrollOnFocus: true\r\n    }\r\n  });\r\n  swiper.a11y = {\r\n    clicked: false\r\n  };\r\n  let liveRegion = null;\r\n  let preventFocusHandler;\r\n  let focusTargetSlideEl;\r\n  let visibilityChangedTimestamp = new Date().getTime();\r\n  function notify(message) {\r\n    const notification = liveRegion;\r\n    if (notification.length === 0) return;\r\n    notification.innerHTML = '';\r\n    notification.innerHTML = message;\r\n  }\r\n  function getRandomNumber(size) {\r\n    if (size === void 0) {\r\n      size = 16;\r\n    }\r\n    const randomChar = () => Math.round(16 * Math.random()).toString(16);\r\n    return 'x'.repeat(size).replace(/x/g, randomChar);\r\n  }\r\n  function makeElFocusable(el) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('tabIndex', '0');\r\n    });\r\n  }\r\n  function makeElNotFocusable(el) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('tabIndex', '-1');\r\n    });\r\n  }\r\n  function addElRole(el, role) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('role', role);\r\n    });\r\n  }\r\n  function addElRoleDescription(el, description) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('aria-roledescription', description);\r\n    });\r\n  }\r\n  function addElControls(el, controls) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('aria-controls', controls);\r\n    });\r\n  }\r\n  function addElLabel(el, label) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('aria-label', label);\r\n    });\r\n  }\r\n  function addElId(el, id) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('id', id);\r\n    });\r\n  }\r\n  function addElLive(el, live) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('aria-live', live);\r\n    });\r\n  }\r\n  function disableEl(el) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('aria-disabled', true);\r\n    });\r\n  }\r\n  function enableEl(el) {\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.setAttribute('aria-disabled', false);\r\n    });\r\n  }\r\n  function onEnterOrSpaceKey(e) {\r\n    if (e.keyCode !== 13 && e.keyCode !== 32) return;\r\n    const params = swiper.params.a11y;\r\n    const targetEl = e.target;\r\n    if (swiper.pagination && swiper.pagination.el && (targetEl === swiper.pagination.el || swiper.pagination.el.contains(e.target))) {\r\n      if (!e.target.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletClass))) return;\r\n    }\r\n    if (swiper.navigation && swiper.navigation.prevEl && swiper.navigation.nextEl) {\r\n      const prevEls = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.navigation.prevEl);\r\n      const nextEls = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.navigation.nextEl);\r\n      if (nextEls.includes(targetEl)) {\r\n        if (!(swiper.isEnd && !swiper.params.loop)) {\r\n          swiper.slideNext();\r\n        }\r\n        if (swiper.isEnd) {\r\n          notify(params.lastSlideMessage);\r\n        } else {\r\n          notify(params.nextSlideMessage);\r\n        }\r\n      }\r\n      if (prevEls.includes(targetEl)) {\r\n        if (!(swiper.isBeginning && !swiper.params.loop)) {\r\n          swiper.slidePrev();\r\n        }\r\n        if (swiper.isBeginning) {\r\n          notify(params.firstSlideMessage);\r\n        } else {\r\n          notify(params.prevSlideMessage);\r\n        }\r\n      }\r\n    }\r\n    if (swiper.pagination && targetEl.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletClass))) {\r\n      targetEl.click();\r\n    }\r\n  }\r\n  function updateNavigation() {\r\n    if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\r\n    const {\r\n      nextEl,\r\n      prevEl\r\n    } = swiper.navigation;\r\n    if (prevEl) {\r\n      if (swiper.isBeginning) {\r\n        disableEl(prevEl);\r\n        makeElNotFocusable(prevEl);\r\n      } else {\r\n        enableEl(prevEl);\r\n        makeElFocusable(prevEl);\r\n      }\r\n    }\r\n    if (nextEl) {\r\n      if (swiper.isEnd) {\r\n        disableEl(nextEl);\r\n        makeElNotFocusable(nextEl);\r\n      } else {\r\n        enableEl(nextEl);\r\n        makeElFocusable(nextEl);\r\n      }\r\n    }\r\n  }\r\n  function hasPagination() {\r\n    return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\r\n  }\r\n  function hasClickablePagination() {\r\n    return hasPagination() && swiper.params.pagination.clickable;\r\n  }\r\n  function updatePagination() {\r\n    const params = swiper.params.a11y;\r\n    if (!hasPagination()) return;\r\n    swiper.pagination.bullets.forEach(bulletEl => {\r\n      if (swiper.params.pagination.clickable) {\r\n        makeElFocusable(bulletEl);\r\n        if (!swiper.params.pagination.renderBullet) {\r\n          addElRole(bulletEl, 'button');\r\n          addElLabel(bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(bulletEl) + 1));\r\n        }\r\n      }\r\n      if (bulletEl.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletActiveClass))) {\r\n        bulletEl.setAttribute('aria-current', 'true');\r\n      } else {\r\n        bulletEl.removeAttribute('aria-current');\r\n      }\r\n    });\r\n  }\r\n  const initNavEl = (el, wrapperId, message) => {\r\n    makeElFocusable(el);\r\n    if (el.tagName !== 'BUTTON') {\r\n      addElRole(el, 'button');\r\n      el.addEventListener('keydown', onEnterOrSpaceKey);\r\n    }\r\n    addElLabel(el, message);\r\n    addElControls(el, wrapperId);\r\n  };\r\n  const handlePointerDown = e => {\r\n    if (focusTargetSlideEl && focusTargetSlideEl !== e.target && !focusTargetSlideEl.contains(e.target)) {\r\n      preventFocusHandler = true;\r\n    }\r\n    swiper.a11y.clicked = true;\r\n  };\r\n  const handlePointerUp = () => {\r\n    preventFocusHandler = false;\r\n    requestAnimationFrame(() => {\r\n      requestAnimationFrame(() => {\r\n        if (!swiper.destroyed) {\r\n          swiper.a11y.clicked = false;\r\n        }\r\n      });\r\n    });\r\n  };\r\n  const onVisibilityChange = e => {\r\n    visibilityChangedTimestamp = new Date().getTime();\r\n  };\r\n  const handleFocus = e => {\r\n    if (swiper.a11y.clicked || !swiper.params.a11y.scrollOnFocus) return;\r\n    if (new Date().getTime() - visibilityChangedTimestamp < 100) return;\r\n    const slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\r\n    if (!slideEl || !swiper.slides.includes(slideEl)) return;\r\n    focusTargetSlideEl = slideEl;\r\n    const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\r\n    const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\r\n    if (isActive || isVisible) return;\r\n    if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) return;\r\n    if (swiper.isHorizontal()) {\r\n      swiper.el.scrollLeft = 0;\r\n    } else {\r\n      swiper.el.scrollTop = 0;\r\n    }\r\n    requestAnimationFrame(() => {\r\n      if (preventFocusHandler) return;\r\n      if (swiper.params.loop) {\r\n        swiper.slideToLoop(parseInt(slideEl.getAttribute('data-swiper-slide-index')), 0);\r\n      } else {\r\n        swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\r\n      }\r\n      preventFocusHandler = false;\r\n    });\r\n  };\r\n  const initSlides = () => {\r\n    const params = swiper.params.a11y;\r\n    if (params.itemRoleDescriptionMessage) {\r\n      addElRoleDescription(swiper.slides, params.itemRoleDescriptionMessage);\r\n    }\r\n    if (params.slideRole) {\r\n      addElRole(swiper.slides, params.slideRole);\r\n    }\r\n    const slidesLength = swiper.slides.length;\r\n    if (params.slideLabelMessage) {\r\n      swiper.slides.forEach((slideEl, index) => {\r\n        const slideIndex = swiper.params.loop ? parseInt(slideEl.getAttribute('data-swiper-slide-index'), 10) : index;\r\n        const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\r\n        addElLabel(slideEl, ariaLabelMessage);\r\n      });\r\n    }\r\n  };\r\n  const init = () => {\r\n    const params = swiper.params.a11y;\r\n    swiper.el.append(liveRegion);\r\n\r\n    // Container\r\n    const containerEl = swiper.el;\r\n    if (params.containerRoleDescriptionMessage) {\r\n      addElRoleDescription(containerEl, params.containerRoleDescriptionMessage);\r\n    }\r\n    if (params.containerMessage) {\r\n      addElLabel(containerEl, params.containerMessage);\r\n    }\r\n    if (params.containerRole) {\r\n      addElRole(containerEl, params.containerRole);\r\n    }\r\n\r\n    // Wrapper\r\n    const wrapperEl = swiper.wrapperEl;\r\n    const wrapperId = params.id || wrapperEl.getAttribute('id') || `swiper-wrapper-${getRandomNumber(16)}`;\r\n    const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';\r\n    addElId(wrapperEl, wrapperId);\r\n    addElLive(wrapperEl, live);\r\n\r\n    // Slide\r\n    initSlides();\r\n\r\n    // Navigation\r\n    let {\r\n      nextEl,\r\n      prevEl\r\n    } = swiper.navigation ? swiper.navigation : {};\r\n    nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(nextEl);\r\n    prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(prevEl);\r\n    if (nextEl) {\r\n      nextEl.forEach(el => initNavEl(el, wrapperId, params.nextSlideMessage));\r\n    }\r\n    if (prevEl) {\r\n      prevEl.forEach(el => initNavEl(el, wrapperId, params.prevSlideMessage));\r\n    }\r\n\r\n    // Pagination\r\n    if (hasClickablePagination()) {\r\n      const paginationEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\r\n      paginationEl.forEach(el => {\r\n        el.addEventListener('keydown', onEnterOrSpaceKey);\r\n      });\r\n    }\r\n\r\n    // Tab focus\r\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n    document.addEventListener('visibilitychange', onVisibilityChange);\r\n    swiper.el.addEventListener('focus', handleFocus, true);\r\n    swiper.el.addEventListener('focus', handleFocus, true);\r\n    swiper.el.addEventListener('pointerdown', handlePointerDown, true);\r\n    swiper.el.addEventListener('pointerup', handlePointerUp, true);\r\n  };\r\n  function destroy() {\r\n    if (liveRegion) liveRegion.remove();\r\n    let {\r\n      nextEl,\r\n      prevEl\r\n    } = swiper.navigation ? swiper.navigation : {};\r\n    nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(nextEl);\r\n    prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(prevEl);\r\n    if (nextEl) {\r\n      nextEl.forEach(el => el.removeEventListener('keydown', onEnterOrSpaceKey));\r\n    }\r\n    if (prevEl) {\r\n      prevEl.forEach(el => el.removeEventListener('keydown', onEnterOrSpaceKey));\r\n    }\r\n\r\n    // Pagination\r\n    if (hasClickablePagination()) {\r\n      const paginationEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\r\n      paginationEl.forEach(el => {\r\n        el.removeEventListener('keydown', onEnterOrSpaceKey);\r\n      });\r\n    }\r\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n    document.removeEventListener('visibilitychange', onVisibilityChange);\r\n    // Tab focus\r\n    if (swiper.el && typeof swiper.el !== 'string') {\r\n      swiper.el.removeEventListener('focus', handleFocus, true);\r\n      swiper.el.removeEventListener('pointerdown', handlePointerDown, true);\r\n      swiper.el.removeEventListener('pointerup', handlePointerUp, true);\r\n    }\r\n  }\r\n  on('beforeInit', () => {\r\n    liveRegion = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.c)('span', swiper.params.a11y.notificationClass);\r\n    liveRegion.setAttribute('aria-live', 'assertive');\r\n    liveRegion.setAttribute('aria-atomic', 'true');\r\n  });\r\n  on('afterInit', () => {\r\n    if (!swiper.params.a11y.enabled) return;\r\n    init();\r\n  });\r\n  on('slidesLengthChange snapGridLengthChange slidesGridLengthChange', () => {\r\n    if (!swiper.params.a11y.enabled) return;\r\n    initSlides();\r\n  });\r\n  on('fromEdge toEdge afterInit lock unlock', () => {\r\n    if (!swiper.params.a11y.enabled) return;\r\n    updateNavigation();\r\n  });\r\n  on('paginationUpdate', () => {\r\n    if (!swiper.params.a11y.enabled) return;\r\n    updatePagination();\r\n  });\r\n  on('destroy', () => {\r\n    if (!swiper.params.a11y.enabled) return;\r\n    destroy();\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/a11y.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/autoplay.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/autoplay.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Autoplay)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\r\n\r\n/* eslint no-underscore-dangle: \"off\" */\r\n/* eslint no-use-before-define: \"off\" */\r\nfunction Autoplay(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit,\r\n    params\r\n  } = _ref;\r\n  swiper.autoplay = {\r\n    running: false,\r\n    paused: false,\r\n    timeLeft: 0\r\n  };\r\n  extendParams({\r\n    autoplay: {\r\n      enabled: false,\r\n      delay: 3000,\r\n      waitForTransition: true,\r\n      disableOnInteraction: false,\r\n      stopOnLastSlide: false,\r\n      reverseDirection: false,\r\n      pauseOnMouseEnter: false\r\n    }\r\n  });\r\n  let timeout;\r\n  let raf;\r\n  let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;\r\n  let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;\r\n  let autoplayTimeLeft;\r\n  let autoplayStartTime = new Date().getTime();\r\n  let wasPaused;\r\n  let isTouched;\r\n  let pausedByTouch;\r\n  let touchStartTimeout;\r\n  let slideChanged;\r\n  let pausedByInteraction;\r\n  let pausedByPointerEnter;\r\n  function onTransitionEnd(e) {\r\n    if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;\r\n    if (e.target !== swiper.wrapperEl) return;\r\n    swiper.wrapperEl.removeEventListener('transitionend', onTransitionEnd);\r\n    if (pausedByPointerEnter || e.detail && e.detail.bySwiperTouchMove) {\r\n      return;\r\n    }\r\n    resume();\r\n  }\r\n  const calcTimeLeft = () => {\r\n    if (swiper.destroyed || !swiper.autoplay.running) return;\r\n    if (swiper.autoplay.paused) {\r\n      wasPaused = true;\r\n    } else if (wasPaused) {\r\n      autoplayDelayCurrent = autoplayTimeLeft;\r\n      wasPaused = false;\r\n    }\r\n    const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();\r\n    swiper.autoplay.timeLeft = timeLeft;\r\n    emit('autoplayTimeLeft', timeLeft, timeLeft / autoplayDelayTotal);\r\n    raf = requestAnimationFrame(() => {\r\n      calcTimeLeft();\r\n    });\r\n  };\r\n  const getSlideDelay = () => {\r\n    let activeSlideEl;\r\n    if (swiper.virtual && swiper.params.virtual.enabled) {\r\n      activeSlideEl = swiper.slides.filter(slideEl => slideEl.classList.contains('swiper-slide-active'))[0];\r\n    } else {\r\n      activeSlideEl = swiper.slides[swiper.activeIndex];\r\n    }\r\n    if (!activeSlideEl) return undefined;\r\n    const currentSlideDelay = parseInt(activeSlideEl.getAttribute('data-swiper-autoplay'), 10);\r\n    return currentSlideDelay;\r\n  };\r\n  const run = delayForce => {\r\n    if (swiper.destroyed || !swiper.autoplay.running) return;\r\n    cancelAnimationFrame(raf);\r\n    calcTimeLeft();\r\n    let delay = typeof delayForce === 'undefined' ? swiper.params.autoplay.delay : delayForce;\r\n    autoplayDelayTotal = swiper.params.autoplay.delay;\r\n    autoplayDelayCurrent = swiper.params.autoplay.delay;\r\n    const currentSlideDelay = getSlideDelay();\r\n    if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === 'undefined') {\r\n      delay = currentSlideDelay;\r\n      autoplayDelayTotal = currentSlideDelay;\r\n      autoplayDelayCurrent = currentSlideDelay;\r\n    }\r\n    autoplayTimeLeft = delay;\r\n    const speed = swiper.params.speed;\r\n    const proceed = () => {\r\n      if (!swiper || swiper.destroyed) return;\r\n      if (swiper.params.autoplay.reverseDirection) {\r\n        if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {\r\n          swiper.slidePrev(speed, true, true);\r\n          emit('autoplay');\r\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\r\n          swiper.slideTo(swiper.slides.length - 1, speed, true, true);\r\n          emit('autoplay');\r\n        }\r\n      } else {\r\n        if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {\r\n          swiper.slideNext(speed, true, true);\r\n          emit('autoplay');\r\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\r\n          swiper.slideTo(0, speed, true, true);\r\n          emit('autoplay');\r\n        }\r\n      }\r\n      if (swiper.params.cssMode) {\r\n        autoplayStartTime = new Date().getTime();\r\n        requestAnimationFrame(() => {\r\n          run();\r\n        });\r\n      }\r\n    };\r\n    if (delay > 0) {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => {\r\n        proceed();\r\n      }, delay);\r\n    } else {\r\n      requestAnimationFrame(() => {\r\n        proceed();\r\n      });\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    return delay;\r\n  };\r\n  const start = () => {\r\n    autoplayStartTime = new Date().getTime();\r\n    swiper.autoplay.running = true;\r\n    run();\r\n    emit('autoplayStart');\r\n  };\r\n  const stop = () => {\r\n    swiper.autoplay.running = false;\r\n    clearTimeout(timeout);\r\n    cancelAnimationFrame(raf);\r\n    emit('autoplayStop');\r\n  };\r\n  const pause = (internal, reset) => {\r\n    if (swiper.destroyed || !swiper.autoplay.running) return;\r\n    clearTimeout(timeout);\r\n    if (!internal) {\r\n      pausedByInteraction = true;\r\n    }\r\n    const proceed = () => {\r\n      emit('autoplayPause');\r\n      if (swiper.params.autoplay.waitForTransition) {\r\n        swiper.wrapperEl.addEventListener('transitionend', onTransitionEnd);\r\n      } else {\r\n        resume();\r\n      }\r\n    };\r\n    swiper.autoplay.paused = true;\r\n    if (reset) {\r\n      if (slideChanged) {\r\n        autoplayTimeLeft = swiper.params.autoplay.delay;\r\n      }\r\n      slideChanged = false;\r\n      proceed();\r\n      return;\r\n    }\r\n    const delay = autoplayTimeLeft || swiper.params.autoplay.delay;\r\n    autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);\r\n    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;\r\n    if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\r\n    proceed();\r\n  };\r\n  const resume = () => {\r\n    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;\r\n    autoplayStartTime = new Date().getTime();\r\n    if (pausedByInteraction) {\r\n      pausedByInteraction = false;\r\n      run(autoplayTimeLeft);\r\n    } else {\r\n      run();\r\n    }\r\n    swiper.autoplay.paused = false;\r\n    emit('autoplayResume');\r\n  };\r\n  const onVisibilityChange = () => {\r\n    if (swiper.destroyed || !swiper.autoplay.running) return;\r\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n    if (document.visibilityState === 'hidden') {\r\n      pausedByInteraction = true;\r\n      pause(true);\r\n    }\r\n    if (document.visibilityState === 'visible') {\r\n      resume();\r\n    }\r\n  };\r\n  const onPointerEnter = e => {\r\n    if (e.pointerType !== 'mouse') return;\r\n    pausedByInteraction = true;\r\n    pausedByPointerEnter = true;\r\n    if (swiper.animating || swiper.autoplay.paused) return;\r\n    pause(true);\r\n  };\r\n  const onPointerLeave = e => {\r\n    if (e.pointerType !== 'mouse') return;\r\n    pausedByPointerEnter = false;\r\n    if (swiper.autoplay.paused) {\r\n      resume();\r\n    }\r\n  };\r\n  const attachMouseEvents = () => {\r\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\r\n      swiper.el.addEventListener('pointerenter', onPointerEnter);\r\n      swiper.el.addEventListener('pointerleave', onPointerLeave);\r\n    }\r\n  };\r\n  const detachMouseEvents = () => {\r\n    if (swiper.el && typeof swiper.el !== 'string') {\r\n      swiper.el.removeEventListener('pointerenter', onPointerEnter);\r\n      swiper.el.removeEventListener('pointerleave', onPointerLeave);\r\n    }\r\n  };\r\n  const attachDocumentEvents = () => {\r\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n    document.addEventListener('visibilitychange', onVisibilityChange);\r\n  };\r\n  const detachDocumentEvents = () => {\r\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n    document.removeEventListener('visibilitychange', onVisibilityChange);\r\n  };\r\n  on('init', () => {\r\n    if (swiper.params.autoplay.enabled) {\r\n      attachMouseEvents();\r\n      attachDocumentEvents();\r\n      start();\r\n    }\r\n  });\r\n  on('destroy', () => {\r\n    detachMouseEvents();\r\n    detachDocumentEvents();\r\n    if (swiper.autoplay.running) {\r\n      stop();\r\n    }\r\n  });\r\n  on('_freeModeStaticRelease', () => {\r\n    if (pausedByTouch || pausedByInteraction) {\r\n      resume();\r\n    }\r\n  });\r\n  on('_freeModeNoMomentumRelease', () => {\r\n    if (!swiper.params.autoplay.disableOnInteraction) {\r\n      pause(true, true);\r\n    } else {\r\n      stop();\r\n    }\r\n  });\r\n  on('beforeTransitionStart', (_s, speed, internal) => {\r\n    if (swiper.destroyed || !swiper.autoplay.running) return;\r\n    if (internal || !swiper.params.autoplay.disableOnInteraction) {\r\n      pause(true, true);\r\n    } else {\r\n      stop();\r\n    }\r\n  });\r\n  on('sliderFirstMove', () => {\r\n    if (swiper.destroyed || !swiper.autoplay.running) return;\r\n    if (swiper.params.autoplay.disableOnInteraction) {\r\n      stop();\r\n      return;\r\n    }\r\n    isTouched = true;\r\n    pausedByTouch = false;\r\n    pausedByInteraction = false;\r\n    touchStartTimeout = setTimeout(() => {\r\n      pausedByInteraction = true;\r\n      pausedByTouch = true;\r\n      pause(true);\r\n    }, 200);\r\n  });\r\n  on('touchEnd', () => {\r\n    if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;\r\n    clearTimeout(touchStartTimeout);\r\n    clearTimeout(timeout);\r\n    if (swiper.params.autoplay.disableOnInteraction) {\r\n      pausedByTouch = false;\r\n      isTouched = false;\r\n      return;\r\n    }\r\n    if (pausedByTouch && swiper.params.cssMode) resume();\r\n    pausedByTouch = false;\r\n    isTouched = false;\r\n  });\r\n  on('slideChange', () => {\r\n    if (swiper.destroyed || !swiper.autoplay.running) return;\r\n    slideChanged = true;\r\n  });\r\n  Object.assign(swiper.autoplay, {\r\n    start,\r\n    stop,\r\n    pause,\r\n    resume\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/autoplay.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/controller.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/controller.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Controller)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\r\nfunction Controller(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    controller: {\r\n      control: undefined,\r\n      inverse: false,\r\n      by: 'slide' // or 'container'\r\n    }\r\n  });\r\n\r\n  swiper.controller = {\r\n    control: undefined\r\n  };\r\n  function LinearSpline(x, y) {\r\n    const binarySearch = function search() {\r\n      let maxIndex;\r\n      let minIndex;\r\n      let guess;\r\n      return (array, val) => {\r\n        minIndex = -1;\r\n        maxIndex = array.length;\r\n        while (maxIndex - minIndex > 1) {\r\n          guess = maxIndex + minIndex >> 1;\r\n          if (array[guess] <= val) {\r\n            minIndex = guess;\r\n          } else {\r\n            maxIndex = guess;\r\n          }\r\n        }\r\n        return maxIndex;\r\n      };\r\n    }();\r\n    this.x = x;\r\n    this.y = y;\r\n    this.lastIndex = x.length - 1;\r\n    // Given an x value (x2), return the expected y2 value:\r\n    // (x1,y1) is the known point before given value,\r\n    // (x3,y3) is the known point after given value.\r\n    let i1;\r\n    let i3;\r\n    this.interpolate = function interpolate(x2) {\r\n      if (!x2) return 0;\r\n\r\n      // Get the indexes of x1 and x3 (the array indexes before and after given x2):\r\n      i3 = binarySearch(this.x, x2);\r\n      i1 = i3 - 1;\r\n\r\n      // We have our indexes i1 & i3, so we can calculate already:\r\n      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\r\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\r\n    };\r\n    return this;\r\n  }\r\n  function getInterpolateFunction(c) {\r\n    swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\r\n  }\r\n  function setTranslate(_t, byController) {\r\n    const controlled = swiper.controller.control;\r\n    let multiplier;\r\n    let controlledTranslate;\r\n    const Swiper = swiper.constructor;\r\n    function setControlledTranslate(c) {\r\n      if (c.destroyed) return;\r\n\r\n      // this will create an Interpolate function based on the snapGrids\r\n      // x is the Grid of the scrolled scroller and y will be the controlled scroller\r\n      // it makes sense to create this only once and recall it for the interpolation\r\n      // the function does a lot of value caching for performance\r\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\r\n      if (swiper.params.controller.by === 'slide') {\r\n        getInterpolateFunction(c);\r\n        // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\r\n        // but it did not work out\r\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\r\n      }\r\n      if (!controlledTranslate || swiper.params.controller.by === 'container') {\r\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\r\n        if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\r\n          multiplier = 1;\r\n        }\r\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\r\n      }\r\n      if (swiper.params.controller.inverse) {\r\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\r\n      }\r\n      c.updateProgress(controlledTranslate);\r\n      c.setTranslate(controlledTranslate, swiper);\r\n      c.updateActiveIndex();\r\n      c.updateSlidesClasses();\r\n    }\r\n    if (Array.isArray(controlled)) {\r\n      for (let i = 0; i < controlled.length; i += 1) {\r\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\r\n          setControlledTranslate(controlled[i]);\r\n        }\r\n      }\r\n    } else if (controlled instanceof Swiper && byController !== controlled) {\r\n      setControlledTranslate(controlled);\r\n    }\r\n  }\r\n  function setTransition(duration, byController) {\r\n    const Swiper = swiper.constructor;\r\n    const controlled = swiper.controller.control;\r\n    let i;\r\n    function setControlledTransition(c) {\r\n      if (c.destroyed) return;\r\n      c.setTransition(duration, swiper);\r\n      if (duration !== 0) {\r\n        c.transitionStart();\r\n        if (c.params.autoHeight) {\r\n          (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(() => {\r\n            c.updateAutoHeight();\r\n          });\r\n        }\r\n        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(c.wrapperEl, () => {\r\n          if (!controlled) return;\r\n          c.transitionEnd();\r\n        });\r\n      }\r\n    }\r\n    if (Array.isArray(controlled)) {\r\n      for (i = 0; i < controlled.length; i += 1) {\r\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\r\n          setControlledTransition(controlled[i]);\r\n        }\r\n      }\r\n    } else if (controlled instanceof Swiper && byController !== controlled) {\r\n      setControlledTransition(controlled);\r\n    }\r\n  }\r\n  function removeSpline() {\r\n    if (!swiper.controller.control) return;\r\n    if (swiper.controller.spline) {\r\n      swiper.controller.spline = undefined;\r\n      delete swiper.controller.spline;\r\n    }\r\n  }\r\n  on('beforeInit', () => {\r\n    if (typeof window !== 'undefined' && (\r\n    // eslint-disable-line\r\n    typeof swiper.params.controller.control === 'string' || swiper.params.controller.control instanceof HTMLElement)) {\r\n      const controlElements = typeof swiper.params.controller.control === 'string' ? [...document.querySelectorAll(swiper.params.controller.control)] : [swiper.params.controller.control];\r\n      controlElements.forEach(controlElement => {\r\n        if (!swiper.controller.control) swiper.controller.control = [];\r\n        if (controlElement && controlElement.swiper) {\r\n          swiper.controller.control.push(controlElement.swiper);\r\n        } else if (controlElement) {\r\n          const eventName = `${swiper.params.eventsPrefix}init`;\r\n          const onControllerSwiper = e => {\r\n            swiper.controller.control.push(e.detail[0]);\r\n            swiper.update();\r\n            controlElement.removeEventListener(eventName, onControllerSwiper);\r\n          };\r\n          controlElement.addEventListener(eventName, onControllerSwiper);\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    swiper.controller.control = swiper.params.controller.control;\r\n  });\r\n  on('update', () => {\r\n    removeSpline();\r\n  });\r\n  on('resize', () => {\r\n    removeSpline();\r\n  });\r\n  on('observerUpdate', () => {\r\n    removeSpline();\r\n  });\r\n  on('setTranslate', (_s, translate, byController) => {\r\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\r\n    swiper.controller.setTranslate(translate, byController);\r\n  });\r\n  on('setTransition', (_s, duration, byController) => {\r\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\r\n    swiper.controller.setTransition(duration, byController);\r\n  });\r\n  Object.assign(swiper.controller, {\r\n    setTranslate,\r\n    setTransition\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/controller.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-cards.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cards.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCards)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n\r\n\r\n\r\nfunction EffectCards(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    cardsEffect: {\r\n      slideShadows: true,\r\n      rotate: true,\r\n      perSlideRotate: 2,\r\n      perSlideOffset: 8\r\n    }\r\n  });\r\n  const setTranslate = () => {\r\n    const {\r\n      slides,\r\n      activeIndex,\r\n      rtlTranslate: rtl\r\n    } = swiper;\r\n    const params = swiper.params.cardsEffect;\r\n    const {\r\n      startTranslate,\r\n      isTouched\r\n    } = swiper.touchEventsData;\r\n    const currentTranslate = rtl ? -swiper.translate : swiper.translate;\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      const slideEl = slides[i];\r\n      const slideProgress = slideEl.progress;\r\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\r\n      let offset = slideEl.swiperSlideOffset;\r\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\r\n        swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;\r\n      }\r\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\r\n        offset -= slides[0].swiperSlideOffset;\r\n      }\r\n      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\r\n      let tY = 0;\r\n      const tZ = -100 * Math.abs(progress);\r\n      let scale = 1;\r\n      let rotate = -params.perSlideRotate * progress;\r\n      let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;\r\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\r\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\r\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\r\n      if (isSwipeToNext || isSwipeToPrev) {\r\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\r\n        rotate += -28 * progress * subProgress;\r\n        scale += -0.5 * subProgress;\r\n        tXAdd += 96 * subProgress;\r\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\r\n      }\r\n      if (progress < 0) {\r\n        // next\r\n        tX = `calc(${tX}px ${rtl ? '-' : '+'} (${tXAdd * Math.abs(progress)}%))`;\r\n      } else if (progress > 0) {\r\n        // prev\r\n        tX = `calc(${tX}px ${rtl ? '-' : '+'} (-${tXAdd * Math.abs(progress)}%))`;\r\n      } else {\r\n        tX = `${tX}px`;\r\n      }\r\n      if (!swiper.isHorizontal()) {\r\n        const prevY = tY;\r\n        tY = tX;\r\n        tX = prevY;\r\n      }\r\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\r\n\r\n      /* eslint-disable */\r\n      const transform = `\r\n        translate3d(${tX}, ${tY}, ${tZ}px)\r\n        rotateZ(${params.rotate ? rtl ? -rotate : rotate : 0}deg)\r\n        scale(${scaleString})\r\n      `;\r\n      /* eslint-enable */\r\n\r\n      if (params.slideShadows) {\r\n        // Set shadows\r\n        let shadowEl = slideEl.querySelector('.swiper-slide-shadow');\r\n        if (!shadowEl) {\r\n          shadowEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)('cards', slideEl);\r\n        }\r\n        if (shadowEl) shadowEl.style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\r\n      }\r\n      slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\r\n      const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\r\n      targetEl.style.transform = transform;\r\n    }\r\n  };\r\n  const setTransition = duration => {\r\n    const transformElements = swiper.slides.map(slideEl => (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\r\n    transformElements.forEach(el => {\r\n      el.style.transitionDuration = `${duration}ms`;\r\n      el.querySelectorAll('.swiper-slide-shadow').forEach(shadowEl => {\r\n        shadowEl.style.transitionDuration = `${duration}ms`;\r\n      });\r\n    });\r\n    (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\r\n      swiper,\r\n      duration,\r\n      transformElements\r\n    });\r\n  };\r\n  (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\r\n    effect: 'cards',\r\n    swiper,\r\n    on,\r\n    setTranslate,\r\n    setTransition,\r\n    perspective: () => true,\r\n    overwriteParams: () => ({\r\n      watchSlidesProgress: true,\r\n      virtualTranslate: !swiper.params.cssMode\r\n    })\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-cards.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-coverflow.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-coverflow.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCoverflow)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n\r\n\r\nfunction EffectCoverflow(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    coverflowEffect: {\r\n      rotate: 50,\r\n      stretch: 0,\r\n      depth: 100,\r\n      scale: 1,\r\n      modifier: 1,\r\n      slideShadows: true\r\n    }\r\n  });\r\n  const setTranslate = () => {\r\n    const {\r\n      width: swiperWidth,\r\n      height: swiperHeight,\r\n      slides,\r\n      slidesSizesGrid\r\n    } = swiper;\r\n    const params = swiper.params.coverflowEffect;\r\n    const isHorizontal = swiper.isHorizontal();\r\n    const transform = swiper.translate;\r\n    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\r\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\r\n    const translate = params.depth;\r\n    const r = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.o)(swiper);\r\n    // Each slide offset from center\r\n    for (let i = 0, length = slides.length; i < length; i += 1) {\r\n      const slideEl = slides[i];\r\n      const slideSize = slidesSizesGrid[i];\r\n      const slideOffset = slideEl.swiperSlideOffset;\r\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\r\n      const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;\r\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\r\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\r\n      // var rotateZ = 0\r\n      let translateZ = -translate * Math.abs(offsetMultiplier);\r\n      let stretch = params.stretch;\r\n      // Allow percentage to make a relative stretch for responsive sliders\r\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\r\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\r\n      }\r\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\r\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\r\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\r\n\r\n      // Fix for ultra small values\r\n      if (Math.abs(translateX) < 0.001) translateX = 0;\r\n      if (Math.abs(translateY) < 0.001) translateY = 0;\r\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\r\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\r\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\r\n      if (Math.abs(scale) < 0.001) scale = 0;\r\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${r(rotateX)}deg) rotateY(${r(rotateY)}deg) scale(${scale})`;\r\n      const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\r\n      targetEl.style.transform = slideTransform;\r\n      slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\r\n      if (params.slideShadows) {\r\n        // Set shadows\r\n        let shadowBeforeEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\r\n        let shadowAfterEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\r\n        if (!shadowBeforeEl) {\r\n          shadowBeforeEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)('coverflow', slideEl, isHorizontal ? 'left' : 'top');\r\n        }\r\n        if (!shadowAfterEl) {\r\n          shadowAfterEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)('coverflow', slideEl, isHorizontal ? 'right' : 'bottom');\r\n        }\r\n        if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\r\n        if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\r\n      }\r\n    }\r\n  };\r\n  const setTransition = duration => {\r\n    const transformElements = swiper.slides.map(slideEl => (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(slideEl));\r\n    transformElements.forEach(el => {\r\n      el.style.transitionDuration = `${duration}ms`;\r\n      el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\r\n        shadowEl.style.transitionDuration = `${duration}ms`;\r\n      });\r\n    });\r\n  };\r\n  (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\r\n    effect: 'coverflow',\r\n    swiper,\r\n    on,\r\n    setTranslate,\r\n    setTransition,\r\n    perspective: () => true,\r\n    overwriteParams: () => ({\r\n      watchSlidesProgress: true\r\n    })\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNvdmVyZmxvdy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0U7QUFDSjtBQUNJO0FBQ2tCO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0RBQVk7QUFDMUI7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsZUFBZSxXQUFXLGVBQWUsV0FBVyxhQUFhLE1BQU07QUFDOUosdUJBQXVCLDREQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDREQUFZO0FBQ3ZDO0FBQ0E7QUFDQSwwQkFBMEIsNERBQVk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsb0RBQW1CO0FBQzlFO0FBQ0EsdUNBQXVDLFNBQVM7QUFDaEQ7QUFDQSwrQ0FBK0MsU0FBUztBQUN4RCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsRUFBRSwwREFBVTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtY292ZXJmbG93Lm1qcz8yMTMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGMgYXMgY3JlYXRlU2hhZG93IH0gZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZS1zaGFkb3cubWpzJztcclxuaW1wb3J0IHsgZSBhcyBlZmZlY3RJbml0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC1pbml0Lm1qcyc7XHJcbmltcG9ydCB7IGUgYXMgZWZmZWN0VGFyZ2V0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzJztcclxuaW1wb3J0IHsgZyBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsLCBvIGFzIGdldFJvdGF0ZUZpeCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xyXG5cclxuZnVuY3Rpb24gRWZmZWN0Q292ZXJmbG93KF9yZWYpIHtcclxuICBsZXQge1xyXG4gICAgc3dpcGVyLFxyXG4gICAgZXh0ZW5kUGFyYW1zLFxyXG4gICAgb25cclxuICB9ID0gX3JlZjtcclxuICBleHRlbmRQYXJhbXMoe1xyXG4gICAgY292ZXJmbG93RWZmZWN0OiB7XHJcbiAgICAgIHJvdGF0ZTogNTAsXHJcbiAgICAgIHN0cmV0Y2g6IDAsXHJcbiAgICAgIGRlcHRoOiAxMDAsXHJcbiAgICAgIHNjYWxlOiAxLFxyXG4gICAgICBtb2RpZmllcjogMSxcclxuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlXHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICB3aWR0aDogc3dpcGVyV2lkdGgsXHJcbiAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxyXG4gICAgICBzbGlkZXMsXHJcbiAgICAgIHNsaWRlc1NpemVzR3JpZFxyXG4gICAgfSA9IHN3aXBlcjtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xyXG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xyXG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3dpcGVyLnRyYW5zbGF0ZTtcclxuICAgIGNvbnN0IGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyBzd2lwZXJXaWR0aCAvIDIgOiAtdHJhbnNmb3JtICsgc3dpcGVySGVpZ2h0IC8gMjtcclxuICAgIGNvbnN0IHJvdGF0ZSA9IGlzSG9yaXpvbnRhbCA/IHBhcmFtcy5yb3RhdGUgOiAtcGFyYW1zLnJvdGF0ZTtcclxuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHBhcmFtcy5kZXB0aDtcclxuICAgIGNvbnN0IHIgPSBnZXRSb3RhdGVGaXgoc3dpcGVyKTtcclxuICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XHJcbiAgICAgIGNvbnN0IHNsaWRlU2l6ZSA9IHNsaWRlc1NpemVzR3JpZFtpXTtcclxuICAgICAgY29uc3Qgc2xpZGVPZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xyXG4gICAgICBjb25zdCBjZW50ZXJPZmZzZXQgPSAoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSBzbGlkZVNpemUgLyAyKSAvIHNsaWRlU2l6ZTtcclxuICAgICAgY29uc3Qgb2Zmc2V0TXVsdGlwbGllciA9IHR5cGVvZiBwYXJhbXMubW9kaWZpZXIgPT09ICdmdW5jdGlvbicgPyBwYXJhbXMubW9kaWZpZXIoY2VudGVyT2Zmc2V0KSA6IGNlbnRlck9mZnNldCAqIHBhcmFtcy5tb2RpZmllcjtcclxuICAgICAgbGV0IHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcclxuICAgICAgbGV0IHJvdGF0ZVggPSBpc0hvcml6b250YWwgPyAwIDogcm90YXRlICogb2Zmc2V0TXVsdGlwbGllcjtcclxuICAgICAgLy8gdmFyIHJvdGF0ZVogPSAwXHJcbiAgICAgIGxldCB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xyXG4gICAgICBsZXQgc3RyZXRjaCA9IHBhcmFtcy5zdHJldGNoO1xyXG4gICAgICAvLyBBbGxvdyBwZXJjZW50YWdlIHRvIG1ha2UgYSByZWxhdGl2ZSBzdHJldGNoIGZvciByZXNwb25zaXZlIHNsaWRlcnNcclxuICAgICAgaWYgKHR5cGVvZiBzdHJldGNoID09PSAnc3RyaW5nJyAmJiBzdHJldGNoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcclxuICAgICAgICBzdHJldGNoID0gcGFyc2VGbG9hdChwYXJhbXMuc3RyZXRjaCkgLyAxMDAgKiBzbGlkZVNpemU7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IHRyYW5zbGF0ZVkgPSBpc0hvcml6b250YWwgPyAwIDogc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXI7XHJcbiAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xyXG4gICAgICBsZXQgc2NhbGUgPSAxIC0gKDEgLSBwYXJhbXMuc2NhbGUpICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XHJcblxyXG4gICAgICAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xyXG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWCkgPCAwLjAwMSkgdHJhbnNsYXRlWCA9IDA7XHJcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVZKSA8IDAuMDAxKSB0cmFuc2xhdGVZID0gMDtcclxuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVopIDwgMC4wMDEpIHRyYW5zbGF0ZVogPSAwO1xyXG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgPCAwLjAwMSkgcm90YXRlWSA9IDA7XHJcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVYKSA8IDAuMDAxKSByb3RhdGVYID0gMDtcclxuICAgICAgaWYgKE1hdGguYWJzKHNjYWxlKSA8IDAuMDAxKSBzY2FsZSA9IDA7XHJcbiAgICAgIGNvbnN0IHNsaWRlVHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwke3RyYW5zbGF0ZVl9cHgsJHt0cmFuc2xhdGVafXB4KSAgcm90YXRlWCgke3Iocm90YXRlWCl9ZGVnKSByb3RhdGVZKCR7cihyb3RhdGVZKX1kZWcpIHNjYWxlKCR7c2NhbGV9KWA7XHJcbiAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XHJcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHNsaWRlVHJhbnNmb3JtO1xyXG4gICAgICBzbGlkZUVsLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKG9mZnNldE11bHRpcGxpZXIpKSArIDE7XHJcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XHJcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcclxuICAgICAgICBsZXQgc2hhZG93QmVmb3JlRWwgPSBpc0hvcml6b250YWwgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XHJcbiAgICAgICAgbGV0IHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWwgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xyXG4gICAgICAgIGlmICghc2hhZG93QmVmb3JlRWwpIHtcclxuICAgICAgICAgIHNoYWRvd0JlZm9yZUVsID0gY3JlYXRlU2hhZG93KCdjb3ZlcmZsb3cnLCBzbGlkZUVsLCBpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc2hhZG93QWZ0ZXJFbCkge1xyXG4gICAgICAgICAgc2hhZG93QWZ0ZXJFbCA9IGNyZWF0ZVNoYWRvdygnY292ZXJmbG93Jywgc2xpZGVFbCwgaXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZUVsKSBzaGFkb3dCZWZvcmVFbC5zdHlsZS5vcGFjaXR5ID0gb2Zmc2V0TXVsdGlwbGllciA+IDAgPyBvZmZzZXRNdWx0aXBsaWVyIDogMDtcclxuICAgICAgICBpZiAoc2hhZG93QWZ0ZXJFbCkgc2hhZG93QWZ0ZXJFbC5zdHlsZS5vcGFjaXR5ID0gLW9mZnNldE11bHRpcGxpZXIgPiAwID8gLW9mZnNldE11bHRpcGxpZXIgOiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xyXG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xyXG4gICAgdHJhbnNmb3JtRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcclxuICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykuZm9yRWFjaChzaGFkb3dFbCA9PiB7XHJcbiAgICAgICAgc2hhZG93RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcbiAgZWZmZWN0SW5pdCh7XHJcbiAgICBlZmZlY3Q6ICdjb3ZlcmZsb3cnLFxyXG4gICAgc3dpcGVyLFxyXG4gICAgb24sXHJcbiAgICBzZXRUcmFuc2xhdGUsXHJcbiAgICBzZXRUcmFuc2l0aW9uLFxyXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXHJcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XHJcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWVcclxuICAgIH0pXHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IEVmZmVjdENvdmVyZmxvdyBhcyBkZWZhdWx0IH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-coverflow.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-creative.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-creative.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCreative)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n\r\n\r\n\r\nfunction EffectCreative(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    creativeEffect: {\r\n      limitProgress: 1,\r\n      shadowPerProgress: false,\r\n      progressMultiplier: 1,\r\n      perspective: true,\r\n      prev: {\r\n        translate: [0, 0, 0],\r\n        rotate: [0, 0, 0],\r\n        opacity: 1,\r\n        scale: 1\r\n      },\r\n      next: {\r\n        translate: [0, 0, 0],\r\n        rotate: [0, 0, 0],\r\n        opacity: 1,\r\n        scale: 1\r\n      }\r\n    }\r\n  });\r\n  const getTranslateValue = value => {\r\n    if (typeof value === 'string') return value;\r\n    return `${value}px`;\r\n  };\r\n  const setTranslate = () => {\r\n    const {\r\n      slides,\r\n      wrapperEl,\r\n      slidesSizesGrid\r\n    } = swiper;\r\n    const params = swiper.params.creativeEffect;\r\n    const {\r\n      progressMultiplier: multiplier\r\n    } = params;\r\n    const isCenteredSlides = swiper.params.centeredSlides;\r\n    const rotateFix = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.o)(swiper);\r\n    if (isCenteredSlides) {\r\n      const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\r\n      wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;\r\n    }\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      const slideEl = slides[i];\r\n      const slideProgress = slideEl.progress;\r\n      const progress = Math.min(Math.max(slideEl.progress, -params.limitProgress), params.limitProgress);\r\n      let originalProgress = progress;\r\n      if (!isCenteredSlides) {\r\n        originalProgress = Math.min(Math.max(slideEl.originalProgress, -params.limitProgress), params.limitProgress);\r\n      }\r\n      const offset = slideEl.swiperSlideOffset;\r\n      const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];\r\n      const r = [0, 0, 0];\r\n      let custom = false;\r\n      if (!swiper.isHorizontal()) {\r\n        t[1] = t[0];\r\n        t[0] = 0;\r\n      }\r\n      let data = {\r\n        translate: [0, 0, 0],\r\n        rotate: [0, 0, 0],\r\n        scale: 1,\r\n        opacity: 1\r\n      };\r\n      if (progress < 0) {\r\n        data = params.next;\r\n        custom = true;\r\n      } else if (progress > 0) {\r\n        data = params.prev;\r\n        custom = true;\r\n      }\r\n      // set translate\r\n      t.forEach((value, index) => {\r\n        t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\r\n      });\r\n      // set rotates\r\n      r.forEach((value, index) => {\r\n        let val = data.rotate[index] * Math.abs(progress * multiplier);\r\n        r[index] = val;\r\n      });\r\n      slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\r\n      const translateString = t.join(', ');\r\n      const rotateString = `rotateX(${rotateFix(r[0])}deg) rotateY(${rotateFix(r[1])}deg) rotateZ(${rotateFix(r[2])}deg)`;\r\n      const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\r\n      const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\r\n      const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;\r\n\r\n      // Set shadows\r\n      if (custom && data.shadow || !custom) {\r\n        let shadowEl = slideEl.querySelector('.swiper-slide-shadow');\r\n        if (!shadowEl && data.shadow) {\r\n          shadowEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)('creative', slideEl);\r\n        }\r\n        if (shadowEl) {\r\n          const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\r\n          shadowEl.style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\r\n        }\r\n      }\r\n      const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\r\n      targetEl.style.transform = transform;\r\n      targetEl.style.opacity = opacityString;\r\n      if (data.origin) {\r\n        targetEl.style.transformOrigin = data.origin;\r\n      }\r\n    }\r\n  };\r\n  const setTransition = duration => {\r\n    const transformElements = swiper.slides.map(slideEl => (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\r\n    transformElements.forEach(el => {\r\n      el.style.transitionDuration = `${duration}ms`;\r\n      el.querySelectorAll('.swiper-slide-shadow').forEach(shadowEl => {\r\n        shadowEl.style.transitionDuration = `${duration}ms`;\r\n      });\r\n    });\r\n    (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\r\n      swiper,\r\n      duration,\r\n      transformElements,\r\n      allSlides: true\r\n    });\r\n  };\r\n  (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\r\n    effect: 'creative',\r\n    swiper,\r\n    on,\r\n    setTranslate,\r\n    setTransition,\r\n    perspective: () => swiper.params.creativeEffect.perspective,\r\n    overwriteParams: () => ({\r\n      watchSlidesProgress: true,\r\n      virtualTranslate: !swiper.params.cssMode\r\n    })\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-creative.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-cube.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cube.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCube)\n/* harmony export */ });\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\nfunction EffectCube(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    cubeEffect: {\r\n      slideShadows: true,\r\n      shadow: true,\r\n      shadowOffset: 20,\r\n      shadowScale: 0.94\r\n    }\r\n  });\r\n  const createSlideShadows = (slideEl, progress, isHorizontal) => {\r\n    let shadowBefore = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\r\n    let shadowAfter = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\r\n    if (!shadowBefore) {\r\n      shadowBefore = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}`.split(' '));\r\n      slideEl.append(shadowBefore);\r\n    }\r\n    if (!shadowAfter) {\r\n      shadowAfter = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}`.split(' '));\r\n      slideEl.append(shadowAfter);\r\n    }\r\n    if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\r\n    if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\r\n  };\r\n  const recreateShadows = () => {\r\n    // create new ones\r\n    const isHorizontal = swiper.isHorizontal();\r\n    swiper.slides.forEach(slideEl => {\r\n      const progress = Math.max(Math.min(slideEl.progress, 1), -1);\r\n      createSlideShadows(slideEl, progress, isHorizontal);\r\n    });\r\n  };\r\n  const setTranslate = () => {\r\n    const {\r\n      el,\r\n      wrapperEl,\r\n      slides,\r\n      width: swiperWidth,\r\n      height: swiperHeight,\r\n      rtlTranslate: rtl,\r\n      size: swiperSize,\r\n      browser\r\n    } = swiper;\r\n    const r = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.o)(swiper);\r\n    const params = swiper.params.cubeEffect;\r\n    const isHorizontal = swiper.isHorizontal();\r\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\r\n    let wrapperRotate = 0;\r\n    let cubeShadowEl;\r\n    if (params.shadow) {\r\n      if (isHorizontal) {\r\n        cubeShadowEl = swiper.wrapperEl.querySelector('.swiper-cube-shadow');\r\n        if (!cubeShadowEl) {\r\n          cubeShadowEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', 'swiper-cube-shadow');\r\n          swiper.wrapperEl.append(cubeShadowEl);\r\n        }\r\n        cubeShadowEl.style.height = `${swiperWidth}px`;\r\n      } else {\r\n        cubeShadowEl = el.querySelector('.swiper-cube-shadow');\r\n        if (!cubeShadowEl) {\r\n          cubeShadowEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', 'swiper-cube-shadow');\r\n          el.append(cubeShadowEl);\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      const slideEl = slides[i];\r\n      let slideIndex = i;\r\n      if (isVirtual) {\r\n        slideIndex = parseInt(slideEl.getAttribute('data-swiper-slide-index'), 10);\r\n      }\r\n      let slideAngle = slideIndex * 90;\r\n      let round = Math.floor(slideAngle / 360);\r\n      if (rtl) {\r\n        slideAngle = -slideAngle;\r\n        round = Math.floor(-slideAngle / 360);\r\n      }\r\n      const progress = Math.max(Math.min(slideEl.progress, 1), -1);\r\n      let tx = 0;\r\n      let ty = 0;\r\n      let tz = 0;\r\n      if (slideIndex % 4 === 0) {\r\n        tx = -round * 4 * swiperSize;\r\n        tz = 0;\r\n      } else if ((slideIndex - 1) % 4 === 0) {\r\n        tx = 0;\r\n        tz = -round * 4 * swiperSize;\r\n      } else if ((slideIndex - 2) % 4 === 0) {\r\n        tx = swiperSize + round * 4 * swiperSize;\r\n        tz = swiperSize;\r\n      } else if ((slideIndex - 3) % 4 === 0) {\r\n        tx = -swiperSize;\r\n        tz = 3 * swiperSize + swiperSize * 4 * round;\r\n      }\r\n      if (rtl) {\r\n        tx = -tx;\r\n      }\r\n      if (!isHorizontal) {\r\n        ty = tx;\r\n        tx = 0;\r\n      }\r\n      const transform = `rotateX(${r(isHorizontal ? 0 : -slideAngle)}deg) rotateY(${r(isHorizontal ? slideAngle : 0)}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\r\n      if (progress <= 1 && progress > -1) {\r\n        wrapperRotate = slideIndex * 90 + progress * 90;\r\n        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\r\n      }\r\n      slideEl.style.transform = transform;\r\n      if (params.slideShadows) {\r\n        createSlideShadows(slideEl, progress, isHorizontal);\r\n      }\r\n    }\r\n    wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;\r\n    wrapperEl.style['-webkit-transform-origin'] = `50% 50% -${swiperSize / 2}px`;\r\n    if (params.shadow) {\r\n      if (isHorizontal) {\r\n        cubeShadowEl.style.transform = `translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(89.99deg) rotateZ(0deg) scale(${params.shadowScale})`;\r\n      } else {\r\n        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\r\n        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\r\n        const scale1 = params.shadowScale;\r\n        const scale2 = params.shadowScale / multiplier;\r\n        const offset = params.shadowOffset;\r\n        cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-89.99deg)`;\r\n      }\r\n    }\r\n    const zFactor = (browser.isSafari || browser.isWebView) && browser.needPerspectiveFix ? -swiperSize / 2 : 0;\r\n    wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${r(swiper.isHorizontal() ? 0 : wrapperRotate)}deg) rotateY(${r(swiper.isHorizontal() ? -wrapperRotate : 0)}deg)`;\r\n    wrapperEl.style.setProperty('--swiper-cube-translate-z', `${zFactor}px`);\r\n  };\r\n  const setTransition = duration => {\r\n    const {\r\n      el,\r\n      slides\r\n    } = swiper;\r\n    slides.forEach(slideEl => {\r\n      slideEl.style.transitionDuration = `${duration}ms`;\r\n      slideEl.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(subEl => {\r\n        subEl.style.transitionDuration = `${duration}ms`;\r\n      });\r\n    });\r\n    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\r\n      const shadowEl = el.querySelector('.swiper-cube-shadow');\r\n      if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;\r\n    }\r\n  };\r\n  (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\r\n    effect: 'cube',\r\n    swiper,\r\n    on,\r\n    setTranslate,\r\n    setTransition,\r\n    recreateShadows,\r\n    getEffectParams: () => swiper.params.cubeEffect,\r\n    perspective: () => true,\r\n    overwriteParams: () => ({\r\n      slidesPerView: 1,\r\n      slidesPerGroup: 1,\r\n      watchSlidesProgress: true,\r\n      resistanceRatio: 0,\r\n      spaceBetween: 0,\r\n      centeredSlides: false,\r\n      virtualTranslate: true\r\n    })\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-cube.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-fade.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-fade.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectFade)\n/* harmony export */ });\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n\r\n\r\nfunction EffectFade(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    fadeEffect: {\r\n      crossFade: false\r\n    }\r\n  });\r\n  const setTranslate = () => {\r\n    const {\r\n      slides\r\n    } = swiper;\r\n    const params = swiper.params.fadeEffect;\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      const slideEl = swiper.slides[i];\r\n      const offset = slideEl.swiperSlideOffset;\r\n      let tx = -offset;\r\n      if (!swiper.params.virtualTranslate) tx -= swiper.translate;\r\n      let ty = 0;\r\n      if (!swiper.isHorizontal()) {\r\n        ty = tx;\r\n        tx = 0;\r\n      }\r\n      const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(slideEl.progress), 0) : 1 + Math.min(Math.max(slideEl.progress, -1), 0);\r\n      const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(params, slideEl);\r\n      targetEl.style.opacity = slideOpacity;\r\n      targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;\r\n    }\r\n  };\r\n  const setTransition = duration => {\r\n    const transformElements = swiper.slides.map(slideEl => (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(slideEl));\r\n    transformElements.forEach(el => {\r\n      el.style.transitionDuration = `${duration}ms`;\r\n    });\r\n    (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__.e)({\r\n      swiper,\r\n      duration,\r\n      transformElements,\r\n      allSlides: true\r\n    });\r\n  };\r\n  (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\r\n    effect: 'fade',\r\n    swiper,\r\n    on,\r\n    setTranslate,\r\n    setTransition,\r\n    overwriteParams: () => ({\r\n      slidesPerView: 1,\r\n      slidesPerGroup: 1,\r\n      watchSlidesProgress: true,\r\n      spaceBetween: 0,\r\n      virtualTranslate: !swiper.params.cssMode\r\n    })\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZhZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTREO0FBQ0k7QUFDOEI7QUFDL0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNERBQVk7QUFDbkM7QUFDQSxnREFBZ0QsR0FBRyxNQUFNLEdBQUc7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELG9EQUFtQjtBQUM5RTtBQUNBLHVDQUF1QyxTQUFTO0FBQ2hELEtBQUs7QUFDTCxJQUFJLDRFQUEwQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEVBQUUsMERBQVU7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ2lDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZhZGUubWpzP2Y4ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZSBhcyBlZmZlY3RJbml0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC1pbml0Lm1qcyc7XHJcbmltcG9ydCB7IGUgYXMgZWZmZWN0VGFyZ2V0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzJztcclxuaW1wb3J0IHsgZSBhcyBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5tanMnO1xyXG5pbXBvcnQgeyBnIGFzIGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcclxuXHJcbmZ1bmN0aW9uIEVmZmVjdEZhZGUoX3JlZikge1xyXG4gIGxldCB7XHJcbiAgICBzd2lwZXIsXHJcbiAgICBleHRlbmRQYXJhbXMsXHJcbiAgICBvblxyXG4gIH0gPSBfcmVmO1xyXG4gIGV4dGVuZFBhcmFtcyh7XHJcbiAgICBmYWRlRWZmZWN0OiB7XHJcbiAgICAgIGNyb3NzRmFkZTogZmFsc2VcclxuICAgIH1cclxuICB9KTtcclxuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNsaWRlc1xyXG4gICAgfSA9IHN3aXBlcjtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW2ldO1xyXG4gICAgICBjb25zdCBvZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xyXG4gICAgICBsZXQgdHggPSAtb2Zmc2V0O1xyXG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcclxuICAgICAgbGV0IHR5ID0gMDtcclxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcclxuICAgICAgICB0eSA9IHR4O1xyXG4gICAgICAgIHR4ID0gMDtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBzbGlkZU9wYWNpdHkgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3QuY3Jvc3NGYWRlID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKHNsaWRlRWwucHJvZ3Jlc3MpLCAwKSA6IDEgKyBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLnByb2dyZXNzLCAtMSksIDApO1xyXG4gICAgICBjb25zdCB0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsIHNsaWRlRWwpO1xyXG4gICAgICB0YXJnZXRFbC5zdHlsZS5vcGFjaXR5ID0gc2xpZGVPcGFjaXR5O1xyXG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgMHB4KWA7XHJcbiAgICB9XHJcbiAgfTtcclxuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xyXG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xyXG4gICAgdHJhbnNmb3JtRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcclxuICAgIH0pO1xyXG4gICAgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xyXG4gICAgICBzd2lwZXIsXHJcbiAgICAgIGR1cmF0aW9uLFxyXG4gICAgICB0cmFuc2Zvcm1FbGVtZW50cyxcclxuICAgICAgYWxsU2xpZGVzOiB0cnVlXHJcbiAgICB9KTtcclxuICB9O1xyXG4gIGVmZmVjdEluaXQoe1xyXG4gICAgZWZmZWN0OiAnZmFkZScsXHJcbiAgICBzd2lwZXIsXHJcbiAgICBvbixcclxuICAgIHNldFRyYW5zbGF0ZSxcclxuICAgIHNldFRyYW5zaXRpb24sXHJcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxyXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDAsXHJcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGVcclxuICAgIH0pXHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IEVmZmVjdEZhZGUgYXMgZGVmYXVsdCB9O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-fade.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-flip.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-flip.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectFlip)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n\r\n\r\n\r\nfunction EffectFlip(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    flipEffect: {\r\n      slideShadows: true,\r\n      limitRotation: true\r\n    }\r\n  });\r\n  const createSlideShadows = (slideEl, progress) => {\r\n    let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\r\n    let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\r\n    if (!shadowBefore) {\r\n      shadowBefore = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)('flip', slideEl, swiper.isHorizontal() ? 'left' : 'top');\r\n    }\r\n    if (!shadowAfter) {\r\n      shadowAfter = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)('flip', slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\r\n    }\r\n    if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\r\n    if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\r\n  };\r\n  const recreateShadows = () => {\r\n    // Set shadows\r\n    swiper.params.flipEffect;\r\n    swiper.slides.forEach(slideEl => {\r\n      let progress = slideEl.progress;\r\n      if (swiper.params.flipEffect.limitRotation) {\r\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\r\n      }\r\n      createSlideShadows(slideEl, progress);\r\n    });\r\n  };\r\n  const setTranslate = () => {\r\n    const {\r\n      slides,\r\n      rtlTranslate: rtl\r\n    } = swiper;\r\n    const params = swiper.params.flipEffect;\r\n    const rotateFix = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.o)(swiper);\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      const slideEl = slides[i];\r\n      let progress = slideEl.progress;\r\n      if (swiper.params.flipEffect.limitRotation) {\r\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\r\n      }\r\n      const offset = slideEl.swiperSlideOffset;\r\n      const rotate = -180 * progress;\r\n      let rotateY = rotate;\r\n      let rotateX = 0;\r\n      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\r\n      let ty = 0;\r\n      if (!swiper.isHorizontal()) {\r\n        ty = tx;\r\n        tx = 0;\r\n        rotateX = -rotateY;\r\n        rotateY = 0;\r\n      } else if (rtl) {\r\n        rotateY = -rotateY;\r\n      }\r\n      slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\r\n      if (params.slideShadows) {\r\n        createSlideShadows(slideEl, progress);\r\n      }\r\n      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateFix(rotateX)}deg) rotateY(${rotateFix(rotateY)}deg)`;\r\n      const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\r\n      targetEl.style.transform = transform;\r\n    }\r\n  };\r\n  const setTransition = duration => {\r\n    const transformElements = swiper.slides.map(slideEl => (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\r\n    transformElements.forEach(el => {\r\n      el.style.transitionDuration = `${duration}ms`;\r\n      el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\r\n        shadowEl.style.transitionDuration = `${duration}ms`;\r\n      });\r\n    });\r\n    (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\r\n      swiper,\r\n      duration,\r\n      transformElements\r\n    });\r\n  };\r\n  (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\r\n    effect: 'flip',\r\n    swiper,\r\n    on,\r\n    setTranslate,\r\n    setTransition,\r\n    recreateShadows,\r\n    getEffectParams: () => swiper.params.flipEffect,\r\n    perspective: () => true,\r\n    overwriteParams: () => ({\r\n      slidesPerView: 1,\r\n      slidesPerGroup: 1,\r\n      watchSlidesProgress: true,\r\n      spaceBetween: 0,\r\n      virtualTranslate: !swiper.params.cssMode\r\n    })\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZsaXAubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFnRTtBQUNKO0FBQ0k7QUFDOEI7QUFDWjtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0REFBWTtBQUNqQztBQUNBO0FBQ0Esb0JBQW9CLDREQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxzQkFBc0Isb0RBQVk7QUFDbEMsb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsR0FBRyxNQUFNLEdBQUcsbUJBQW1CLG1CQUFtQixlQUFlLG1CQUFtQjtBQUMzSCx1QkFBdUIsNERBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsb0RBQW1CO0FBQzlFO0FBQ0EsdUNBQXVDLFNBQVM7QUFDaEQ7QUFDQSwrQ0FBK0MsU0FBUztBQUN4RCxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksNEVBQTBCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEVBQUUsMERBQVU7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ2lDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZsaXAubWpzPzJjMTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYyBhcyBjcmVhdGVTaGFkb3cgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLXNoYWRvdy5tanMnO1xyXG5pbXBvcnQgeyBlIGFzIGVmZmVjdEluaXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LWluaXQubWpzJztcclxuaW1wb3J0IHsgZSBhcyBlZmZlY3RUYXJnZXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5tanMnO1xyXG5pbXBvcnQgeyBlIGFzIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLm1qcyc7XHJcbmltcG9ydCB7IGcgYXMgZ2V0U2xpZGVUcmFuc2Zvcm1FbCwgbyBhcyBnZXRSb3RhdGVGaXggfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcclxuXHJcbmZ1bmN0aW9uIEVmZmVjdEZsaXAoX3JlZikge1xyXG4gIGxldCB7XHJcbiAgICBzd2lwZXIsXHJcbiAgICBleHRlbmRQYXJhbXMsXHJcbiAgICBvblxyXG4gIH0gPSBfcmVmO1xyXG4gIGV4dGVuZFBhcmFtcyh7XHJcbiAgICBmbGlwRWZmZWN0OiB7XHJcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcclxuICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZVxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGNvbnN0IGNyZWF0ZVNsaWRlU2hhZG93cyA9IChzbGlkZUVsLCBwcm9ncmVzcykgPT4ge1xyXG4gICAgbGV0IHNoYWRvd0JlZm9yZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcclxuICAgIGxldCBzaGFkb3dBZnRlciA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XHJcbiAgICBpZiAoIXNoYWRvd0JlZm9yZSkge1xyXG4gICAgICBzaGFkb3dCZWZvcmUgPSBjcmVhdGVTaGFkb3coJ2ZsaXAnLCBzbGlkZUVsLCBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXNoYWRvd0FmdGVyKSB7XHJcbiAgICAgIHNoYWRvd0FmdGVyID0gY3JlYXRlU2hhZG93KCdmbGlwJywgc2xpZGVFbCwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3JpZ2h0JyA6ICdib3R0b20nKTtcclxuICAgIH1cclxuICAgIGlmIChzaGFkb3dCZWZvcmUpIHNoYWRvd0JlZm9yZS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcclxuICAgIGlmIChzaGFkb3dBZnRlcikgc2hhZG93QWZ0ZXIuc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcclxuICB9O1xyXG4gIGNvbnN0IHJlY3JlYXRlU2hhZG93cyA9ICgpID0+IHtcclxuICAgIC8vIFNldCBzaGFkb3dzXHJcbiAgICBzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Q7XHJcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XHJcbiAgICAgIGxldCBwcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XHJcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikge1xyXG4gICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oc2xpZGVFbC5wcm9ncmVzcywgMSksIC0xKTtcclxuICAgICAgfVxyXG4gICAgICBjcmVhdGVTbGlkZVNoYWRvd3Moc2xpZGVFbCwgcHJvZ3Jlc3MpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNsaWRlcyxcclxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcclxuICAgIH0gPSBzd2lwZXI7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Q7XHJcbiAgICBjb25zdCByb3RhdGVGaXggPSBnZXRSb3RhdGVGaXgoc3dpcGVyKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XHJcbiAgICAgIGxldCBwcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XHJcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikge1xyXG4gICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oc2xpZGVFbC5wcm9ncmVzcywgMSksIC0xKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBvZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xyXG4gICAgICBjb25zdCByb3RhdGUgPSAtMTgwICogcHJvZ3Jlc3M7XHJcbiAgICAgIGxldCByb3RhdGVZID0gcm90YXRlO1xyXG4gICAgICBsZXQgcm90YXRlWCA9IDA7XHJcbiAgICAgIGxldCB0eCA9IHN3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldDtcclxuICAgICAgbGV0IHR5ID0gMDtcclxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcclxuICAgICAgICB0eSA9IHR4O1xyXG4gICAgICAgIHR4ID0gMDtcclxuICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7XHJcbiAgICAgICAgcm90YXRlWSA9IDA7XHJcbiAgICAgIH0gZWxzZSBpZiAocnRsKSB7XHJcbiAgICAgICAgcm90YXRlWSA9IC1yb3RhdGVZO1xyXG4gICAgICB9XHJcbiAgICAgIHNsaWRlRWwuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQocHJvZ3Jlc3MpKSArIHNsaWRlcy5sZW5ndGg7XHJcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XHJcbiAgICAgICAgY3JlYXRlU2xpZGVTaGFkb3dzKHNsaWRlRWwsIHByb2dyZXNzKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgMHB4KSByb3RhdGVYKCR7cm90YXRlRml4KHJvdGF0ZVgpfWRlZykgcm90YXRlWSgke3JvdGF0ZUZpeChyb3RhdGVZKX1kZWcpYDtcclxuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcclxuICAgICAgdGFyZ2V0RWwuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGR1cmF0aW9uID0+IHtcclxuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcclxuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xyXG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XHJcbiAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4ge1xyXG4gICAgICAgIHNoYWRvd0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcclxuICAgICAgc3dpcGVyLFxyXG4gICAgICBkdXJhdGlvbixcclxuICAgICAgdHJhbnNmb3JtRWxlbWVudHNcclxuICAgIH0pO1xyXG4gIH07XHJcbiAgZWZmZWN0SW5pdCh7XHJcbiAgICBlZmZlY3Q6ICdmbGlwJyxcclxuICAgIHN3aXBlcixcclxuICAgIG9uLFxyXG4gICAgc2V0VHJhbnNsYXRlLFxyXG4gICAgc2V0VHJhbnNpdGlvbixcclxuICAgIHJlY3JlYXRlU2hhZG93cyxcclxuICAgIGdldEVmZmVjdFBhcmFtczogKCkgPT4gc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LFxyXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXHJcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxyXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDAsXHJcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGVcclxuICAgIH0pXHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IEVmZmVjdEZsaXAgYXMgZGVmYXVsdCB9O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-flip.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/free-mode.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swiper/modules/free-mode.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ freeMode)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\nfunction freeMode(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    emit,\r\n    once\r\n  } = _ref;\r\n  extendParams({\r\n    freeMode: {\r\n      enabled: false,\r\n      momentum: true,\r\n      momentumRatio: 1,\r\n      momentumBounce: true,\r\n      momentumBounceRatio: 1,\r\n      momentumVelocityRatio: 1,\r\n      sticky: false,\r\n      minimumVelocity: 0.02\r\n    }\r\n  });\r\n  function onTouchStart() {\r\n    if (swiper.params.cssMode) return;\r\n    const translate = swiper.getTranslate();\r\n    swiper.setTranslate(translate);\r\n    swiper.setTransition(0);\r\n    swiper.touchEventsData.velocities.length = 0;\r\n    swiper.freeMode.onTouchEnd({\r\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\r\n    });\r\n  }\r\n  function onTouchMove() {\r\n    if (swiper.params.cssMode) return;\r\n    const {\r\n      touchEventsData: data,\r\n      touches\r\n    } = swiper;\r\n    // Velocity\r\n    if (data.velocities.length === 0) {\r\n      data.velocities.push({\r\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\r\n        time: data.touchStartTime\r\n      });\r\n    }\r\n    data.velocities.push({\r\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\r\n      time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.d)()\r\n    });\r\n  }\r\n  function onTouchEnd(_ref2) {\r\n    let {\r\n      currentPos\r\n    } = _ref2;\r\n    if (swiper.params.cssMode) return;\r\n    const {\r\n      params,\r\n      wrapperEl,\r\n      rtlTranslate: rtl,\r\n      snapGrid,\r\n      touchEventsData: data\r\n    } = swiper;\r\n    // Time diff\r\n    const touchEndTime = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.d)();\r\n    const timeDiff = touchEndTime - data.touchStartTime;\r\n    if (currentPos < -swiper.minTranslate()) {\r\n      swiper.slideTo(swiper.activeIndex);\r\n      return;\r\n    }\r\n    if (currentPos > -swiper.maxTranslate()) {\r\n      if (swiper.slides.length < snapGrid.length) {\r\n        swiper.slideTo(snapGrid.length - 1);\r\n      } else {\r\n        swiper.slideTo(swiper.slides.length - 1);\r\n      }\r\n      return;\r\n    }\r\n    if (params.freeMode.momentum) {\r\n      if (data.velocities.length > 1) {\r\n        const lastMoveEvent = data.velocities.pop();\r\n        const velocityEvent = data.velocities.pop();\r\n        const distance = lastMoveEvent.position - velocityEvent.position;\r\n        const time = lastMoveEvent.time - velocityEvent.time;\r\n        swiper.velocity = distance / time;\r\n        swiper.velocity /= 2;\r\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\r\n          swiper.velocity = 0;\r\n        }\r\n        // this implies that the user stopped moving a finger then released.\r\n        // There would be no events with distance zero, so the last event is stale.\r\n        if (time > 150 || (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.d)() - lastMoveEvent.time > 300) {\r\n          swiper.velocity = 0;\r\n        }\r\n      } else {\r\n        swiper.velocity = 0;\r\n      }\r\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\r\n      data.velocities.length = 0;\r\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\r\n      const momentumDistance = swiper.velocity * momentumDuration;\r\n      let newPosition = swiper.translate + momentumDistance;\r\n      if (rtl) newPosition = -newPosition;\r\n      let doBounce = false;\r\n      let afterBouncePosition;\r\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\r\n      let needsLoopFix;\r\n      if (newPosition < swiper.maxTranslate()) {\r\n        if (params.freeMode.momentumBounce) {\r\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\r\n            newPosition = swiper.maxTranslate() - bounceAmount;\r\n          }\r\n          afterBouncePosition = swiper.maxTranslate();\r\n          doBounce = true;\r\n          data.allowMomentumBounce = true;\r\n        } else {\r\n          newPosition = swiper.maxTranslate();\r\n        }\r\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\r\n      } else if (newPosition > swiper.minTranslate()) {\r\n        if (params.freeMode.momentumBounce) {\r\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\r\n            newPosition = swiper.minTranslate() + bounceAmount;\r\n          }\r\n          afterBouncePosition = swiper.minTranslate();\r\n          doBounce = true;\r\n          data.allowMomentumBounce = true;\r\n        } else {\r\n          newPosition = swiper.minTranslate();\r\n        }\r\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\r\n      } else if (params.freeMode.sticky) {\r\n        let nextSlide;\r\n        for (let j = 0; j < snapGrid.length; j += 1) {\r\n          if (snapGrid[j] > -newPosition) {\r\n            nextSlide = j;\r\n            break;\r\n          }\r\n        }\r\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\r\n          newPosition = snapGrid[nextSlide];\r\n        } else {\r\n          newPosition = snapGrid[nextSlide - 1];\r\n        }\r\n        newPosition = -newPosition;\r\n      }\r\n      if (needsLoopFix) {\r\n        once('transitionEnd', () => {\r\n          swiper.loopFix();\r\n        });\r\n      }\r\n      // Fix duration\r\n      if (swiper.velocity !== 0) {\r\n        if (rtl) {\r\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\r\n        } else {\r\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\r\n        }\r\n        if (params.freeMode.sticky) {\r\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\r\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\r\n          // It's easy to see this when simulating touch with mouse events. To fix this,\r\n          // limit single-slide swipes to the default slide duration. This also has the\r\n          // nice side effect of matching slide speed if the user stopped moving before\r\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\r\n          // For faster swipes, also apply limits (albeit higher ones).\r\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\r\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\r\n          if (moveDistance < currentSlideSize) {\r\n            momentumDuration = params.speed;\r\n          } else if (moveDistance < 2 * currentSlideSize) {\r\n            momentumDuration = params.speed * 1.5;\r\n          } else {\r\n            momentumDuration = params.speed * 2.5;\r\n          }\r\n        }\r\n      } else if (params.freeMode.sticky) {\r\n        swiper.slideToClosest();\r\n        return;\r\n      }\r\n      if (params.freeMode.momentumBounce && doBounce) {\r\n        swiper.updateProgress(afterBouncePosition);\r\n        swiper.setTransition(momentumDuration);\r\n        swiper.setTranslate(newPosition);\r\n        swiper.transitionStart(true, swiper.swipeDirection);\r\n        swiper.animating = true;\r\n        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(wrapperEl, () => {\r\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\r\n          emit('momentumBounce');\r\n          swiper.setTransition(params.speed);\r\n          setTimeout(() => {\r\n            swiper.setTranslate(afterBouncePosition);\r\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(wrapperEl, () => {\r\n              if (!swiper || swiper.destroyed) return;\r\n              swiper.transitionEnd();\r\n            });\r\n          }, 0);\r\n        });\r\n      } else if (swiper.velocity) {\r\n        emit('_freeModeNoMomentumRelease');\r\n        swiper.updateProgress(newPosition);\r\n        swiper.setTransition(momentumDuration);\r\n        swiper.setTranslate(newPosition);\r\n        swiper.transitionStart(true, swiper.swipeDirection);\r\n        if (!swiper.animating) {\r\n          swiper.animating = true;\r\n          (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(wrapperEl, () => {\r\n            if (!swiper || swiper.destroyed) return;\r\n            swiper.transitionEnd();\r\n          });\r\n        }\r\n      } else {\r\n        swiper.updateProgress(newPosition);\r\n      }\r\n      swiper.updateActiveIndex();\r\n      swiper.updateSlidesClasses();\r\n    } else if (params.freeMode.sticky) {\r\n      swiper.slideToClosest();\r\n      return;\r\n    } else if (params.freeMode) {\r\n      emit('_freeModeNoMomentumRelease');\r\n    }\r\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\r\n      emit('_freeModeStaticRelease');\r\n      swiper.updateProgress();\r\n      swiper.updateActiveIndex();\r\n      swiper.updateSlidesClasses();\r\n    }\r\n  }\r\n  Object.assign(swiper, {\r\n    freeMode: {\r\n      onTouchStart,\r\n      onTouchMove,\r\n      onTouchEnd\r\n    }\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/free-mode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/grid.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/grid.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Grid)\n/* harmony export */ });\nfunction Grid(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    grid: {\r\n      rows: 1,\r\n      fill: 'column'\r\n    }\r\n  });\r\n  let slidesNumberEvenToRows;\r\n  let slidesPerRow;\r\n  let numFullColumns;\r\n  let wasMultiRow;\r\n  const getSpaceBetween = () => {\r\n    let spaceBetween = swiper.params.spaceBetween;\r\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\r\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\r\n    } else if (typeof spaceBetween === 'string') {\r\n      spaceBetween = parseFloat(spaceBetween);\r\n    }\r\n    return spaceBetween;\r\n  };\r\n  const initSlides = slides => {\r\n    const {\r\n      slidesPerView\r\n    } = swiper.params;\r\n    const {\r\n      rows,\r\n      fill\r\n    } = swiper.params.grid;\r\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\r\n    numFullColumns = Math.floor(slidesLength / rows);\r\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\r\n      slidesNumberEvenToRows = slidesLength;\r\n    } else {\r\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\r\n    }\r\n    if (slidesPerView !== 'auto' && fill === 'row') {\r\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\r\n    }\r\n    slidesPerRow = slidesNumberEvenToRows / rows;\r\n  };\r\n  const unsetSlides = () => {\r\n    if (swiper.slides) {\r\n      swiper.slides.forEach(slide => {\r\n        if (slide.swiperSlideGridSet) {\r\n          slide.style.height = '';\r\n          slide.style[swiper.getDirectionLabel('margin-top')] = '';\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const updateSlide = (i, slide, slides) => {\r\n    const {\r\n      slidesPerGroup\r\n    } = swiper.params;\r\n    const spaceBetween = getSpaceBetween();\r\n    const {\r\n      rows,\r\n      fill\r\n    } = swiper.params.grid;\r\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\r\n    // Set slides order\r\n    let newSlideOrderIndex;\r\n    let column;\r\n    let row;\r\n    if (fill === 'row' && slidesPerGroup > 1) {\r\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\r\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\r\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\r\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\r\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\r\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\r\n      slide.style.order = newSlideOrderIndex;\r\n    } else if (fill === 'column') {\r\n      column = Math.floor(i / rows);\r\n      row = i - column * rows;\r\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\r\n        row += 1;\r\n        if (row >= rows) {\r\n          row = 0;\r\n          column += 1;\r\n        }\r\n      }\r\n    } else {\r\n      row = Math.floor(i / slidesPerRow);\r\n      column = i - row * slidesPerRow;\r\n    }\r\n    slide.row = row;\r\n    slide.column = column;\r\n    slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;\r\n    slide.style[swiper.getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\r\n    slide.swiperSlideGridSet = true;\r\n  };\r\n  const updateWrapperSize = (slideSize, snapGrid) => {\r\n    const {\r\n      centeredSlides,\r\n      roundLengths\r\n    } = swiper.params;\r\n    const spaceBetween = getSpaceBetween();\r\n    const {\r\n      rows\r\n    } = swiper.params.grid;\r\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\r\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\r\n    if (!swiper.params.cssMode) {\r\n      swiper.wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\r\n    }\r\n    if (centeredSlides) {\r\n      const newSlidesGrid = [];\r\n      for (let i = 0; i < snapGrid.length; i += 1) {\r\n        let slidesGridItem = snapGrid[i];\r\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\r\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\r\n      }\r\n      snapGrid.splice(0, snapGrid.length);\r\n      snapGrid.push(...newSlidesGrid);\r\n    }\r\n  };\r\n  const onInit = () => {\r\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\r\n  };\r\n  const onUpdate = () => {\r\n    const {\r\n      params,\r\n      el\r\n    } = swiper;\r\n    const isMultiRow = params.grid && params.grid.rows > 1;\r\n    if (wasMultiRow && !isMultiRow) {\r\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\r\n      numFullColumns = 1;\r\n      swiper.emitContainerClasses();\r\n    } else if (!wasMultiRow && isMultiRow) {\r\n      el.classList.add(`${params.containerModifierClass}grid`);\r\n      if (params.grid.fill === 'column') {\r\n        el.classList.add(`${params.containerModifierClass}grid-column`);\r\n      }\r\n      swiper.emitContainerClasses();\r\n    }\r\n    wasMultiRow = isMultiRow;\r\n  };\r\n  on('init', onInit);\r\n  on('update', onUpdate);\r\n  swiper.grid = {\r\n    initSlides,\r\n    unsetSlides,\r\n    updateSlide,\r\n    updateWrapperSize\r\n  };\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/grid.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/hash-navigation.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/hash-navigation.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HashNavigation)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\nfunction HashNavigation(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    emit,\r\n    on\r\n  } = _ref;\r\n  let initialized = false;\r\n  const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  extendParams({\r\n    hashNavigation: {\r\n      enabled: false,\r\n      replaceState: false,\r\n      watchState: false,\r\n      getSlideIndex(_s, hash) {\r\n        if (swiper.virtual && swiper.params.virtual.enabled) {\r\n          const slideWithHash = swiper.slides.filter(slideEl => slideEl.getAttribute('data-hash') === hash)[0];\r\n          if (!slideWithHash) return 0;\r\n          const index = parseInt(slideWithHash.getAttribute('data-swiper-slide-index'), 10);\r\n          return index;\r\n        }\r\n        return swiper.getSlideIndex((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideClass}[data-hash=\"${hash}\"], swiper-slide[data-hash=\"${hash}\"]`)[0]);\r\n      }\r\n    }\r\n  });\r\n  const onHashChange = () => {\r\n    emit('hashChange');\r\n    const newHash = document.location.hash.replace('#', '');\r\n    const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides[swiper.activeIndex];\r\n    const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute('data-hash') : '';\r\n    if (newHash !== activeSlideHash) {\r\n      const newIndex = swiper.params.hashNavigation.getSlideIndex(swiper, newHash);\r\n      if (typeof newIndex === 'undefined' || Number.isNaN(newIndex)) return;\r\n      swiper.slideTo(newIndex);\r\n    }\r\n  };\r\n  const setHash = () => {\r\n    if (!initialized || !swiper.params.hashNavigation.enabled) return;\r\n    const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides[swiper.activeIndex];\r\n    const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute('data-hash') || activeSlideEl.getAttribute('data-history') : '';\r\n    if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\r\n      window.history.replaceState(null, null, `#${activeSlideHash}` || '');\r\n      emit('hashSet');\r\n    } else {\r\n      document.location.hash = activeSlideHash || '';\r\n      emit('hashSet');\r\n    }\r\n  };\r\n  const init = () => {\r\n    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\r\n    initialized = true;\r\n    const hash = document.location.hash.replace('#', '');\r\n    if (hash) {\r\n      const speed = 0;\r\n      const index = swiper.params.hashNavigation.getSlideIndex(swiper, hash);\r\n      swiper.slideTo(index || 0, speed, swiper.params.runCallbacksOnInit, true);\r\n    }\r\n    if (swiper.params.hashNavigation.watchState) {\r\n      window.addEventListener('hashchange', onHashChange);\r\n    }\r\n  };\r\n  const destroy = () => {\r\n    if (swiper.params.hashNavigation.watchState) {\r\n      window.removeEventListener('hashchange', onHashChange);\r\n    }\r\n  };\r\n  on('init', () => {\r\n    if (swiper.params.hashNavigation.enabled) {\r\n      init();\r\n    }\r\n  });\r\n  on('destroy', () => {\r\n    if (swiper.params.hashNavigation.enabled) {\r\n      destroy();\r\n    }\r\n  });\r\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\r\n    if (initialized) {\r\n      setHash();\r\n    }\r\n  });\r\n  on('slideChange', () => {\r\n    if (initialized && swiper.params.cssMode) {\r\n      setHash();\r\n    }\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaGFzaC1uYXZpZ2F0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Y7QUFDckI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxtQkFBbUIsNkRBQVc7QUFDOUIsaUJBQWlCLDZEQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxvREFBZSxzQkFBc0IseUJBQXlCLGNBQWMsS0FBSyw4QkFBOEIsS0FBSztBQUN4SjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLHVJQUF1SSxtQkFBbUI7QUFDMUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUlBQXVJLG1CQUFtQjtBQUMxSjtBQUNBO0FBQ0Esa0RBQWtELGdCQUFnQjtBQUNsRTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oYXNoLW5hdmlnYXRpb24ubWpzPzdkNmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZyBhcyBnZXREb2N1bWVudCwgYSBhcyBnZXRXaW5kb3cgfSBmcm9tICcuLi9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzJztcclxuaW1wb3J0IHsgZSBhcyBlbGVtZW50Q2hpbGRyZW4gfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcclxuXHJcbmZ1bmN0aW9uIEhhc2hOYXZpZ2F0aW9uKF9yZWYpIHtcclxuICBsZXQge1xyXG4gICAgc3dpcGVyLFxyXG4gICAgZXh0ZW5kUGFyYW1zLFxyXG4gICAgZW1pdCxcclxuICAgIG9uXHJcbiAgfSA9IF9yZWY7XHJcbiAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xyXG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xyXG4gIGV4dGVuZFBhcmFtcyh7XHJcbiAgICBoYXNoTmF2aWdhdGlvbjoge1xyXG4gICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcclxuICAgICAgd2F0Y2hTdGF0ZTogZmFsc2UsXHJcbiAgICAgIGdldFNsaWRlSW5kZXgoX3MsIGhhc2gpIHtcclxuICAgICAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcclxuICAgICAgICAgIGNvbnN0IHNsaWRlV2l0aEhhc2ggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWhhc2gnKSA9PT0gaGFzaClbMF07XHJcbiAgICAgICAgICBpZiAoIXNsaWRlV2l0aEhhc2gpIHJldHVybiAwO1xyXG4gICAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChzbGlkZVdpdGhIYXNoLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xyXG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1oYXNoPVwiJHtoYXNofVwiXSwgc3dpcGVyLXNsaWRlW2RhdGEtaGFzaD1cIiR7aGFzaH1cIl1gKVswXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuICBjb25zdCBvbkhhc2hDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICBlbWl0KCdoYXNoQ2hhbmdlJyk7XHJcbiAgICBjb25zdCBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xyXG4gICAgY29uc3QgYWN0aXZlU2xpZGVFbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLmFjdGl2ZUluZGV4fVwiXWApIDogc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xyXG4gICAgY29uc3QgYWN0aXZlU2xpZGVIYXNoID0gYWN0aXZlU2xpZGVFbCA/IGFjdGl2ZVNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWhhc2gnKSA6ICcnO1xyXG4gICAgaWYgKG5ld0hhc2ggIT09IGFjdGl2ZVNsaWRlSGFzaCkge1xyXG4gICAgICBjb25zdCBuZXdJbmRleCA9IHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZ2V0U2xpZGVJbmRleChzd2lwZXIsIG5ld0hhc2gpO1xyXG4gICAgICBpZiAodHlwZW9mIG5ld0luZGV4ID09PSAndW5kZWZpbmVkJyB8fCBOdW1iZXIuaXNOYU4obmV3SW5kZXgpKSByZXR1cm47XHJcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcclxuICAgIH1cclxuICB9O1xyXG4gIGNvbnN0IHNldEhhc2ggPSAoKSA9PiB7XHJcbiAgICBpZiAoIWluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHJldHVybjtcclxuICAgIGNvbnN0IGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci5zbGlkZXNFbC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N3aXBlci5hY3RpdmVJbmRleH1cIl1gKSA6IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XTtcclxuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSGFzaCA9IGFjdGl2ZVNsaWRlRWwgPyBhY3RpdmVTbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1oYXNoJykgfHwgYWN0aXZlU2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlzdG9yeScpIDogJyc7XHJcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5yZXBsYWNlU3RhdGUgJiYgd2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XHJcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCBgIyR7YWN0aXZlU2xpZGVIYXNofWAgfHwgJycpO1xyXG4gICAgICBlbWl0KCdoYXNoU2V0Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gYWN0aXZlU2xpZGVIYXNoIHx8ICcnO1xyXG4gICAgICBlbWl0KCdoYXNoU2V0Jyk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBjb25zdCBpbml0ID0gKCkgPT4ge1xyXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgfHwgc3dpcGVyLnBhcmFtcy5oaXN0b3J5ICYmIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47XHJcbiAgICBpbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICBjb25zdCBoYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xyXG4gICAgaWYgKGhhc2gpIHtcclxuICAgICAgY29uc3Qgc3BlZWQgPSAwO1xyXG4gICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZ2V0U2xpZGVJbmRleChzd2lwZXIsIGhhc2gpO1xyXG4gICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCB8fCAwLCBzcGVlZCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xyXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBvbignaW5pdCcsICgpID0+IHtcclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcclxuICAgICAgaW5pdCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xyXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xyXG4gICAgICBkZXN0cm95KCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgb24oJ3RyYW5zaXRpb25FbmQgX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnLCAoKSA9PiB7XHJcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgc2V0SGFzaCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcclxuICAgIGlmIChpbml0aWFsaXplZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcclxuICAgICAgc2V0SGFzaCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgeyBIYXNoTmF2aWdhdGlvbiBhcyBkZWZhdWx0IH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/hash-navigation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/history.mjs":
/*!*************************************************!*\
  !*** ./node_modules/swiper/modules/history.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\r\n\r\nfunction History(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    history: {\r\n      enabled: false,\r\n      root: '',\r\n      replaceState: false,\r\n      key: 'slides',\r\n      keepQuery: false\r\n    }\r\n  });\r\n  let initialized = false;\r\n  let paths = {};\r\n  const slugify = text => {\r\n    return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\r\n  };\r\n  const getPathValues = urlOverride => {\r\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n    let location;\r\n    if (urlOverride) {\r\n      location = new URL(urlOverride);\r\n    } else {\r\n      location = window.location;\r\n    }\r\n    const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');\r\n    const total = pathArray.length;\r\n    const key = pathArray[total - 2];\r\n    const value = pathArray[total - 1];\r\n    return {\r\n      key,\r\n      value\r\n    };\r\n  };\r\n  const setHistory = (key, index) => {\r\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n    if (!initialized || !swiper.params.history.enabled) return;\r\n    let location;\r\n    if (swiper.params.url) {\r\n      location = new URL(swiper.params.url);\r\n    } else {\r\n      location = window.location;\r\n    }\r\n    const slide = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${index}\"]`) : swiper.slides[index];\r\n    let value = slugify(slide.getAttribute('data-history'));\r\n    if (swiper.params.history.root.length > 0) {\r\n      let root = swiper.params.history.root;\r\n      if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);\r\n      value = `${root}/${key ? `${key}/` : ''}${value}`;\r\n    } else if (!location.pathname.includes(key)) {\r\n      value = `${key ? `${key}/` : ''}${value}`;\r\n    }\r\n    if (swiper.params.history.keepQuery) {\r\n      value += location.search;\r\n    }\r\n    const currentState = window.history.state;\r\n    if (currentState && currentState.value === value) {\r\n      return;\r\n    }\r\n    if (swiper.params.history.replaceState) {\r\n      window.history.replaceState({\r\n        value\r\n      }, null, value);\r\n    } else {\r\n      window.history.pushState({\r\n        value\r\n      }, null, value);\r\n    }\r\n  };\r\n  const scrollToSlide = (speed, value, runCallbacks) => {\r\n    if (value) {\r\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\r\n        const slide = swiper.slides[i];\r\n        const slideHistory = slugify(slide.getAttribute('data-history'));\r\n        if (slideHistory === value) {\r\n          const index = swiper.getSlideIndex(slide);\r\n          swiper.slideTo(index, speed, runCallbacks);\r\n        }\r\n      }\r\n    } else {\r\n      swiper.slideTo(0, speed, runCallbacks);\r\n    }\r\n  };\r\n  const setHistoryPopState = () => {\r\n    paths = getPathValues(swiper.params.url);\r\n    scrollToSlide(swiper.params.speed, paths.value, false);\r\n  };\r\n  const init = () => {\r\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n    if (!swiper.params.history) return;\r\n    if (!window.history || !window.history.pushState) {\r\n      swiper.params.history.enabled = false;\r\n      swiper.params.hashNavigation.enabled = true;\r\n      return;\r\n    }\r\n    initialized = true;\r\n    paths = getPathValues(swiper.params.url);\r\n    if (!paths.key && !paths.value) {\r\n      if (!swiper.params.history.replaceState) {\r\n        window.addEventListener('popstate', setHistoryPopState);\r\n      }\r\n      return;\r\n    }\r\n    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\r\n    if (!swiper.params.history.replaceState) {\r\n      window.addEventListener('popstate', setHistoryPopState);\r\n    }\r\n  };\r\n  const destroy = () => {\r\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n    if (!swiper.params.history.replaceState) {\r\n      window.removeEventListener('popstate', setHistoryPopState);\r\n    }\r\n  };\r\n  on('init', () => {\r\n    if (swiper.params.history.enabled) {\r\n      init();\r\n    }\r\n  });\r\n  on('destroy', () => {\r\n    if (swiper.params.history.enabled) {\r\n      destroy();\r\n    }\r\n  });\r\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\r\n    if (initialized) {\r\n      setHistory(swiper.params.history.key, swiper.activeIndex);\r\n    }\r\n  });\r\n  on('slideChange', () => {\r\n    if (initialized && swiper.params.cssMode) {\r\n      setHistory(swiper.params.history.key, swiper.activeIndex);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaGlzdG9yeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZEQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkRBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLCtIQUErSCxNQUFNO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLEtBQUssR0FBRyxTQUFTLElBQUksUUFBUSxFQUFFLE1BQU07QUFDdEQsTUFBTTtBQUNOLGlCQUFpQixTQUFTLElBQUksUUFBUSxFQUFFLE1BQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxZQUFZO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkRBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2REFBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oaXN0b3J5Lm1qcz9lOWMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGEgYXMgZ2V0V2luZG93IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XHJcblxyXG5mdW5jdGlvbiBIaXN0b3J5KF9yZWYpIHtcclxuICBsZXQge1xyXG4gICAgc3dpcGVyLFxyXG4gICAgZXh0ZW5kUGFyYW1zLFxyXG4gICAgb25cclxuICB9ID0gX3JlZjtcclxuICBleHRlbmRQYXJhbXMoe1xyXG4gICAgaGlzdG9yeToge1xyXG4gICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgcm9vdDogJycsXHJcbiAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXHJcbiAgICAgIGtleTogJ3NsaWRlcycsXHJcbiAgICAgIGtlZXBRdWVyeTogZmFsc2VcclxuICAgIH1cclxuICB9KTtcclxuICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICBsZXQgcGF0aHMgPSB7fTtcclxuICBjb25zdCBzbHVnaWZ5ID0gdGV4dCA9PiB7XHJcbiAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJy0nKS5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJykucmVwbGFjZSgvLS0rL2csICctJykucmVwbGFjZSgvXi0rLywgJycpLnJlcGxhY2UoLy0rJC8sICcnKTtcclxuICB9O1xyXG4gIGNvbnN0IGdldFBhdGhWYWx1ZXMgPSB1cmxPdmVycmlkZSA9PiB7XHJcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcclxuICAgIGxldCBsb2NhdGlvbjtcclxuICAgIGlmICh1cmxPdmVycmlkZSkge1xyXG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwodXJsT3ZlcnJpZGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXRoQXJyYXkgPSBsb2NhdGlvbi5wYXRobmFtZS5zbGljZSgxKS5zcGxpdCgnLycpLmZpbHRlcihwYXJ0ID0+IHBhcnQgIT09ICcnKTtcclxuICAgIGNvbnN0IHRvdGFsID0gcGF0aEFycmF5Lmxlbmd0aDtcclxuICAgIGNvbnN0IGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdO1xyXG4gICAgY29uc3QgdmFsdWUgPSBwYXRoQXJyYXlbdG90YWwgLSAxXTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGtleSxcclxuICAgICAgdmFsdWVcclxuICAgIH07XHJcbiAgfTtcclxuICBjb25zdCBzZXRIaXN0b3J5ID0gKGtleSwgaW5kZXgpID0+IHtcclxuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xyXG4gICAgaWYgKCFpbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcclxuICAgIGxldCBsb2NhdGlvbjtcclxuICAgIGlmIChzd2lwZXIucGFyYW1zLnVybCkge1xyXG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwoc3dpcGVyLnBhcmFtcy51cmwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XHJcbiAgICB9XHJcbiAgICBjb25zdCBzbGlkZSA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aW5kZXh9XCJdYCkgOiBzd2lwZXIuc2xpZGVzW2luZGV4XTtcclxuICAgIGxldCB2YWx1ZSA9IHNsdWdpZnkoc2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWhpc3RvcnknKSk7XHJcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJvb3QubGVuZ3RoID4gMCkge1xyXG4gICAgICBsZXQgcm9vdCA9IHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yb290O1xyXG4gICAgICBpZiAocm9vdFtyb290Lmxlbmd0aCAtIDFdID09PSAnLycpIHJvb3QgPSByb290LnNsaWNlKDAsIHJvb3QubGVuZ3RoIC0gMSk7XHJcbiAgICAgIHZhbHVlID0gYCR7cm9vdH0vJHtrZXkgPyBgJHtrZXl9L2AgOiAnJ30ke3ZhbHVlfWA7XHJcbiAgICB9IGVsc2UgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgIHZhbHVlID0gYCR7a2V5ID8gYCR7a2V5fS9gIDogJyd9JHt2YWx1ZX1gO1xyXG4gICAgfVxyXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZWVwUXVlcnkpIHtcclxuICAgICAgdmFsdWUgKz0gbG9jYXRpb24uc2VhcmNoO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XHJcbiAgICBpZiAoY3VycmVudFN0YXRlICYmIGN1cnJlbnRTdGF0ZS52YWx1ZSA9PT0gdmFsdWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcclxuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHtcclxuICAgICAgICB2YWx1ZVxyXG4gICAgICB9LCBudWxsLCB2YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xyXG4gICAgICAgIHZhbHVlXHJcbiAgICAgIH0sIG51bGwsIHZhbHVlKTtcclxuICAgIH1cclxuICB9O1xyXG4gIGNvbnN0IHNjcm9sbFRvU2xpZGUgPSAoc3BlZWQsIHZhbHVlLCBydW5DYWxsYmFja3MpID0+IHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IHNsaWRlID0gc3dpcGVyLnNsaWRlc1tpXTtcclxuICAgICAgICBjb25zdCBzbGlkZUhpc3RvcnkgPSBzbHVnaWZ5KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykpO1xyXG4gICAgICAgIGlmIChzbGlkZUhpc3RvcnkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHNsaWRlKTtcclxuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgY29uc3Qgc2V0SGlzdG9yeVBvcFN0YXRlID0gKCkgPT4ge1xyXG4gICAgcGF0aHMgPSBnZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcclxuICAgIHNjcm9sbFRvU2xpZGUoc3dpcGVyLnBhcmFtcy5zcGVlZCwgcGF0aHMudmFsdWUsIGZhbHNlKTtcclxuICB9O1xyXG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcclxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5KSByZXR1cm47XHJcbiAgICBpZiAoIXdpbmRvdy5oaXN0b3J5IHx8ICF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcclxuICAgICAgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgcGF0aHMgPSBnZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcclxuICAgIGlmICghcGF0aHMua2V5ICYmICFwYXRocy52YWx1ZSkge1xyXG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzZXRIaXN0b3J5UG9wU3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNjcm9sbFRvU2xpZGUoMCwgcGF0aHMudmFsdWUsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcclxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzZXRIaXN0b3J5UG9wU3RhdGUpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcclxuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xyXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBvbignaW5pdCcsICgpID0+IHtcclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xyXG4gICAgICBpbml0KCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XHJcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcclxuICAgICAgZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIG9uKCd0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4ge1xyXG4gICAgaWYgKGluaXRpYWxpemVkKSB7XHJcbiAgICAgIHNldEhpc3Rvcnkoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtleSwgc3dpcGVyLmFjdGl2ZUluZGV4KTtcclxuICAgIH1cclxuICB9KTtcclxuICBvbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XHJcbiAgICAgIHNldEhpc3Rvcnkoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtleSwgc3dpcGVyLmFjdGl2ZUluZGV4KTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IHsgSGlzdG9yeSBhcyBkZWZhdWx0IH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/history.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/swiper/modules/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A11y: () => (/* reexport safe */ _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   Autoplay: () => (/* reexport safe */ _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   Controller: () => (/* reexport safe */ _controller_mjs__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   EffectCards: () => (/* reexport safe */ _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__[\"default\"]),\n/* harmony export */   EffectCoverflow: () => (/* reexport safe */ _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__[\"default\"]),\n/* harmony export */   EffectCreative: () => (/* reexport safe */ _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__[\"default\"]),\n/* harmony export */   EffectCube: () => (/* reexport safe */ _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__[\"default\"]),\n/* harmony export */   EffectFade: () => (/* reexport safe */ _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"]),\n/* harmony export */   EffectFlip: () => (/* reexport safe */ _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__[\"default\"]),\n/* harmony export */   FreeMode: () => (/* reexport safe */ _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n/* harmony export */   Grid: () => (/* reexport safe */ _grid_mjs__WEBPACK_IMPORTED_MODULE_15__[\"default\"]),\n/* harmony export */   HashNavigation: () => (/* reexport safe */ _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   History: () => (/* reexport safe */ _history_mjs__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   Keyboard: () => (/* reexport safe */ _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   Manipulation: () => (/* reexport safe */ _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"]),\n/* harmony export */   Mousewheel: () => (/* reexport safe */ _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   Navigation: () => (/* reexport safe */ _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   Pagination: () => (/* reexport safe */ _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   Parallax: () => (/* reexport safe */ _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   Scrollbar: () => (/* reexport safe */ _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   Thumbs: () => (/* reexport safe */ _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n/* harmony export */   Virtual: () => (/* reexport safe */ _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   Zoom: () => (/* reexport safe */ _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./virtual.mjs */ \"(ssr)/./node_modules/swiper/modules/virtual.mjs\");\n/* harmony import */ var _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboard.mjs */ \"(ssr)/./node_modules/swiper/modules/keyboard.mjs\");\n/* harmony import */ var _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mousewheel.mjs */ \"(ssr)/./node_modules/swiper/modules/mousewheel.mjs\");\n/* harmony import */ var _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation.mjs */ \"(ssr)/./node_modules/swiper/modules/navigation.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination.mjs */ \"(ssr)/./node_modules/swiper/modules/pagination.mjs\");\n/* harmony import */ var _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scrollbar.mjs */ \"(ssr)/./node_modules/swiper/modules/scrollbar.mjs\");\n/* harmony import */ var _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parallax.mjs */ \"(ssr)/./node_modules/swiper/modules/parallax.mjs\");\n/* harmony import */ var _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./zoom.mjs */ \"(ssr)/./node_modules/swiper/modules/zoom.mjs\");\n/* harmony import */ var _controller_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./controller.mjs */ \"(ssr)/./node_modules/swiper/modules/controller.mjs\");\n/* harmony import */ var _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./a11y.mjs */ \"(ssr)/./node_modules/swiper/modules/a11y.mjs\");\n/* harmony import */ var _history_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./history.mjs */ \"(ssr)/./node_modules/swiper/modules/history.mjs\");\n/* harmony import */ var _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hash-navigation.mjs */ \"(ssr)/./node_modules/swiper/modules/hash-navigation.mjs\");\n/* harmony import */ var _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./autoplay.mjs */ \"(ssr)/./node_modules/swiper/modules/autoplay.mjs\");\n/* harmony import */ var _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./thumbs.mjs */ \"(ssr)/./node_modules/swiper/modules/thumbs.mjs\");\n/* harmony import */ var _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./free-mode.mjs */ \"(ssr)/./node_modules/swiper/modules/free-mode.mjs\");\n/* harmony import */ var _grid_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./grid.mjs */ \"(ssr)/./node_modules/swiper/modules/grid.mjs\");\n/* harmony import */ var _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./manipulation.mjs */ \"(ssr)/./node_modules/swiper/modules/manipulation.mjs\");\n/* harmony import */ var _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./effect-fade.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-fade.mjs\");\n/* harmony import */ var _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./effect-cube.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-cube.mjs\");\n/* harmony import */ var _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./effect-flip.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-flip.mjs\");\n/* harmony import */ var _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./effect-coverflow.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-coverflow.mjs\");\n/* harmony import */ var _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./effect-creative.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-creative.mjs\");\n/* harmony import */ var _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./effect-cards.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-cards.mjs\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUQ7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUNGO0FBQ0Y7QUFDUjtBQUNZO0FBQ1o7QUFDTTtBQUNlO0FBQ2I7QUFDSjtBQUNLO0FBQ1Q7QUFDZ0I7QUFDSDtBQUNBO0FBQ0E7QUFDVTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaW5kZXgubWpzPzFkYzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtkZWZhdWx0IGFzIFZpcnR1YWx9IGZyb20gJy4vdmlydHVhbC5tanMnO1xyXG5leHBvcnQge2RlZmF1bHQgYXMgS2V5Ym9hcmR9IGZyb20gJy4va2V5Ym9hcmQubWpzJztcclxuZXhwb3J0IHtkZWZhdWx0IGFzIE1vdXNld2hlZWx9IGZyb20gJy4vbW91c2V3aGVlbC5tanMnO1xyXG5leHBvcnQge2RlZmF1bHQgYXMgTmF2aWdhdGlvbn0gZnJvbSAnLi9uYXZpZ2F0aW9uLm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBQYWdpbmF0aW9ufSBmcm9tICcuL3BhZ2luYXRpb24ubWpzJztcclxuZXhwb3J0IHtkZWZhdWx0IGFzIFNjcm9sbGJhcn0gZnJvbSAnLi9zY3JvbGxiYXIubWpzJztcclxuZXhwb3J0IHtkZWZhdWx0IGFzIFBhcmFsbGF4fSBmcm9tICcuL3BhcmFsbGF4Lm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBab29tfSBmcm9tICcuL3pvb20ubWpzJztcclxuZXhwb3J0IHtkZWZhdWx0IGFzIENvbnRyb2xsZXJ9IGZyb20gJy4vY29udHJvbGxlci5tanMnO1xyXG5leHBvcnQge2RlZmF1bHQgYXMgQTExeX0gZnJvbSAnLi9hMTF5Lm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBIaXN0b3J5fSBmcm9tICcuL2hpc3RvcnkubWpzJztcclxuZXhwb3J0IHtkZWZhdWx0IGFzIEhhc2hOYXZpZ2F0aW9ufSBmcm9tICcuL2hhc2gtbmF2aWdhdGlvbi5tanMnO1xyXG5leHBvcnQge2RlZmF1bHQgYXMgQXV0b3BsYXl9IGZyb20gJy4vYXV0b3BsYXkubWpzJztcclxuZXhwb3J0IHtkZWZhdWx0IGFzIFRodW1ic30gZnJvbSAnLi90aHVtYnMubWpzJztcclxuZXhwb3J0IHtkZWZhdWx0IGFzIEZyZWVNb2RlfSBmcm9tICcuL2ZyZWUtbW9kZS5tanMnO1xyXG5leHBvcnQge2RlZmF1bHQgYXMgR3JpZH0gZnJvbSAnLi9ncmlkLm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBNYW5pcHVsYXRpb259IGZyb20gJy4vbWFuaXB1bGF0aW9uLm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RGYWRlfSBmcm9tICcuL2VmZmVjdC1mYWRlLm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RDdWJlfSBmcm9tICcuL2VmZmVjdC1jdWJlLm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RGbGlwfSBmcm9tICcuL2VmZmVjdC1mbGlwLm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RDb3ZlcmZsb3d9IGZyb20gJy4vZWZmZWN0LWNvdmVyZmxvdy5tanMnO1xyXG5leHBvcnQge2RlZmF1bHQgYXMgRWZmZWN0Q3JlYXRpdmV9IGZyb20gJy4vZWZmZWN0LWNyZWF0aXZlLm1qcyc7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RDYXJkc30gZnJvbSAnLi9lZmZlY3QtY2FyZHMubWpzJzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/keyboard.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/keyboard.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Keyboard)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n/* eslint-disable consistent-return */\r\nfunction Keyboard(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  swiper.keyboard = {\r\n    enabled: false\r\n  };\r\n  extendParams({\r\n    keyboard: {\r\n      enabled: false,\r\n      onlyInViewport: true,\r\n      pageUpDown: true\r\n    }\r\n  });\r\n  function handle(event) {\r\n    if (!swiper.enabled) return;\r\n    const {\r\n      rtlTranslate: rtl\r\n    } = swiper;\r\n    let e = event;\r\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\r\n    const kc = e.keyCode || e.charCode;\r\n    const pageUpDown = swiper.params.keyboard.pageUpDown;\r\n    const isPageUp = pageUpDown && kc === 33;\r\n    const isPageDown = pageUpDown && kc === 34;\r\n    const isArrowLeft = kc === 37;\r\n    const isArrowRight = kc === 39;\r\n    const isArrowUp = kc === 38;\r\n    const isArrowDown = kc === 40;\r\n    // Directions locks\r\n    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\r\n      return false;\r\n    }\r\n    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\r\n      return false;\r\n    }\r\n    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\r\n      return undefined;\r\n    }\r\n    if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {\r\n      return undefined;\r\n    }\r\n    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\r\n      let inView = false;\r\n      // Check that swiper should be inside of visible area of window\r\n      if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(swiper.el, `.${swiper.params.slideClass}, swiper-slide`).length > 0 && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(swiper.el, `.${swiper.params.slideActiveClass}`).length === 0) {\r\n        return undefined;\r\n      }\r\n      const el = swiper.el;\r\n      const swiperWidth = el.clientWidth;\r\n      const swiperHeight = el.clientHeight;\r\n      const windowWidth = window.innerWidth;\r\n      const windowHeight = window.innerHeight;\r\n      const swiperOffset = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(el);\r\n      if (rtl) swiperOffset.left -= el.scrollLeft;\r\n      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\r\n      for (let i = 0; i < swiperCoord.length; i += 1) {\r\n        const point = swiperCoord[i];\r\n        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\r\n          if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\r\n          inView = true;\r\n        }\r\n      }\r\n      if (!inView) return undefined;\r\n    }\r\n    if (swiper.isHorizontal()) {\r\n      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\r\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\r\n      }\r\n      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\r\n      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\r\n    } else {\r\n      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\r\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\r\n      }\r\n      if (isPageDown || isArrowDown) swiper.slideNext();\r\n      if (isPageUp || isArrowUp) swiper.slidePrev();\r\n    }\r\n    emit('keyPress', kc);\r\n    return undefined;\r\n  }\r\n  function enable() {\r\n    if (swiper.keyboard.enabled) return;\r\n    document.addEventListener('keydown', handle);\r\n    swiper.keyboard.enabled = true;\r\n  }\r\n  function disable() {\r\n    if (!swiper.keyboard.enabled) return;\r\n    document.removeEventListener('keydown', handle);\r\n    swiper.keyboard.enabled = false;\r\n  }\r\n  on('init', () => {\r\n    if (swiper.params.keyboard.enabled) {\r\n      enable();\r\n    }\r\n  });\r\n  on('destroy', () => {\r\n    if (swiper.keyboard.enabled) {\r\n      disable();\r\n    }\r\n  });\r\n  Object.assign(swiper.keyboard, {\r\n    enable,\r\n    disable\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMva2V5Ym9hcmQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRjtBQUNGO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osbUJBQW1CLDZEQUFXO0FBQzlCLGlCQUFpQiw2REFBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxvREFBYyxnQkFBZ0IseUJBQXlCLCtCQUErQixvREFBYyxnQkFBZ0IsK0JBQStCO0FBQzdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9EQUFhO0FBQ3hDO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUMrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2tleWJvYXJkLm1qcz9hMDRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0RG9jdW1lbnQsIGEgYXMgZ2V0V2luZG93IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XHJcbmltcG9ydCB7IGEgYXMgZWxlbWVudFBhcmVudHMsIGIgYXMgZWxlbWVudE9mZnNldCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4gKi9cclxuZnVuY3Rpb24gS2V5Ym9hcmQoX3JlZikge1xyXG4gIGxldCB7XHJcbiAgICBzd2lwZXIsXHJcbiAgICBleHRlbmRQYXJhbXMsXHJcbiAgICBvbixcclxuICAgIGVtaXRcclxuICB9ID0gX3JlZjtcclxuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XHJcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XHJcbiAgc3dpcGVyLmtleWJvYXJkID0ge1xyXG4gICAgZW5hYmxlZDogZmFsc2VcclxuICB9O1xyXG4gIGV4dGVuZFBhcmFtcyh7XHJcbiAgICBrZXlib2FyZDoge1xyXG4gICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgIHBhZ2VVcERvd246IHRydWVcclxuICAgIH1cclxuICB9KTtcclxuICBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcclxuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcclxuICAgIGNvbnN0IHtcclxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcclxuICAgIH0gPSBzd2lwZXI7XHJcbiAgICBsZXQgZSA9IGV2ZW50O1xyXG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDsgLy8ganF1ZXJ5IGZpeFxyXG4gICAgY29uc3Qga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtcclxuICAgIGNvbnN0IHBhZ2VVcERvd24gPSBzd2lwZXIucGFyYW1zLmtleWJvYXJkLnBhZ2VVcERvd247XHJcbiAgICBjb25zdCBpc1BhZ2VVcCA9IHBhZ2VVcERvd24gJiYga2MgPT09IDMzO1xyXG4gICAgY29uc3QgaXNQYWdlRG93biA9IHBhZ2VVcERvd24gJiYga2MgPT09IDM0O1xyXG4gICAgY29uc3QgaXNBcnJvd0xlZnQgPSBrYyA9PT0gMzc7XHJcbiAgICBjb25zdCBpc0Fycm93UmlnaHQgPSBrYyA9PT0gMzk7XHJcbiAgICBjb25zdCBpc0Fycm93VXAgPSBrYyA9PT0gMzg7XHJcbiAgICBjb25zdCBpc0Fycm93RG93biA9IGtjID09PSA0MDtcclxuICAgIC8vIERpcmVjdGlvbnMgbG9ja3NcclxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd1JpZ2h0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd0Rvd24gfHwgaXNQYWdlRG93bikpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93TGVmdCB8fCBzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGlzQXJyb3dVcCB8fCBpc1BhZ2VVcCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dMZWZ0IHx8IGlzQXJyb3dSaWdodCB8fCBpc0Fycm93VXAgfHwgaXNBcnJvd0Rvd24pKSB7XHJcbiAgICAgIGxldCBpblZpZXcgPSBmYWxzZTtcclxuICAgICAgLy8gQ2hlY2sgdGhhdCBzd2lwZXIgc2hvdWxkIGJlIGluc2lkZSBvZiB2aXNpYmxlIGFyZWEgb2Ygd2luZG93XHJcbiAgICAgIGlmIChlbGVtZW50UGFyZW50cyhzd2lwZXIuZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5sZW5ndGggPiAwICYmIGVsZW1lbnRQYXJlbnRzKHN3aXBlci5lbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xyXG4gICAgICBjb25zdCBzd2lwZXJXaWR0aCA9IGVsLmNsaWVudFdpZHRoO1xyXG4gICAgICBjb25zdCBzd2lwZXJIZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgY29uc3Qgc3dpcGVyT2Zmc2V0ID0gZWxlbWVudE9mZnNldChlbCk7XHJcbiAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IGVsLnNjcm9sbExlZnQ7XHJcbiAgICAgIGNvbnN0IHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyV2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXJIZWlnaHRdXTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXJDb29yZC5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XHJcbiAgICAgICAgaWYgKHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gd2luZG93V2lkdGggJiYgcG9pbnRbMV0gPj0gMCAmJiBwb2ludFsxXSA8PSB3aW5kb3dIZWlnaHQpIHtcclxuICAgICAgICAgIGlmIChwb2ludFswXSA9PT0gMCAmJiBwb2ludFsxXSA9PT0gMCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgICAgIGluVmlldyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICghaW5WaWV3KSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xyXG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQpIHtcclxuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwgfHwgKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpIHN3aXBlci5zbGlkZU5leHQoKTtcclxuICAgICAgaWYgKChpc1BhZ2VVcCB8fCBpc0Fycm93TGVmdCkgJiYgIXJ0bCB8fCAoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmIHJ0bCkgc3dpcGVyLnNsaWRlUHJldigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSB7XHJcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXNQYWdlRG93biB8fCBpc0Fycm93RG93bikgc3dpcGVyLnNsaWRlTmV4dCgpO1xyXG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNBcnJvd1VwKSBzd2lwZXIuc2xpZGVQcmV2KCk7XHJcbiAgICB9XHJcbiAgICBlbWl0KCdrZXlQcmVzcycsIGtjKTtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcclxuICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZSk7XHJcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XHJcbiAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlKTtcclxuICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gZmFsc2U7XHJcbiAgfVxyXG4gIG9uKCdpbml0JywgKCkgPT4ge1xyXG4gICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQuZW5hYmxlZCkge1xyXG4gICAgICBlbmFibGUoKTtcclxuICAgIH1cclxuICB9KTtcclxuICBvbignZGVzdHJveScsICgpID0+IHtcclxuICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkge1xyXG4gICAgICBkaXNhYmxlKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIua2V5Ym9hcmQsIHtcclxuICAgIGVuYWJsZSxcclxuICAgIGRpc2FibGVcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IHsgS2V5Ym9hcmQgYXMgZGVmYXVsdCB9O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/keyboard.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/manipulation.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Manipulation)\n/* harmony export */ });\nfunction appendSlide(slides) {\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    slidesEl\r\n  } = swiper;\r\n  if (params.loop) {\r\n    swiper.loopDestroy();\r\n  }\r\n  const appendElement = slideEl => {\r\n    if (typeof slideEl === 'string') {\r\n      const tempDOM = document.createElement('div');\r\n      tempDOM.innerHTML = slideEl;\r\n      slidesEl.append(tempDOM.children[0]);\r\n      tempDOM.innerHTML = '';\r\n    } else {\r\n      slidesEl.append(slideEl);\r\n    }\r\n  };\r\n  if (typeof slides === 'object' && 'length' in slides) {\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      if (slides[i]) appendElement(slides[i]);\r\n    }\r\n  } else {\r\n    appendElement(slides);\r\n  }\r\n  swiper.recalcSlides();\r\n  if (params.loop) {\r\n    swiper.loopCreate();\r\n  }\r\n  if (!params.observer || swiper.isElement) {\r\n    swiper.update();\r\n  }\r\n}\r\n\r\nfunction prependSlide(slides) {\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    activeIndex,\r\n    slidesEl\r\n  } = swiper;\r\n  if (params.loop) {\r\n    swiper.loopDestroy();\r\n  }\r\n  let newActiveIndex = activeIndex + 1;\r\n  const prependElement = slideEl => {\r\n    if (typeof slideEl === 'string') {\r\n      const tempDOM = document.createElement('div');\r\n      tempDOM.innerHTML = slideEl;\r\n      slidesEl.prepend(tempDOM.children[0]);\r\n      tempDOM.innerHTML = '';\r\n    } else {\r\n      slidesEl.prepend(slideEl);\r\n    }\r\n  };\r\n  if (typeof slides === 'object' && 'length' in slides) {\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      if (slides[i]) prependElement(slides[i]);\r\n    }\r\n    newActiveIndex = activeIndex + slides.length;\r\n  } else {\r\n    prependElement(slides);\r\n  }\r\n  swiper.recalcSlides();\r\n  if (params.loop) {\r\n    swiper.loopCreate();\r\n  }\r\n  if (!params.observer || swiper.isElement) {\r\n    swiper.update();\r\n  }\r\n  swiper.slideTo(newActiveIndex, 0, false);\r\n}\r\n\r\nfunction addSlide(index, slides) {\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    activeIndex,\r\n    slidesEl\r\n  } = swiper;\r\n  let activeIndexBuffer = activeIndex;\r\n  if (params.loop) {\r\n    activeIndexBuffer -= swiper.loopedSlides;\r\n    swiper.loopDestroy();\r\n    swiper.recalcSlides();\r\n  }\r\n  const baseLength = swiper.slides.length;\r\n  if (index <= 0) {\r\n    swiper.prependSlide(slides);\r\n    return;\r\n  }\r\n  if (index >= baseLength) {\r\n    swiper.appendSlide(slides);\r\n    return;\r\n  }\r\n  let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\r\n  const slidesBuffer = [];\r\n  for (let i = baseLength - 1; i >= index; i -= 1) {\r\n    const currentSlide = swiper.slides[i];\r\n    currentSlide.remove();\r\n    slidesBuffer.unshift(currentSlide);\r\n  }\r\n  if (typeof slides === 'object' && 'length' in slides) {\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      if (slides[i]) slidesEl.append(slides[i]);\r\n    }\r\n    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\r\n  } else {\r\n    slidesEl.append(slides);\r\n  }\r\n  for (let i = 0; i < slidesBuffer.length; i += 1) {\r\n    slidesEl.append(slidesBuffer[i]);\r\n  }\r\n  swiper.recalcSlides();\r\n  if (params.loop) {\r\n    swiper.loopCreate();\r\n  }\r\n  if (!params.observer || swiper.isElement) {\r\n    swiper.update();\r\n  }\r\n  if (params.loop) {\r\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\r\n  } else {\r\n    swiper.slideTo(newActiveIndex, 0, false);\r\n  }\r\n}\r\n\r\nfunction removeSlide(slidesIndexes) {\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    activeIndex\r\n  } = swiper;\r\n  let activeIndexBuffer = activeIndex;\r\n  if (params.loop) {\r\n    activeIndexBuffer -= swiper.loopedSlides;\r\n    swiper.loopDestroy();\r\n  }\r\n  let newActiveIndex = activeIndexBuffer;\r\n  let indexToRemove;\r\n  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {\r\n    for (let i = 0; i < slidesIndexes.length; i += 1) {\r\n      indexToRemove = slidesIndexes[i];\r\n      if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\r\n      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\r\n    }\r\n    newActiveIndex = Math.max(newActiveIndex, 0);\r\n  } else {\r\n    indexToRemove = slidesIndexes;\r\n    if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\r\n    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\r\n    newActiveIndex = Math.max(newActiveIndex, 0);\r\n  }\r\n  swiper.recalcSlides();\r\n  if (params.loop) {\r\n    swiper.loopCreate();\r\n  }\r\n  if (!params.observer || swiper.isElement) {\r\n    swiper.update();\r\n  }\r\n  if (params.loop) {\r\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\r\n  } else {\r\n    swiper.slideTo(newActiveIndex, 0, false);\r\n  }\r\n}\r\n\r\nfunction removeAllSlides() {\r\n  const swiper = this;\r\n  const slidesIndexes = [];\r\n  for (let i = 0; i < swiper.slides.length; i += 1) {\r\n    slidesIndexes.push(i);\r\n  }\r\n  swiper.removeSlide(slidesIndexes);\r\n}\r\n\r\nfunction Manipulation(_ref) {\r\n  let {\r\n    swiper\r\n  } = _ref;\r\n  Object.assign(swiper, {\r\n    appendSlide: appendSlide.bind(swiper),\r\n    prependSlide: prependSlide.bind(swiper),\r\n    addSlide: addSlide.bind(swiper),\r\n    removeSlide: removeSlide.bind(swiper),\r\n    removeAllSlides: removeAllSlides.bind(swiper)\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/manipulation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/mousewheel.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/mousewheel.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Mousewheel)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n/* eslint-disable consistent-return */\r\nfunction Mousewheel(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  extendParams({\r\n    mousewheel: {\r\n      enabled: false,\r\n      releaseOnEdges: false,\r\n      invert: false,\r\n      forceToAxis: false,\r\n      sensitivity: 1,\r\n      eventsTarget: 'container',\r\n      thresholdDelta: null,\r\n      thresholdTime: null,\r\n      noMousewheelClass: 'swiper-no-mousewheel'\r\n    }\r\n  });\r\n  swiper.mousewheel = {\r\n    enabled: false\r\n  };\r\n  let timeout;\r\n  let lastScrollTime = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\r\n  let lastEventBeforeSnap;\r\n  const recentWheelEvents = [];\r\n  function normalize(e) {\r\n    // Reasonable defaults\r\n    const PIXEL_STEP = 10;\r\n    const LINE_HEIGHT = 40;\r\n    const PAGE_HEIGHT = 800;\r\n    let sX = 0;\r\n    let sY = 0; // spinX, spinY\r\n    let pX = 0;\r\n    let pY = 0; // pixelX, pixelY\r\n\r\n    // Legacy\r\n    if ('detail' in e) {\r\n      sY = e.detail;\r\n    }\r\n    if ('wheelDelta' in e) {\r\n      sY = -e.wheelDelta / 120;\r\n    }\r\n    if ('wheelDeltaY' in e) {\r\n      sY = -e.wheelDeltaY / 120;\r\n    }\r\n    if ('wheelDeltaX' in e) {\r\n      sX = -e.wheelDeltaX / 120;\r\n    }\r\n\r\n    // side scrolling on FF with DOMMouseScroll\r\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\r\n      sX = sY;\r\n      sY = 0;\r\n    }\r\n    pX = sX * PIXEL_STEP;\r\n    pY = sY * PIXEL_STEP;\r\n    if ('deltaY' in e) {\r\n      pY = e.deltaY;\r\n    }\r\n    if ('deltaX' in e) {\r\n      pX = e.deltaX;\r\n    }\r\n    if (e.shiftKey && !pX) {\r\n      // if user scrolls with shift he wants horizontal scroll\r\n      pX = pY;\r\n      pY = 0;\r\n    }\r\n    if ((pX || pY) && e.deltaMode) {\r\n      if (e.deltaMode === 1) {\r\n        // delta in LINE units\r\n        pX *= LINE_HEIGHT;\r\n        pY *= LINE_HEIGHT;\r\n      } else {\r\n        // delta in PAGE units\r\n        pX *= PAGE_HEIGHT;\r\n        pY *= PAGE_HEIGHT;\r\n      }\r\n    }\r\n\r\n    // Fall-back if spin cannot be determined\r\n    if (pX && !sX) {\r\n      sX = pX < 1 ? -1 : 1;\r\n    }\r\n    if (pY && !sY) {\r\n      sY = pY < 1 ? -1 : 1;\r\n    }\r\n    return {\r\n      spinX: sX,\r\n      spinY: sY,\r\n      pixelX: pX,\r\n      pixelY: pY\r\n    };\r\n  }\r\n  function handleMouseEnter() {\r\n    if (!swiper.enabled) return;\r\n    swiper.mouseEntered = true;\r\n  }\r\n  function handleMouseLeave() {\r\n    if (!swiper.enabled) return;\r\n    swiper.mouseEntered = false;\r\n  }\r\n  function animateSlider(newEvent) {\r\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\r\n      // Prevent if delta of wheel scroll delta is below configured threshold\r\n      return false;\r\n    }\r\n    if (swiper.params.mousewheel.thresholdTime && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\r\n      // Prevent if time between scrolls is below configured threshold\r\n      return false;\r\n    }\r\n\r\n    // If the movement is NOT big enough and\r\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\r\n    //   Don't go any further (avoid insignificant scroll movement).\r\n    if (newEvent.delta >= 6 && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)() - lastScrollTime < 60) {\r\n      // Return false as a default\r\n      return true;\r\n    }\r\n    // If user is scrolling towards the end:\r\n    //   If the slider hasn't hit the latest slide or\r\n    //   if the slider is a loop and\r\n    //   if the slider isn't moving right now:\r\n    //     Go to next slide and\r\n    //     emit a scroll event.\r\n    // Else (the user is scrolling towards the beginning) and\r\n    // if the slider hasn't hit the first slide or\r\n    // if the slider is a loop and\r\n    // if the slider isn't moving right now:\r\n    //   Go to prev slide and\r\n    //   emit a scroll event.\r\n    if (newEvent.direction < 0) {\r\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\r\n        swiper.slideNext();\r\n        emit('scroll', newEvent.raw);\r\n      }\r\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\r\n      swiper.slidePrev();\r\n      emit('scroll', newEvent.raw);\r\n    }\r\n    // If you got here is because an animation has been triggered so store the current time\r\n    lastScrollTime = new window.Date().getTime();\r\n    // Return false as a default\r\n    return false;\r\n  }\r\n  function releaseScroll(newEvent) {\r\n    const params = swiper.params.mousewheel;\r\n    if (newEvent.direction < 0) {\r\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\r\n        // Return true to animate scroll on edges\r\n        return true;\r\n      }\r\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\r\n      // Return true to animate scroll on edges\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  function handle(event) {\r\n    let e = event;\r\n    let disableParentSwiper = true;\r\n    if (!swiper.enabled) return;\r\n\r\n    // Ignore event if the target or its parents have the swiper-no-mousewheel class\r\n    if (event.target.closest(`.${swiper.params.mousewheel.noMousewheelClass}`)) return;\r\n    const params = swiper.params.mousewheel;\r\n    if (swiper.params.cssMode) {\r\n      e.preventDefault();\r\n    }\r\n    let targetEl = swiper.el;\r\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\r\n      targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\r\n    }\r\n    const targetElContainsTarget = targetEl && targetEl.contains(e.target);\r\n    if (!swiper.mouseEntered && !targetElContainsTarget && !params.releaseOnEdges) return true;\r\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\r\n    let delta = 0;\r\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\r\n    const data = normalize(e);\r\n    if (params.forceToAxis) {\r\n      if (swiper.isHorizontal()) {\r\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\r\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\r\n    } else {\r\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\r\n    }\r\n    if (delta === 0) return true;\r\n    if (params.invert) delta = -delta;\r\n\r\n    // Get the scroll positions\r\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\r\n    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\r\n    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate();\r\n\r\n    // When loop is true:\r\n    //     the disableParentSwiper will be true.\r\n    // When loop is false:\r\n    //     if the scroll positions is not on edge,\r\n    //     then the disableParentSwiper will be true.\r\n    //     if the scroll on edge positions,\r\n    //     then the disableParentSwiper will be false.\r\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\r\n    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\r\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\r\n      // Register the new event in a variable which stores the relevant data\r\n      const newEvent = {\r\n        time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(),\r\n        delta: Math.abs(delta),\r\n        direction: Math.sign(delta),\r\n        raw: event\r\n      };\r\n\r\n      // Keep the most recent events\r\n      if (recentWheelEvents.length >= 2) {\r\n        recentWheelEvents.shift(); // only store the last N events\r\n      }\r\n\r\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\r\n      recentWheelEvents.push(newEvent);\r\n\r\n      // If there is at least one previous recorded event:\r\n      //   If direction has changed or\r\n      //   if the scroll is quicker than the previous one:\r\n      //     Animate the slider.\r\n      // Else (this is the first time the wheel is moved):\r\n      //     Animate the slider.\r\n      if (prevEvent) {\r\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\r\n          animateSlider(newEvent);\r\n        }\r\n      } else {\r\n        animateSlider(newEvent);\r\n      }\r\n\r\n      // If it's time to release the scroll:\r\n      //   Return now so you don't hit the preventDefault.\r\n      if (releaseScroll(newEvent)) {\r\n        return true;\r\n      }\r\n    } else {\r\n      // Freemode or scrollContainer:\r\n\r\n      // If we recently snapped after a momentum scroll, then ignore wheel events\r\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\r\n      // or if it's a new scroll (larger delta or inverse sign as last event before\r\n      // an end-of-momentum snap).\r\n      const newEvent = {\r\n        time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(),\r\n        delta: Math.abs(delta),\r\n        direction: Math.sign(delta)\r\n      };\r\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\r\n      if (!ignoreWheelEvents) {\r\n        lastEventBeforeSnap = undefined;\r\n        let position = swiper.getTranslate() + delta * params.sensitivity;\r\n        const wasBeginning = swiper.isBeginning;\r\n        const wasEnd = swiper.isEnd;\r\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\r\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\r\n        swiper.setTransition(0);\r\n        swiper.setTranslate(position);\r\n        swiper.updateProgress();\r\n        swiper.updateActiveIndex();\r\n        swiper.updateSlidesClasses();\r\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\r\n          swiper.updateSlidesClasses();\r\n        }\r\n        if (swiper.params.loop) {\r\n          swiper.loopFix({\r\n            direction: newEvent.direction < 0 ? 'next' : 'prev',\r\n            byMousewheel: true\r\n          });\r\n        }\r\n        if (swiper.params.freeMode.sticky) {\r\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\r\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\r\n          // 1. do all N events have decreasing or same (absolute value) delta?\r\n          // 2. did all N events arrive in the last M (M=500?) msecs?\r\n          // 3. does the earliest event have an (absolute value) delta that's\r\n          //    at least P (P=1?) larger than the most recent event's delta?\r\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\r\n          // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\r\n          // Snap immediately and ignore remaining wheel events in this scroll.\r\n          // See comment above for \"remaining wheel events in this scroll\" determination.\r\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\r\n          clearTimeout(timeout);\r\n          timeout = undefined;\r\n          if (recentWheelEvents.length >= 15) {\r\n            recentWheelEvents.shift(); // only store the last N events\r\n          }\r\n\r\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\r\n          const firstEvent = recentWheelEvents[0];\r\n          recentWheelEvents.push(newEvent);\r\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\r\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\r\n            recentWheelEvents.splice(0);\r\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\r\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\r\n            // to wait for more events. Snap ASAP on the next tick.\r\n            // Also, because there's some remaining momentum we'll bias the snap in the\r\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\r\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\r\n            // if it's already scrolled more than 20% in the current direction, keep going.\r\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\r\n            lastEventBeforeSnap = newEvent;\r\n            recentWheelEvents.splice(0);\r\n            timeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {\r\n              if (swiper.destroyed || !swiper.params) return;\r\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\r\n            }, 0); // no delay; move on next tick\r\n          }\r\n\r\n          if (!timeout) {\r\n            // if we get here, then we haven't detected the end of a momentum scroll, so\r\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\r\n            // for 500ms.\r\n            timeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {\r\n              if (swiper.destroyed || !swiper.params) return;\r\n              const snapToThreshold = 0.5;\r\n              lastEventBeforeSnap = newEvent;\r\n              recentWheelEvents.splice(0);\r\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        // Emit event\r\n        if (!ignoreWheelEvents) emit('scroll', e);\r\n\r\n        // Stop autoplay\r\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop();\r\n        // Return page scroll on edge positions\r\n        if (params.releaseOnEdges && (position === swiper.minTranslate() || position === swiper.maxTranslate())) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\r\n    return false;\r\n  }\r\n  function events(method) {\r\n    let targetEl = swiper.el;\r\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\r\n      targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\r\n    }\r\n    targetEl[method]('mouseenter', handleMouseEnter);\r\n    targetEl[method]('mouseleave', handleMouseLeave);\r\n    targetEl[method]('wheel', handle);\r\n  }\r\n  function enable() {\r\n    if (swiper.params.cssMode) {\r\n      swiper.wrapperEl.removeEventListener('wheel', handle);\r\n      return true;\r\n    }\r\n    if (swiper.mousewheel.enabled) return false;\r\n    events('addEventListener');\r\n    swiper.mousewheel.enabled = true;\r\n    return true;\r\n  }\r\n  function disable() {\r\n    if (swiper.params.cssMode) {\r\n      swiper.wrapperEl.addEventListener(event, handle);\r\n      return true;\r\n    }\r\n    if (!swiper.mousewheel.enabled) return false;\r\n    events('removeEventListener');\r\n    swiper.mousewheel.enabled = false;\r\n    return true;\r\n  }\r\n  on('init', () => {\r\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\r\n      disable();\r\n    }\r\n    if (swiper.params.mousewheel.enabled) enable();\r\n  });\r\n  on('destroy', () => {\r\n    if (swiper.params.cssMode) {\r\n      enable();\r\n    }\r\n    if (swiper.mousewheel.enabled) disable();\r\n  });\r\n  Object.assign(swiper.mousewheel, {\r\n    enable,\r\n    disable\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/mousewheel.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/navigation.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Navigation)\n/* harmony export */ });\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\nfunction Navigation(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  extendParams({\r\n    navigation: {\r\n      nextEl: null,\r\n      prevEl: null,\r\n      hideOnClick: false,\r\n      disabledClass: 'swiper-button-disabled',\r\n      hiddenClass: 'swiper-button-hidden',\r\n      lockClass: 'swiper-button-lock',\r\n      navigationDisabledClass: 'swiper-navigation-disabled'\r\n    }\r\n  });\r\n  swiper.navigation = {\r\n    nextEl: null,\r\n    prevEl: null\r\n  };\r\n  function getEl(el) {\r\n    let res;\r\n    if (el && typeof el === 'string' && swiper.isElement) {\r\n      res = swiper.el.querySelector(el) || swiper.hostEl.querySelector(el);\r\n      if (res) return res;\r\n    }\r\n    if (el) {\r\n      if (typeof el === 'string') res = [...document.querySelectorAll(el)];\r\n      if (swiper.params.uniqueNavElements && typeof el === 'string' && res && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {\r\n        res = swiper.el.querySelector(el);\r\n      } else if (res && res.length === 1) {\r\n        res = res[0];\r\n      }\r\n    }\r\n    if (el && !res) return el;\r\n    // if (Array.isArray(res) && res.length === 1) res = res[0];\r\n    return res;\r\n  }\r\n  function toggleEl(el, disabled) {\r\n    const params = swiper.params.navigation;\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el);\r\n    el.forEach(subEl => {\r\n      if (subEl) {\r\n        subEl.classList[disabled ? 'add' : 'remove'](...params.disabledClass.split(' '));\r\n        if (subEl.tagName === 'BUTTON') subEl.disabled = disabled;\r\n        if (swiper.params.watchOverflow && swiper.enabled) {\r\n          subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  function update() {\r\n    // Update Navigation Buttons\r\n    const {\r\n      nextEl,\r\n      prevEl\r\n    } = swiper.navigation;\r\n    if (swiper.params.loop) {\r\n      toggleEl(prevEl, false);\r\n      toggleEl(nextEl, false);\r\n      return;\r\n    }\r\n    toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);\r\n    toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);\r\n  }\r\n  function onPrevClick(e) {\r\n    e.preventDefault();\r\n    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\r\n    swiper.slidePrev();\r\n    emit('navigationPrev');\r\n  }\r\n  function onNextClick(e) {\r\n    e.preventDefault();\r\n    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\r\n    swiper.slideNext();\r\n    emit('navigationNext');\r\n  }\r\n  function init() {\r\n    const params = swiper.params.navigation;\r\n    swiper.params.navigation = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\r\n      nextEl: 'swiper-button-next',\r\n      prevEl: 'swiper-button-prev'\r\n    });\r\n    if (!(params.nextEl || params.prevEl)) return;\r\n    let nextEl = getEl(params.nextEl);\r\n    let prevEl = getEl(params.prevEl);\r\n    Object.assign(swiper.navigation, {\r\n      nextEl,\r\n      prevEl\r\n    });\r\n    nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\r\n    prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\r\n    const initButton = (el, dir) => {\r\n      if (el) {\r\n        el.addEventListener('click', dir === 'next' ? onNextClick : onPrevClick);\r\n      }\r\n      if (!swiper.enabled && el) {\r\n        el.classList.add(...params.lockClass.split(' '));\r\n      }\r\n    };\r\n    nextEl.forEach(el => initButton(el, 'next'));\r\n    prevEl.forEach(el => initButton(el, 'prev'));\r\n  }\r\n  function destroy() {\r\n    let {\r\n      nextEl,\r\n      prevEl\r\n    } = swiper.navigation;\r\n    nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\r\n    prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\r\n    const destroyButton = (el, dir) => {\r\n      el.removeEventListener('click', dir === 'next' ? onNextClick : onPrevClick);\r\n      el.classList.remove(...swiper.params.navigation.disabledClass.split(' '));\r\n    };\r\n    nextEl.forEach(el => destroyButton(el, 'next'));\r\n    prevEl.forEach(el => destroyButton(el, 'prev'));\r\n  }\r\n  on('init', () => {\r\n    if (swiper.params.navigation.enabled === false) {\r\n      // eslint-disable-next-line\r\n      disable();\r\n    } else {\r\n      init();\r\n      update();\r\n    }\r\n  });\r\n  on('toEdge fromEdge lock unlock', () => {\r\n    update();\r\n  });\r\n  on('destroy', () => {\r\n    destroy();\r\n  });\r\n  on('enable disable', () => {\r\n    let {\r\n      nextEl,\r\n      prevEl\r\n    } = swiper.navigation;\r\n    nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\r\n    prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\r\n    if (swiper.enabled) {\r\n      update();\r\n      return;\r\n    }\r\n    [...nextEl, ...prevEl].filter(el => !!el).forEach(el => el.classList.add(swiper.params.navigation.lockClass));\r\n  });\r\n  on('click', (_s, e) => {\r\n    let {\r\n      nextEl,\r\n      prevEl\r\n    } = swiper.navigation;\r\n    nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\r\n    prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\r\n    const targetEl = e.target;\r\n    let targetIsButton = prevEl.includes(targetEl) || nextEl.includes(targetEl);\r\n    if (swiper.isElement && !targetIsButton) {\r\n      const path = e.path || e.composedPath && e.composedPath();\r\n      if (path) {\r\n        targetIsButton = path.find(pathEl => nextEl.includes(pathEl) || prevEl.includes(pathEl));\r\n      }\r\n    }\r\n    if (swiper.params.navigation.hideOnClick && !targetIsButton) {\r\n      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\r\n      let isHidden;\r\n      if (nextEl.length) {\r\n        isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);\r\n      } else if (prevEl.length) {\r\n        isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);\r\n      }\r\n      if (isHidden === true) {\r\n        emit('navigationShow');\r\n      } else {\r\n        emit('navigationHide');\r\n      }\r\n      [...nextEl, ...prevEl].filter(el => !!el).forEach(el => el.classList.toggle(swiper.params.navigation.hiddenClass));\r\n    }\r\n  });\r\n  const enable = () => {\r\n    swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(' '));\r\n    init();\r\n    update();\r\n  };\r\n  const disable = () => {\r\n    swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(' '));\r\n    destroy();\r\n  };\r\n  Object.assign(swiper.navigation, {\r\n    enable,\r\n    disable,\r\n    update,\r\n    init,\r\n    destroy\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/navigation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/pagination.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/pagination.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Pagination)\n/* harmony export */ });\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\n\r\nfunction Pagination(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  const pfx = 'swiper-pagination';\r\n  extendParams({\r\n    pagination: {\r\n      el: null,\r\n      bulletElement: 'span',\r\n      clickable: false,\r\n      hideOnClick: false,\r\n      renderBullet: null,\r\n      renderProgressbar: null,\r\n      renderFraction: null,\r\n      renderCustom: null,\r\n      progressbarOpposite: false,\r\n      type: 'bullets',\r\n      // 'bullets' or 'progressbar' or 'fraction' or 'custom'\r\n      dynamicBullets: false,\r\n      dynamicMainBullets: 1,\r\n      formatFractionCurrent: number => number,\r\n      formatFractionTotal: number => number,\r\n      bulletClass: `${pfx}-bullet`,\r\n      bulletActiveClass: `${pfx}-bullet-active`,\r\n      modifierClass: `${pfx}-`,\r\n      currentClass: `${pfx}-current`,\r\n      totalClass: `${pfx}-total`,\r\n      hiddenClass: `${pfx}-hidden`,\r\n      progressbarFillClass: `${pfx}-progressbar-fill`,\r\n      progressbarOppositeClass: `${pfx}-progressbar-opposite`,\r\n      clickableClass: `${pfx}-clickable`,\r\n      lockClass: `${pfx}-lock`,\r\n      horizontalClass: `${pfx}-horizontal`,\r\n      verticalClass: `${pfx}-vertical`,\r\n      paginationDisabledClass: `${pfx}-disabled`\r\n    }\r\n  });\r\n  swiper.pagination = {\r\n    el: null,\r\n    bullets: []\r\n  };\r\n  let bulletSize;\r\n  let dynamicBulletIndex = 0;\r\n  function isPaginationDisabled() {\r\n    return !swiper.params.pagination.el || !swiper.pagination.el || Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0;\r\n  }\r\n  function setSideBullets(bulletEl, position) {\r\n    const {\r\n      bulletActiveClass\r\n    } = swiper.params.pagination;\r\n    if (!bulletEl) return;\r\n    bulletEl = bulletEl[`${position === 'prev' ? 'previous' : 'next'}ElementSibling`];\r\n    if (bulletEl) {\r\n      bulletEl.classList.add(`${bulletActiveClass}-${position}`);\r\n      bulletEl = bulletEl[`${position === 'prev' ? 'previous' : 'next'}ElementSibling`];\r\n      if (bulletEl) {\r\n        bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`);\r\n      }\r\n    }\r\n  }\r\n  function getMoveDirection(prevIndex, nextIndex, length) {\r\n    prevIndex = prevIndex % length;\r\n    nextIndex = nextIndex % length;\r\n    if (nextIndex === prevIndex + 1) {\r\n      return 'next';\r\n    } else if (nextIndex === prevIndex - 1) {\r\n      return 'previous';\r\n    }\r\n    return;\r\n  }\r\n  function onBulletClick(e) {\r\n    const bulletEl = e.target.closest((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper.params.pagination.bulletClass));\r\n    if (!bulletEl) {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    const index = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(bulletEl) * swiper.params.slidesPerGroup;\r\n    if (swiper.params.loop) {\r\n      if (swiper.realIndex === index) return;\r\n      const moveDirection = getMoveDirection(swiper.realIndex, index, swiper.slides.length);\r\n      if (moveDirection === 'next') {\r\n        swiper.slideNext();\r\n      } else if (moveDirection === 'previous') {\r\n        swiper.slidePrev();\r\n      } else {\r\n        swiper.slideToLoop(index);\r\n      }\r\n    } else {\r\n      swiper.slideTo(index);\r\n    }\r\n  }\r\n  function update() {\r\n    // Render || Update Pagination bullets/items\r\n    const rtl = swiper.rtl;\r\n    const params = swiper.params.pagination;\r\n    if (isPaginationDisabled()) return;\r\n    let el = swiper.pagination.el;\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    // Current/Total\r\n    let current;\r\n    let previousIndex;\r\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\r\n    const total = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\r\n    if (swiper.params.loop) {\r\n      previousIndex = swiper.previousRealIndex || 0;\r\n      current = swiper.params.slidesPerGroup > 1 ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup) : swiper.realIndex;\r\n    } else if (typeof swiper.snapIndex !== 'undefined') {\r\n      current = swiper.snapIndex;\r\n      previousIndex = swiper.previousSnapIndex;\r\n    } else {\r\n      previousIndex = swiper.previousIndex || 0;\r\n      current = swiper.activeIndex || 0;\r\n    }\r\n    // Types\r\n    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\r\n      const bullets = swiper.pagination.bullets;\r\n      let firstIndex;\r\n      let lastIndex;\r\n      let midIndex;\r\n      if (params.dynamicBullets) {\r\n        bulletSize = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(bullets[0], swiper.isHorizontal() ? 'width' : 'height', true);\r\n        el.forEach(subEl => {\r\n          subEl.style[swiper.isHorizontal() ? 'width' : 'height'] = `${bulletSize * (params.dynamicMainBullets + 4)}px`;\r\n        });\r\n        if (params.dynamicMainBullets > 1 && previousIndex !== undefined) {\r\n          dynamicBulletIndex += current - (previousIndex || 0);\r\n          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\r\n            dynamicBulletIndex = params.dynamicMainBullets - 1;\r\n          } else if (dynamicBulletIndex < 0) {\r\n            dynamicBulletIndex = 0;\r\n          }\r\n        }\r\n        firstIndex = Math.max(current - dynamicBulletIndex, 0);\r\n        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\r\n        midIndex = (lastIndex + firstIndex) / 2;\r\n      }\r\n      bullets.forEach(bulletEl => {\r\n        const classesToRemove = [...['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`)].map(s => typeof s === 'string' && s.includes(' ') ? s.split(' ') : s).flat();\r\n        bulletEl.classList.remove(...classesToRemove);\r\n      });\r\n      if (el.length > 1) {\r\n        bullets.forEach(bullet => {\r\n          const bulletIndex = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.h)(bullet);\r\n          if (bulletIndex === current) {\r\n            bullet.classList.add(...params.bulletActiveClass.split(' '));\r\n          } else if (swiper.isElement) {\r\n            bullet.setAttribute('part', 'bullet');\r\n          }\r\n          if (params.dynamicBullets) {\r\n            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\r\n              bullet.classList.add(...`${params.bulletActiveClass}-main`.split(' '));\r\n            }\r\n            if (bulletIndex === firstIndex) {\r\n              setSideBullets(bullet, 'prev');\r\n            }\r\n            if (bulletIndex === lastIndex) {\r\n              setSideBullets(bullet, 'next');\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        const bullet = bullets[current];\r\n        if (bullet) {\r\n          bullet.classList.add(...params.bulletActiveClass.split(' '));\r\n        }\r\n        if (swiper.isElement) {\r\n          bullets.forEach((bulletEl, bulletIndex) => {\r\n            bulletEl.setAttribute('part', bulletIndex === current ? 'bullet-active' : 'bullet');\r\n          });\r\n        }\r\n        if (params.dynamicBullets) {\r\n          const firstDisplayedBullet = bullets[firstIndex];\r\n          const lastDisplayedBullet = bullets[lastIndex];\r\n          for (let i = firstIndex; i <= lastIndex; i += 1) {\r\n            if (bullets[i]) {\r\n              bullets[i].classList.add(...`${params.bulletActiveClass}-main`.split(' '));\r\n            }\r\n          }\r\n          setSideBullets(firstDisplayedBullet, 'prev');\r\n          setSideBullets(lastDisplayedBullet, 'next');\r\n        }\r\n      }\r\n      if (params.dynamicBullets) {\r\n        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\r\n        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\r\n        const offsetProp = rtl ? 'right' : 'left';\r\n        bullets.forEach(bullet => {\r\n          bullet.style[swiper.isHorizontal() ? offsetProp : 'top'] = `${bulletsOffset}px`;\r\n        });\r\n      }\r\n    }\r\n    el.forEach((subEl, subElIndex) => {\r\n      if (params.type === 'fraction') {\r\n        subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.currentClass)).forEach(fractionEl => {\r\n          fractionEl.textContent = params.formatFractionCurrent(current + 1);\r\n        });\r\n        subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.totalClass)).forEach(totalEl => {\r\n          totalEl.textContent = params.formatFractionTotal(total);\r\n        });\r\n      }\r\n      if (params.type === 'progressbar') {\r\n        let progressbarDirection;\r\n        if (params.progressbarOpposite) {\r\n          progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\r\n        } else {\r\n          progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\r\n        }\r\n        const scale = (current + 1) / total;\r\n        let scaleX = 1;\r\n        let scaleY = 1;\r\n        if (progressbarDirection === 'horizontal') {\r\n          scaleX = scale;\r\n        } else {\r\n          scaleY = scale;\r\n        }\r\n        subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.progressbarFillClass)).forEach(progressEl => {\r\n          progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;\r\n          progressEl.style.transitionDuration = `${swiper.params.speed}ms`;\r\n        });\r\n      }\r\n      if (params.type === 'custom' && params.renderCustom) {\r\n        subEl.innerHTML = params.renderCustom(swiper, current + 1, total);\r\n        if (subElIndex === 0) emit('paginationRender', subEl);\r\n      } else {\r\n        if (subElIndex === 0) emit('paginationRender', subEl);\r\n        emit('paginationUpdate', subEl);\r\n      }\r\n      if (swiper.params.watchOverflow && swiper.enabled) {\r\n        subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);\r\n      }\r\n    });\r\n  }\r\n  function render() {\r\n    // Render Container\r\n    const params = swiper.params.pagination;\r\n    if (isPaginationDisabled()) return;\r\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.grid && swiper.params.grid.rows > 1 ? swiper.slides.length / Math.ceil(swiper.params.grid.rows) : swiper.slides.length;\r\n    let el = swiper.pagination.el;\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    let paginationHTML = '';\r\n    if (params.type === 'bullets') {\r\n      let numberOfBullets = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\r\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled && numberOfBullets > slidesLength) {\r\n        numberOfBullets = slidesLength;\r\n      }\r\n      for (let i = 0; i < numberOfBullets; i += 1) {\r\n        if (params.renderBullet) {\r\n          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\r\n        } else {\r\n          // prettier-ignore\r\n          paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part=\"bullet\"' : ''} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\r\n        }\r\n      }\r\n    }\r\n    if (params.type === 'fraction') {\r\n      if (params.renderFraction) {\r\n        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\r\n      } else {\r\n        paginationHTML = `<span class=\"${params.currentClass}\"></span>` + ' / ' + `<span class=\"${params.totalClass}\"></span>`;\r\n      }\r\n    }\r\n    if (params.type === 'progressbar') {\r\n      if (params.renderProgressbar) {\r\n        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\r\n      } else {\r\n        paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\r\n      }\r\n    }\r\n    swiper.pagination.bullets = [];\r\n    el.forEach(subEl => {\r\n      if (params.type !== 'custom') {\r\n        subEl.innerHTML = paginationHTML || '';\r\n      }\r\n      if (params.type === 'bullets') {\r\n        swiper.pagination.bullets.push(...subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.bulletClass)));\r\n      }\r\n    });\r\n    if (params.type !== 'custom') {\r\n      emit('paginationRender', el[0]);\r\n    }\r\n  }\r\n  function init() {\r\n    swiper.params.pagination = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\r\n      el: 'swiper-pagination'\r\n    });\r\n    const params = swiper.params.pagination;\r\n    if (!params.el) return;\r\n    let el;\r\n    if (typeof params.el === 'string' && swiper.isElement) {\r\n      el = swiper.el.querySelector(params.el);\r\n    }\r\n    if (!el && typeof params.el === 'string') {\r\n      el = [...document.querySelectorAll(params.el)];\r\n    }\r\n    if (!el) {\r\n      el = params.el;\r\n    }\r\n    if (!el || el.length === 0) return;\r\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && Array.isArray(el) && el.length > 1) {\r\n      el = [...swiper.el.querySelectorAll(params.el)];\r\n      // check if it belongs to another nested Swiper\r\n      if (el.length > 1) {\r\n        el = el.filter(subEl => {\r\n          if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(subEl, '.swiper')[0] !== swiper.el) return false;\r\n          return true;\r\n        })[0];\r\n      }\r\n    }\r\n    if (Array.isArray(el) && el.length === 1) el = el[0];\r\n    Object.assign(swiper.pagination, {\r\n      el\r\n    });\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      if (params.type === 'bullets' && params.clickable) {\r\n        subEl.classList.add(...(params.clickableClass || '').split(' '));\r\n      }\r\n      subEl.classList.add(params.modifierClass + params.type);\r\n      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n      if (params.type === 'bullets' && params.dynamicBullets) {\r\n        subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`);\r\n        dynamicBulletIndex = 0;\r\n        if (params.dynamicMainBullets < 1) {\r\n          params.dynamicMainBullets = 1;\r\n        }\r\n      }\r\n      if (params.type === 'progressbar' && params.progressbarOpposite) {\r\n        subEl.classList.add(params.progressbarOppositeClass);\r\n      }\r\n      if (params.clickable) {\r\n        subEl.addEventListener('click', onBulletClick);\r\n      }\r\n      if (!swiper.enabled) {\r\n        subEl.classList.add(params.lockClass);\r\n      }\r\n    });\r\n  }\r\n  function destroy() {\r\n    const params = swiper.params.pagination;\r\n    if (isPaginationDisabled()) return;\r\n    let el = swiper.pagination.el;\r\n    if (el) {\r\n      el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n      el.forEach(subEl => {\r\n        subEl.classList.remove(params.hiddenClass);\r\n        subEl.classList.remove(params.modifierClass + params.type);\r\n        subEl.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n        if (params.clickable) {\r\n          subEl.classList.remove(...(params.clickableClass || '').split(' '));\r\n          subEl.removeEventListener('click', onBulletClick);\r\n        }\r\n      });\r\n    }\r\n    if (swiper.pagination.bullets) swiper.pagination.bullets.forEach(subEl => subEl.classList.remove(...params.bulletActiveClass.split(' ')));\r\n  }\r\n  on('changeDirection', () => {\r\n    if (!swiper.pagination || !swiper.pagination.el) return;\r\n    const params = swiper.params.pagination;\r\n    let {\r\n      el\r\n    } = swiper.pagination;\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.classList.remove(params.horizontalClass, params.verticalClass);\r\n      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n    });\r\n  });\r\n  on('init', () => {\r\n    if (swiper.params.pagination.enabled === false) {\r\n      // eslint-disable-next-line\r\n      disable();\r\n    } else {\r\n      init();\r\n      render();\r\n      update();\r\n    }\r\n  });\r\n  on('activeIndexChange', () => {\r\n    if (typeof swiper.snapIndex === 'undefined') {\r\n      update();\r\n    }\r\n  });\r\n  on('snapIndexChange', () => {\r\n    update();\r\n  });\r\n  on('snapGridLengthChange', () => {\r\n    render();\r\n    update();\r\n  });\r\n  on('destroy', () => {\r\n    destroy();\r\n  });\r\n  on('enable disable', () => {\r\n    let {\r\n      el\r\n    } = swiper.pagination;\r\n    if (el) {\r\n      el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n      el.forEach(subEl => subEl.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.pagination.lockClass));\r\n    }\r\n  });\r\n  on('lock unlock', () => {\r\n    update();\r\n  });\r\n  on('click', (_s, e) => {\r\n    const targetEl = e.target;\r\n    const el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\r\n    if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && el && el.length > 0 && !targetEl.classList.contains(swiper.params.pagination.bulletClass)) {\r\n      if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\r\n      const isHidden = el[0].classList.contains(swiper.params.pagination.hiddenClass);\r\n      if (isHidden === true) {\r\n        emit('paginationShow');\r\n      } else {\r\n        emit('paginationHide');\r\n      }\r\n      el.forEach(subEl => subEl.classList.toggle(swiper.params.pagination.hiddenClass));\r\n    }\r\n  });\r\n  const enable = () => {\r\n    swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);\r\n    let {\r\n      el\r\n    } = swiper.pagination;\r\n    if (el) {\r\n      el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n      el.forEach(subEl => subEl.classList.remove(swiper.params.pagination.paginationDisabledClass));\r\n    }\r\n    init();\r\n    render();\r\n    update();\r\n  };\r\n  const disable = () => {\r\n    swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);\r\n    let {\r\n      el\r\n    } = swiper.pagination;\r\n    if (el) {\r\n      el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\r\n      el.forEach(subEl => subEl.classList.add(swiper.params.pagination.paginationDisabledClass));\r\n    }\r\n    destroy();\r\n  };\r\n  Object.assign(swiper.pagination, {\r\n    enable,\r\n    disable,\r\n    render,\r\n    update,\r\n    init,\r\n    destroy\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/pagination.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/parallax.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/parallax.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Parallax)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\nfunction Parallax(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    parallax: {\r\n      enabled: false\r\n    }\r\n  });\r\n  const elementsSelector = '[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]';\r\n  const setTransform = (el, progress) => {\r\n    const {\r\n      rtl\r\n    } = swiper;\r\n    const rtlFactor = rtl ? -1 : 1;\r\n    const p = el.getAttribute('data-swiper-parallax') || '0';\r\n    let x = el.getAttribute('data-swiper-parallax-x');\r\n    let y = el.getAttribute('data-swiper-parallax-y');\r\n    const scale = el.getAttribute('data-swiper-parallax-scale');\r\n    const opacity = el.getAttribute('data-swiper-parallax-opacity');\r\n    const rotate = el.getAttribute('data-swiper-parallax-rotate');\r\n    if (x || y) {\r\n      x = x || '0';\r\n      y = y || '0';\r\n    } else if (swiper.isHorizontal()) {\r\n      x = p;\r\n      y = '0';\r\n    } else {\r\n      y = p;\r\n      x = '0';\r\n    }\r\n    if (x.indexOf('%') >= 0) {\r\n      x = `${parseInt(x, 10) * progress * rtlFactor}%`;\r\n    } else {\r\n      x = `${x * progress * rtlFactor}px`;\r\n    }\r\n    if (y.indexOf('%') >= 0) {\r\n      y = `${parseInt(y, 10) * progress}%`;\r\n    } else {\r\n      y = `${y * progress}px`;\r\n    }\r\n    if (typeof opacity !== 'undefined' && opacity !== null) {\r\n      const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\r\n      el.style.opacity = currentOpacity;\r\n    }\r\n    let transform = `translate3d(${x}, ${y}, 0px)`;\r\n    if (typeof scale !== 'undefined' && scale !== null) {\r\n      const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\r\n      transform += ` scale(${currentScale})`;\r\n    }\r\n    if (rotate && typeof rotate !== 'undefined' && rotate !== null) {\r\n      const currentRotate = rotate * progress * -1;\r\n      transform += ` rotate(${currentRotate}deg)`;\r\n    }\r\n    el.style.transform = transform;\r\n  };\r\n  const setTranslate = () => {\r\n    const {\r\n      el,\r\n      slides,\r\n      progress,\r\n      snapGrid,\r\n      isElement\r\n    } = swiper;\r\n    const elements = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(el, elementsSelector);\r\n    if (swiper.isElement) {\r\n      elements.push(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(swiper.hostEl, elementsSelector));\r\n    }\r\n    elements.forEach(subEl => {\r\n      setTransform(subEl, progress);\r\n    });\r\n    slides.forEach((slideEl, slideIndex) => {\r\n      let slideProgress = slideEl.progress;\r\n      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {\r\n        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\r\n      }\r\n      slideProgress = Math.min(Math.max(slideProgress, -1), 1);\r\n      slideEl.querySelectorAll(`${elementsSelector}, [data-swiper-parallax-rotate]`).forEach(subEl => {\r\n        setTransform(subEl, slideProgress);\r\n      });\r\n    });\r\n  };\r\n  const setTransition = function (duration) {\r\n    if (duration === void 0) {\r\n      duration = swiper.params.speed;\r\n    }\r\n    const {\r\n      el,\r\n      hostEl\r\n    } = swiper;\r\n    const elements = [...el.querySelectorAll(elementsSelector)];\r\n    if (swiper.isElement) {\r\n      elements.push(...hostEl.querySelectorAll(elementsSelector));\r\n    }\r\n    elements.forEach(parallaxEl => {\r\n      let parallaxDuration = parseInt(parallaxEl.getAttribute('data-swiper-parallax-duration'), 10) || duration;\r\n      if (duration === 0) parallaxDuration = 0;\r\n      parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;\r\n    });\r\n  };\r\n  on('beforeInit', () => {\r\n    if (!swiper.params.parallax.enabled) return;\r\n    swiper.params.watchSlidesProgress = true;\r\n    swiper.originalParams.watchSlidesProgress = true;\r\n  });\r\n  on('init', () => {\r\n    if (!swiper.params.parallax.enabled) return;\r\n    setTranslate();\r\n  });\r\n  on('setTranslate', () => {\r\n    if (!swiper.params.parallax.enabled) return;\r\n    setTranslate();\r\n  });\r\n  on('setTransition', (_swiper, duration) => {\r\n    if (!swiper.params.parallax.enabled) return;\r\n    setTransition(duration);\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFyYWxsYXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx1Q0FBdUM7QUFDcEQsTUFBTTtBQUNOLGFBQWEseUJBQXlCO0FBQ3RDO0FBQ0E7QUFDQSxhQUFhLDJCQUEyQjtBQUN4QyxNQUFNO0FBQ04sYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsRUFBRSxJQUFJLEVBQUU7QUFDM0M7QUFDQTtBQUNBLDZCQUE2QixhQUFhO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixjQUFjO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLHFCQUFxQixvREFBZTtBQUNwQztBQUNBLHVCQUF1QixvREFBZTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQjtBQUNuRDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxpQkFBaUI7QUFDaEUsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUMrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhcmFsbGF4Lm1qcz9iNjg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGUgYXMgZWxlbWVudENoaWxkcmVuIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XHJcblxyXG5mdW5jdGlvbiBQYXJhbGxheChfcmVmKSB7XHJcbiAgbGV0IHtcclxuICAgIHN3aXBlcixcclxuICAgIGV4dGVuZFBhcmFtcyxcclxuICAgIG9uXHJcbiAgfSA9IF9yZWY7XHJcbiAgZXh0ZW5kUGFyYW1zKHtcclxuICAgIHBhcmFsbGF4OiB7XHJcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgY29uc3QgZWxlbWVudHNTZWxlY3RvciA9ICdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJztcclxuICBjb25zdCBzZXRUcmFuc2Zvcm0gPSAoZWwsIHByb2dyZXNzKSA9PiB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHJ0bFxyXG4gICAgfSA9IHN3aXBlcjtcclxuICAgIGNvbnN0IHJ0bEZhY3RvciA9IHJ0bCA/IC0xIDogMTtcclxuICAgIGNvbnN0IHAgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnO1xyXG4gICAgbGV0IHggPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXgnKTtcclxuICAgIGxldCB5ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC15Jyk7XHJcbiAgICBjb25zdCBzY2FsZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGUnKTtcclxuICAgIGNvbnN0IG9wYWNpdHkgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHknKTtcclxuICAgIGNvbnN0IHJvdGF0ZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgtcm90YXRlJyk7XHJcbiAgICBpZiAoeCB8fCB5KSB7XHJcbiAgICAgIHggPSB4IHx8ICcwJztcclxuICAgICAgeSA9IHkgfHwgJzAnO1xyXG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcclxuICAgICAgeCA9IHA7XHJcbiAgICAgIHkgPSAnMCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB5ID0gcDtcclxuICAgICAgeCA9ICcwJztcclxuICAgIH1cclxuICAgIGlmICh4LmluZGV4T2YoJyUnKSA+PSAwKSB7XHJcbiAgICAgIHggPSBgJHtwYXJzZUludCh4LCAxMCkgKiBwcm9ncmVzcyAqIHJ0bEZhY3Rvcn0lYDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHggPSBgJHt4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9cHhgO1xyXG4gICAgfVxyXG4gICAgaWYgKHkuaW5kZXhPZignJScpID49IDApIHtcclxuICAgICAgeSA9IGAke3BhcnNlSW50KHksIDEwKSAqIHByb2dyZXNzfSVgO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgeSA9IGAke3kgKiBwcm9ncmVzc31weGA7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIG9wYWNpdHkgIT09ICd1bmRlZmluZWQnICYmIG9wYWNpdHkgIT09IG51bGwpIHtcclxuICAgICAgY29uc3QgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcclxuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xyXG4gICAgfVxyXG4gICAgbGV0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3h9LCAke3l9LCAwcHgpYDtcclxuICAgIGlmICh0eXBlb2Ygc2NhbGUgIT09ICd1bmRlZmluZWQnICYmIHNjYWxlICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRTY2FsZSA9IHNjYWxlIC0gKHNjYWxlIC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSk7XHJcbiAgICAgIHRyYW5zZm9ybSArPSBgIHNjYWxlKCR7Y3VycmVudFNjYWxlfSlgO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdGF0ZSAmJiB0eXBlb2Ygcm90YXRlICE9PSAndW5kZWZpbmVkJyAmJiByb3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgY29uc3QgY3VycmVudFJvdGF0ZSA9IHJvdGF0ZSAqIHByb2dyZXNzICogLTE7XHJcbiAgICAgIHRyYW5zZm9ybSArPSBgIHJvdGF0ZSgke2N1cnJlbnRSb3RhdGV9ZGVnKWA7XHJcbiAgICB9XHJcbiAgICBlbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XHJcbiAgfTtcclxuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGVsLFxyXG4gICAgICBzbGlkZXMsXHJcbiAgICAgIHByb2dyZXNzLFxyXG4gICAgICBzbmFwR3JpZCxcclxuICAgICAgaXNFbGVtZW50XHJcbiAgICB9ID0gc3dpcGVyO1xyXG4gICAgY29uc3QgZWxlbWVudHMgPSBlbGVtZW50Q2hpbGRyZW4oZWwsIGVsZW1lbnRzU2VsZWN0b3IpO1xyXG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcclxuICAgICAgZWxlbWVudHMucHVzaCguLi5lbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmhvc3RFbCwgZWxlbWVudHNTZWxlY3RvcikpO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudHMuZm9yRWFjaChzdWJFbCA9PiB7XHJcbiAgICAgIHNldFRyYW5zZm9ybShzdWJFbCwgcHJvZ3Jlc3MpO1xyXG4gICAgfSk7XHJcbiAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGVFbCwgc2xpZGVJbmRleCkgPT4ge1xyXG4gICAgICBsZXQgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XHJcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJykge1xyXG4gICAgICAgIHNsaWRlUHJvZ3Jlc3MgKz0gTWF0aC5jZWlsKHNsaWRlSW5kZXggLyAyKSAtIHByb2dyZXNzICogKHNuYXBHcmlkLmxlbmd0aCAtIDEpO1xyXG4gICAgICB9XHJcbiAgICAgIHNsaWRlUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtMSksIDEpO1xyXG4gICAgICBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoYCR7ZWxlbWVudHNTZWxlY3Rvcn0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1yb3RhdGVdYCkuZm9yRWFjaChzdWJFbCA9PiB7XHJcbiAgICAgICAgc2V0VHJhbnNmb3JtKHN1YkVsLCBzbGlkZVByb2dyZXNzKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcclxuICAgIGlmIChkdXJhdGlvbiA9PT0gdm9pZCAwKSB7XHJcbiAgICAgIGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcclxuICAgIH1cclxuICAgIGNvbnN0IHtcclxuICAgICAgZWwsXHJcbiAgICAgIGhvc3RFbFxyXG4gICAgfSA9IHN3aXBlcjtcclxuICAgIGNvbnN0IGVsZW1lbnRzID0gWy4uLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudHNTZWxlY3RvcildO1xyXG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcclxuICAgICAgZWxlbWVudHMucHVzaCguLi5ob3N0RWwucXVlcnlTZWxlY3RvckFsbChlbGVtZW50c1NlbGVjdG9yKSk7XHJcbiAgICB9XHJcbiAgICBlbGVtZW50cy5mb3JFYWNoKHBhcmFsbGF4RWwgPT4ge1xyXG4gICAgICBsZXQgcGFyYWxsYXhEdXJhdGlvbiA9IHBhcnNlSW50KHBhcmFsbGF4RWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvbicpLCAxMCkgfHwgZHVyYXRpb247XHJcbiAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7XHJcbiAgICAgIHBhcmFsbGF4RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7cGFyYWxsYXhEdXJhdGlvbn1tc2A7XHJcbiAgICB9KTtcclxuICB9O1xyXG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xyXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcclxuICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XHJcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XHJcbiAgfSk7XHJcbiAgb24oJ2luaXQnLCAoKSA9PiB7XHJcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xyXG4gICAgc2V0VHJhbnNsYXRlKCk7XHJcbiAgfSk7XHJcbiAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHtcclxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XHJcbiAgICBzZXRUcmFuc2xhdGUoKTtcclxuICB9KTtcclxuICBvbignc2V0VHJhbnNpdGlvbicsIChfc3dpcGVyLCBkdXJhdGlvbikgPT4ge1xyXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcclxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgeyBQYXJhbGxheCBhcyBkZWZhdWx0IH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/parallax.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/scrollbar.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swiper/modules/scrollbar.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Scrollbar)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n\r\n\r\n\r\n\r\n\r\nfunction Scrollbar(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  let isTouched = false;\r\n  let timeout = null;\r\n  let dragTimeout = null;\r\n  let dragStartPos;\r\n  let dragSize;\r\n  let trackSize;\r\n  let divider;\r\n  extendParams({\r\n    scrollbar: {\r\n      el: null,\r\n      dragSize: 'auto',\r\n      hide: false,\r\n      draggable: false,\r\n      snapOnRelease: true,\r\n      lockClass: 'swiper-scrollbar-lock',\r\n      dragClass: 'swiper-scrollbar-drag',\r\n      scrollbarDisabledClass: 'swiper-scrollbar-disabled',\r\n      horizontalClass: `swiper-scrollbar-horizontal`,\r\n      verticalClass: `swiper-scrollbar-vertical`\r\n    }\r\n  });\r\n  swiper.scrollbar = {\r\n    el: null,\r\n    dragEl: null\r\n  };\r\n  function setTranslate() {\r\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n    const {\r\n      scrollbar,\r\n      rtlTranslate: rtl\r\n    } = swiper;\r\n    const {\r\n      dragEl,\r\n      el\r\n    } = scrollbar;\r\n    const params = swiper.params.scrollbar;\r\n    const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\r\n    let newSize = dragSize;\r\n    let newPos = (trackSize - dragSize) * progress;\r\n    if (rtl) {\r\n      newPos = -newPos;\r\n      if (newPos > 0) {\r\n        newSize = dragSize - newPos;\r\n        newPos = 0;\r\n      } else if (-newPos + dragSize > trackSize) {\r\n        newSize = trackSize + newPos;\r\n      }\r\n    } else if (newPos < 0) {\r\n      newSize = dragSize + newPos;\r\n      newPos = 0;\r\n    } else if (newPos + dragSize > trackSize) {\r\n      newSize = trackSize - newPos;\r\n    }\r\n    if (swiper.isHorizontal()) {\r\n      dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\r\n      dragEl.style.width = `${newSize}px`;\r\n    } else {\r\n      dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\r\n      dragEl.style.height = `${newSize}px`;\r\n    }\r\n    if (params.hide) {\r\n      clearTimeout(timeout);\r\n      el.style.opacity = 1;\r\n      timeout = setTimeout(() => {\r\n        el.style.opacity = 0;\r\n        el.style.transitionDuration = '400ms';\r\n      }, 1000);\r\n    }\r\n  }\r\n  function setTransition(duration) {\r\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n    swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\r\n  }\r\n  function updateSize() {\r\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n    const {\r\n      scrollbar\r\n    } = swiper;\r\n    const {\r\n      dragEl,\r\n      el\r\n    } = scrollbar;\r\n    dragEl.style.width = '';\r\n    dragEl.style.height = '';\r\n    trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\r\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\r\n    if (swiper.params.scrollbar.dragSize === 'auto') {\r\n      dragSize = trackSize * divider;\r\n    } else {\r\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\r\n    }\r\n    if (swiper.isHorizontal()) {\r\n      dragEl.style.width = `${dragSize}px`;\r\n    } else {\r\n      dragEl.style.height = `${dragSize}px`;\r\n    }\r\n    if (divider >= 1) {\r\n      el.style.display = 'none';\r\n    } else {\r\n      el.style.display = '';\r\n    }\r\n    if (swiper.params.scrollbar.hide) {\r\n      el.style.opacity = 0;\r\n    }\r\n    if (swiper.params.watchOverflow && swiper.enabled) {\r\n      scrollbar.el.classList[swiper.isLocked ? 'add' : 'remove'](swiper.params.scrollbar.lockClass);\r\n    }\r\n  }\r\n  function getPointerPosition(e) {\r\n    return swiper.isHorizontal() ? e.clientX : e.clientY;\r\n  }\r\n  function setDragPosition(e) {\r\n    const {\r\n      scrollbar,\r\n      rtlTranslate: rtl\r\n    } = swiper;\r\n    const {\r\n      el\r\n    } = scrollbar;\r\n    let positionRatio;\r\n    positionRatio = (getPointerPosition(e) - (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(el)[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\r\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\r\n    if (rtl) {\r\n      positionRatio = 1 - positionRatio;\r\n    }\r\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\r\n    swiper.updateProgress(position);\r\n    swiper.setTranslate(position);\r\n    swiper.updateActiveIndex();\r\n    swiper.updateSlidesClasses();\r\n  }\r\n  function onDragStart(e) {\r\n    const params = swiper.params.scrollbar;\r\n    const {\r\n      scrollbar,\r\n      wrapperEl\r\n    } = swiper;\r\n    const {\r\n      el,\r\n      dragEl\r\n    } = scrollbar;\r\n    isTouched = true;\r\n    dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    wrapperEl.style.transitionDuration = '100ms';\r\n    dragEl.style.transitionDuration = '100ms';\r\n    setDragPosition(e);\r\n    clearTimeout(dragTimeout);\r\n    el.style.transitionDuration = '0ms';\r\n    if (params.hide) {\r\n      el.style.opacity = 1;\r\n    }\r\n    if (swiper.params.cssMode) {\r\n      swiper.wrapperEl.style['scroll-snap-type'] = 'none';\r\n    }\r\n    emit('scrollbarDragStart', e);\r\n  }\r\n  function onDragMove(e) {\r\n    const {\r\n      scrollbar,\r\n      wrapperEl\r\n    } = swiper;\r\n    const {\r\n      el,\r\n      dragEl\r\n    } = scrollbar;\r\n    if (!isTouched) return;\r\n    if (e.preventDefault && e.cancelable) e.preventDefault();else e.returnValue = false;\r\n    setDragPosition(e);\r\n    wrapperEl.style.transitionDuration = '0ms';\r\n    el.style.transitionDuration = '0ms';\r\n    dragEl.style.transitionDuration = '0ms';\r\n    emit('scrollbarDragMove', e);\r\n  }\r\n  function onDragEnd(e) {\r\n    const params = swiper.params.scrollbar;\r\n    const {\r\n      scrollbar,\r\n      wrapperEl\r\n    } = swiper;\r\n    const {\r\n      el\r\n    } = scrollbar;\r\n    if (!isTouched) return;\r\n    isTouched = false;\r\n    if (swiper.params.cssMode) {\r\n      swiper.wrapperEl.style['scroll-snap-type'] = '';\r\n      wrapperEl.style.transitionDuration = '';\r\n    }\r\n    if (params.hide) {\r\n      clearTimeout(dragTimeout);\r\n      dragTimeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {\r\n        el.style.opacity = 0;\r\n        el.style.transitionDuration = '400ms';\r\n      }, 1000);\r\n    }\r\n    emit('scrollbarDragEnd', e);\r\n    if (params.snapOnRelease) {\r\n      swiper.slideToClosest();\r\n    }\r\n  }\r\n  function events(method) {\r\n    const {\r\n      scrollbar,\r\n      params\r\n    } = swiper;\r\n    const el = scrollbar.el;\r\n    if (!el) return;\r\n    const target = el;\r\n    const activeListener = params.passiveListeners ? {\r\n      passive: false,\r\n      capture: false\r\n    } : false;\r\n    const passiveListener = params.passiveListeners ? {\r\n      passive: true,\r\n      capture: false\r\n    } : false;\r\n    if (!target) return;\r\n    const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\r\n    target[eventMethod]('pointerdown', onDragStart, activeListener);\r\n    document[eventMethod]('pointermove', onDragMove, activeListener);\r\n    document[eventMethod]('pointerup', onDragEnd, passiveListener);\r\n  }\r\n  function enableDraggable() {\r\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n    events('on');\r\n  }\r\n  function disableDraggable() {\r\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n    events('off');\r\n  }\r\n  function init() {\r\n    const {\r\n      scrollbar,\r\n      el: swiperEl\r\n    } = swiper;\r\n    swiper.params.scrollbar = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\r\n      el: 'swiper-scrollbar'\r\n    });\r\n    const params = swiper.params.scrollbar;\r\n    if (!params.el) return;\r\n    let el;\r\n    if (typeof params.el === 'string' && swiper.isElement) {\r\n      el = swiper.el.querySelector(params.el);\r\n    }\r\n    if (!el && typeof params.el === 'string') {\r\n      el = document.querySelectorAll(params.el);\r\n      if (!el.length) return;\r\n    } else if (!el) {\r\n      el = params.el;\r\n    }\r\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\r\n      el = swiperEl.querySelector(params.el);\r\n    }\r\n    if (el.length > 0) el = el[0];\r\n    el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n    let dragEl;\r\n    if (el) {\r\n      dragEl = el.querySelector((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(swiper.params.scrollbar.dragClass));\r\n      if (!dragEl) {\r\n        dragEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', swiper.params.scrollbar.dragClass);\r\n        el.append(dragEl);\r\n      }\r\n    }\r\n    Object.assign(scrollbar, {\r\n      el,\r\n      dragEl\r\n    });\r\n    if (params.draggable) {\r\n      enableDraggable();\r\n    }\r\n    if (el) {\r\n      el.classList[swiper.enabled ? 'remove' : 'add'](...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(swiper.params.scrollbar.lockClass));\r\n    }\r\n  }\r\n  function destroy() {\r\n    const params = swiper.params.scrollbar;\r\n    const el = swiper.scrollbar.el;\r\n    if (el) {\r\n      el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass));\r\n    }\r\n    disableDraggable();\r\n  }\r\n  on('changeDirection', () => {\r\n    if (!swiper.scrollbar || !swiper.scrollbar.el) return;\r\n    const params = swiper.params.scrollbar;\r\n    let {\r\n      el\r\n    } = swiper.scrollbar;\r\n    el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el);\r\n    el.forEach(subEl => {\r\n      subEl.classList.remove(params.horizontalClass, params.verticalClass);\r\n      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n    });\r\n  });\r\n  on('init', () => {\r\n    if (swiper.params.scrollbar.enabled === false) {\r\n      // eslint-disable-next-line\r\n      disable();\r\n    } else {\r\n      init();\r\n      updateSize();\r\n      setTranslate();\r\n    }\r\n  });\r\n  on('update resize observerUpdate lock unlock changeDirection', () => {\r\n    updateSize();\r\n  });\r\n  on('setTranslate', () => {\r\n    setTranslate();\r\n  });\r\n  on('setTransition', (_s, duration) => {\r\n    setTransition(duration);\r\n  });\r\n  on('enable disable', () => {\r\n    const {\r\n      el\r\n    } = swiper.scrollbar;\r\n    if (el) {\r\n      el.classList[swiper.enabled ? 'remove' : 'add'](...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(swiper.params.scrollbar.lockClass));\r\n    }\r\n  });\r\n  on('destroy', () => {\r\n    destroy();\r\n  });\r\n  const enable = () => {\r\n    swiper.el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(swiper.params.scrollbar.scrollbarDisabledClass));\r\n    if (swiper.scrollbar.el) {\r\n      swiper.scrollbar.el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(swiper.params.scrollbar.scrollbarDisabledClass));\r\n    }\r\n    init();\r\n    updateSize();\r\n    setTranslate();\r\n  };\r\n  const disable = () => {\r\n    swiper.el.classList.add(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(swiper.params.scrollbar.scrollbarDisabledClass));\r\n    if (swiper.scrollbar.el) {\r\n      swiper.scrollbar.el.classList.add(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(swiper.params.scrollbar.scrollbarDisabledClass));\r\n    }\r\n    destroy();\r\n  };\r\n  Object.assign(swiper.scrollbar, {\r\n    enable,\r\n    disable,\r\n    updateSize,\r\n    setTranslate,\r\n    init,\r\n    destroy\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/scrollbar.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/thumbs.mjs":
/*!************************************************!*\
  !*** ./node_modules/swiper/modules/thumbs.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Thumb)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\nfunction Thumb(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    thumbs: {\r\n      swiper: null,\r\n      multipleActiveThumbs: true,\r\n      autoScrollOffset: 0,\r\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\r\n      thumbsContainerClass: 'swiper-thumbs'\r\n    }\r\n  });\r\n  let initialized = false;\r\n  let swiperCreated = false;\r\n  swiper.thumbs = {\r\n    swiper: null\r\n  };\r\n  function onThumbClick() {\r\n    const thumbsSwiper = swiper.thumbs.swiper;\r\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\r\n    const clickedIndex = thumbsSwiper.clickedIndex;\r\n    const clickedSlide = thumbsSwiper.clickedSlide;\r\n    if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\r\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\r\n    let slideToIndex;\r\n    if (thumbsSwiper.params.loop) {\r\n      slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\r\n    } else {\r\n      slideToIndex = clickedIndex;\r\n    }\r\n    if (swiper.params.loop) {\r\n      swiper.slideToLoop(slideToIndex);\r\n    } else {\r\n      swiper.slideTo(slideToIndex);\r\n    }\r\n  }\r\n  function init() {\r\n    const {\r\n      thumbs: thumbsParams\r\n    } = swiper.params;\r\n    if (initialized) return false;\r\n    initialized = true;\r\n    const SwiperClass = swiper.constructor;\r\n    if (thumbsParams.swiper instanceof SwiperClass) {\r\n      swiper.thumbs.swiper = thumbsParams.swiper;\r\n      Object.assign(swiper.thumbs.swiper.originalParams, {\r\n        watchSlidesProgress: true,\r\n        slideToClickedSlide: false\r\n      });\r\n      Object.assign(swiper.thumbs.swiper.params, {\r\n        watchSlidesProgress: true,\r\n        slideToClickedSlide: false\r\n      });\r\n      swiper.thumbs.swiper.update();\r\n    } else if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.l)(thumbsParams.swiper)) {\r\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\r\n      Object.assign(thumbsSwiperParams, {\r\n        watchSlidesProgress: true,\r\n        slideToClickedSlide: false\r\n      });\r\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\r\n      swiperCreated = true;\r\n    }\r\n    swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\r\n    swiper.thumbs.swiper.on('tap', onThumbClick);\r\n    return true;\r\n  }\r\n  function update(initial) {\r\n    const thumbsSwiper = swiper.thumbs.swiper;\r\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\r\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\r\n\r\n    // Activate thumbs\r\n    let thumbsToActivate = 1;\r\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\r\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\r\n      thumbsToActivate = swiper.params.slidesPerView;\r\n    }\r\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\r\n      thumbsToActivate = 1;\r\n    }\r\n    thumbsToActivate = Math.floor(thumbsToActivate);\r\n    thumbsSwiper.slides.forEach(slideEl => slideEl.classList.remove(thumbActiveClass));\r\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\r\n      for (let i = 0; i < thumbsToActivate; i += 1) {\r\n        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).forEach(slideEl => {\r\n          slideEl.classList.add(thumbActiveClass);\r\n        });\r\n      }\r\n    } else {\r\n      for (let i = 0; i < thumbsToActivate; i += 1) {\r\n        if (thumbsSwiper.slides[swiper.realIndex + i]) {\r\n          thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\r\n        }\r\n      }\r\n    }\r\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\r\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\r\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\r\n      const currentThumbsIndex = thumbsSwiper.activeIndex;\r\n      let newThumbsIndex;\r\n      let direction;\r\n      if (thumbsSwiper.params.loop) {\r\n        const newThumbsSlide = thumbsSwiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') === `${swiper.realIndex}`)[0];\r\n        newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\r\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\r\n      } else {\r\n        newThumbsIndex = swiper.realIndex;\r\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\r\n      }\r\n      if (useOffset) {\r\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\r\n      }\r\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\r\n        if (thumbsSwiper.params.centeredSlides) {\r\n          if (newThumbsIndex > currentThumbsIndex) {\r\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\r\n          } else {\r\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\r\n          }\r\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;\r\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\r\n      }\r\n    }\r\n  }\r\n  on('beforeInit', () => {\r\n    const {\r\n      thumbs\r\n    } = swiper.params;\r\n    if (!thumbs || !thumbs.swiper) return;\r\n    if (typeof thumbs.swiper === 'string' || thumbs.swiper instanceof HTMLElement) {\r\n      const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n      const getThumbsElementAndInit = () => {\r\n        const thumbsElement = typeof thumbs.swiper === 'string' ? document.querySelector(thumbs.swiper) : thumbs.swiper;\r\n        if (thumbsElement && thumbsElement.swiper) {\r\n          thumbs.swiper = thumbsElement.swiper;\r\n          init();\r\n          update(true);\r\n        } else if (thumbsElement) {\r\n          const eventName = `${swiper.params.eventsPrefix}init`;\r\n          const onThumbsSwiper = e => {\r\n            thumbs.swiper = e.detail[0];\r\n            thumbsElement.removeEventListener(eventName, onThumbsSwiper);\r\n            init();\r\n            update(true);\r\n            thumbs.swiper.update();\r\n            swiper.update();\r\n          };\r\n          thumbsElement.addEventListener(eventName, onThumbsSwiper);\r\n        }\r\n        return thumbsElement;\r\n      };\r\n      const watchForThumbsToAppear = () => {\r\n        if (swiper.destroyed) return;\r\n        const thumbsElement = getThumbsElementAndInit();\r\n        if (!thumbsElement) {\r\n          requestAnimationFrame(watchForThumbsToAppear);\r\n        }\r\n      };\r\n      requestAnimationFrame(watchForThumbsToAppear);\r\n    } else {\r\n      init();\r\n      update(true);\r\n    }\r\n  });\r\n  on('slideChange update resize observerUpdate', () => {\r\n    update();\r\n  });\r\n  on('setTransition', (_s, duration) => {\r\n    const thumbsSwiper = swiper.thumbs.swiper;\r\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\r\n    thumbsSwiper.setTransition(duration);\r\n  });\r\n  on('beforeDestroy', () => {\r\n    const thumbsSwiper = swiper.thumbs.swiper;\r\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\r\n    if (swiperCreated) {\r\n      thumbsSwiper.destroy();\r\n    }\r\n  });\r\n  Object.assign(swiper.thumbs, {\r\n    init,\r\n    update\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/thumbs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/virtual.mjs":
/*!*************************************************!*\
  !*** ./node_modules/swiper/modules/virtual.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Virtual)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\nfunction Virtual(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  extendParams({\r\n    virtual: {\r\n      enabled: false,\r\n      slides: [],\r\n      cache: true,\r\n      renderSlide: null,\r\n      renderExternal: null,\r\n      renderExternalUpdate: true,\r\n      addSlidesBefore: 0,\r\n      addSlidesAfter: 0\r\n    }\r\n  });\r\n  let cssModeTimeout;\r\n  const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  swiper.virtual = {\r\n    cache: {},\r\n    from: undefined,\r\n    to: undefined,\r\n    slides: [],\r\n    offset: 0,\r\n    slidesGrid: []\r\n  };\r\n  const tempDOM = document.createElement('div');\r\n  function renderSlide(slide, index) {\r\n    const params = swiper.params.virtual;\r\n    if (params.cache && swiper.virtual.cache[index]) {\r\n      return swiper.virtual.cache[index];\r\n    }\r\n    // eslint-disable-next-line\r\n    let slideEl;\r\n    if (params.renderSlide) {\r\n      slideEl = params.renderSlide.call(swiper, slide, index);\r\n      if (typeof slideEl === 'string') {\r\n        tempDOM.innerHTML = slideEl;\r\n        slideEl = tempDOM.children[0];\r\n      }\r\n    } else if (swiper.isElement) {\r\n      slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('swiper-slide');\r\n    } else {\r\n      slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', swiper.params.slideClass);\r\n    }\r\n    slideEl.setAttribute('data-swiper-slide-index', index);\r\n    if (!params.renderSlide) {\r\n      slideEl.innerHTML = slide;\r\n    }\r\n    if (params.cache) {\r\n      swiper.virtual.cache[index] = slideEl;\r\n    }\r\n    return slideEl;\r\n  }\r\n  function update(force, beforeInit) {\r\n    const {\r\n      slidesPerView,\r\n      slidesPerGroup,\r\n      centeredSlides,\r\n      loop: isLoop,\r\n      initialSlide\r\n    } = swiper.params;\r\n    if (beforeInit && !isLoop && initialSlide > 0) {\r\n      return;\r\n    }\r\n    const {\r\n      addSlidesBefore,\r\n      addSlidesAfter\r\n    } = swiper.params.virtual;\r\n    const {\r\n      from: previousFrom,\r\n      to: previousTo,\r\n      slides,\r\n      slidesGrid: previousSlidesGrid,\r\n      offset: previousOffset\r\n    } = swiper.virtual;\r\n    if (!swiper.params.cssMode) {\r\n      swiper.updateActiveIndex();\r\n    }\r\n    const activeIndex = swiper.activeIndex || 0;\r\n    let offsetProp;\r\n    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';\r\n    let slidesAfter;\r\n    let slidesBefore;\r\n    if (centeredSlides) {\r\n      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\r\n      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\r\n    } else {\r\n      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\r\n      slidesBefore = (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;\r\n    }\r\n    let from = activeIndex - slidesBefore;\r\n    let to = activeIndex + slidesAfter;\r\n    if (!isLoop) {\r\n      from = Math.max(from, 0);\r\n      to = Math.min(to, slides.length - 1);\r\n    }\r\n    let offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\r\n    if (isLoop && activeIndex >= slidesBefore) {\r\n      from -= slidesBefore;\r\n      if (!centeredSlides) offset += swiper.slidesGrid[0];\r\n    } else if (isLoop && activeIndex < slidesBefore) {\r\n      from = -slidesBefore;\r\n      if (centeredSlides) offset += swiper.slidesGrid[0];\r\n    }\r\n    Object.assign(swiper.virtual, {\r\n      from,\r\n      to,\r\n      offset,\r\n      slidesGrid: swiper.slidesGrid,\r\n      slidesBefore,\r\n      slidesAfter\r\n    });\r\n    function onRendered() {\r\n      swiper.updateSlides();\r\n      swiper.updateProgress();\r\n      swiper.updateSlidesClasses();\r\n      emit('virtualUpdate');\r\n    }\r\n    if (previousFrom === from && previousTo === to && !force) {\r\n      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\r\n        swiper.slides.forEach(slideEl => {\r\n          slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\r\n        });\r\n      }\r\n      swiper.updateProgress();\r\n      emit('virtualUpdate');\r\n      return;\r\n    }\r\n    if (swiper.params.virtual.renderExternal) {\r\n      swiper.params.virtual.renderExternal.call(swiper, {\r\n        offset,\r\n        from,\r\n        to,\r\n        slides: function getSlides() {\r\n          const slidesToRender = [];\r\n          for (let i = from; i <= to; i += 1) {\r\n            slidesToRender.push(slides[i]);\r\n          }\r\n          return slidesToRender;\r\n        }()\r\n      });\r\n      if (swiper.params.virtual.renderExternalUpdate) {\r\n        onRendered();\r\n      } else {\r\n        emit('virtualUpdate');\r\n      }\r\n      return;\r\n    }\r\n    const prependIndexes = [];\r\n    const appendIndexes = [];\r\n    const getSlideIndex = index => {\r\n      let slideIndex = index;\r\n      if (index < 0) {\r\n        slideIndex = slides.length + index;\r\n      } else if (slideIndex >= slides.length) {\r\n        // eslint-disable-next-line\r\n        slideIndex = slideIndex - slides.length;\r\n      }\r\n      return slideIndex;\r\n    };\r\n    if (force) {\r\n      swiper.slides.filter(el => el.matches(`.${swiper.params.slideClass}, swiper-slide`)).forEach(slideEl => {\r\n        slideEl.remove();\r\n      });\r\n    } else {\r\n      for (let i = previousFrom; i <= previousTo; i += 1) {\r\n        if (i < from || i > to) {\r\n          const slideIndex = getSlideIndex(i);\r\n          swiper.slides.filter(el => el.matches(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${slideIndex}\"], swiper-slide[data-swiper-slide-index=\"${slideIndex}\"]`)).forEach(slideEl => {\r\n            slideEl.remove();\r\n          });\r\n        }\r\n      }\r\n    }\r\n    const loopFrom = isLoop ? -slides.length : 0;\r\n    const loopTo = isLoop ? slides.length * 2 : slides.length;\r\n    for (let i = loopFrom; i < loopTo; i += 1) {\r\n      if (i >= from && i <= to) {\r\n        const slideIndex = getSlideIndex(i);\r\n        if (typeof previousTo === 'undefined' || force) {\r\n          appendIndexes.push(slideIndex);\r\n        } else {\r\n          if (i > previousTo) appendIndexes.push(slideIndex);\r\n          if (i < previousFrom) prependIndexes.push(slideIndex);\r\n        }\r\n      }\r\n    }\r\n    appendIndexes.forEach(index => {\r\n      swiper.slidesEl.append(renderSlide(slides[index], index));\r\n    });\r\n    if (isLoop) {\r\n      for (let i = prependIndexes.length - 1; i >= 0; i -= 1) {\r\n        const index = prependIndexes[i];\r\n        swiper.slidesEl.prepend(renderSlide(slides[index], index));\r\n      }\r\n    } else {\r\n      prependIndexes.sort((a, b) => b - a);\r\n      prependIndexes.forEach(index => {\r\n        swiper.slidesEl.prepend(renderSlide(slides[index], index));\r\n      });\r\n    }\r\n    (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, '.swiper-slide, swiper-slide').forEach(slideEl => {\r\n      slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\r\n    });\r\n    onRendered();\r\n  }\r\n  function appendSlide(slides) {\r\n    if (typeof slides === 'object' && 'length' in slides) {\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        if (slides[i]) swiper.virtual.slides.push(slides[i]);\r\n      }\r\n    } else {\r\n      swiper.virtual.slides.push(slides);\r\n    }\r\n    update(true);\r\n  }\r\n  function prependSlide(slides) {\r\n    const activeIndex = swiper.activeIndex;\r\n    let newActiveIndex = activeIndex + 1;\r\n    let numberOfNewSlides = 1;\r\n    if (Array.isArray(slides)) {\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\r\n      }\r\n      newActiveIndex = activeIndex + slides.length;\r\n      numberOfNewSlides = slides.length;\r\n    } else {\r\n      swiper.virtual.slides.unshift(slides);\r\n    }\r\n    if (swiper.params.virtual.cache) {\r\n      const cache = swiper.virtual.cache;\r\n      const newCache = {};\r\n      Object.keys(cache).forEach(cachedIndex => {\r\n        const cachedEl = cache[cachedIndex];\r\n        const cachedElIndex = cachedEl.getAttribute('data-swiper-slide-index');\r\n        if (cachedElIndex) {\r\n          cachedEl.setAttribute('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);\r\n        }\r\n        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;\r\n      });\r\n      swiper.virtual.cache = newCache;\r\n    }\r\n    update(true);\r\n    swiper.slideTo(newActiveIndex, 0);\r\n  }\r\n  function removeSlide(slidesIndexes) {\r\n    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;\r\n    let activeIndex = swiper.activeIndex;\r\n    if (Array.isArray(slidesIndexes)) {\r\n      for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\r\n        if (swiper.params.virtual.cache) {\r\n          delete swiper.virtual.cache[slidesIndexes[i]];\r\n          // shift cache indexes\r\n          Object.keys(swiper.virtual.cache).forEach(key => {\r\n            if (key > slidesIndexes) {\r\n              swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\r\n              swiper.virtual.cache[key - 1].setAttribute('data-swiper-slide-index', key - 1);\r\n              delete swiper.virtual.cache[key];\r\n            }\r\n          });\r\n        }\r\n        swiper.virtual.slides.splice(slidesIndexes[i], 1);\r\n        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\r\n        activeIndex = Math.max(activeIndex, 0);\r\n      }\r\n    } else {\r\n      if (swiper.params.virtual.cache) {\r\n        delete swiper.virtual.cache[slidesIndexes];\r\n        // shift cache indexes\r\n        Object.keys(swiper.virtual.cache).forEach(key => {\r\n          if (key > slidesIndexes) {\r\n            swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\r\n            swiper.virtual.cache[key - 1].setAttribute('data-swiper-slide-index', key - 1);\r\n            delete swiper.virtual.cache[key];\r\n          }\r\n        });\r\n      }\r\n      swiper.virtual.slides.splice(slidesIndexes, 1);\r\n      if (slidesIndexes < activeIndex) activeIndex -= 1;\r\n      activeIndex = Math.max(activeIndex, 0);\r\n    }\r\n    update(true);\r\n    swiper.slideTo(activeIndex, 0);\r\n  }\r\n  function removeAllSlides() {\r\n    swiper.virtual.slides = [];\r\n    if (swiper.params.virtual.cache) {\r\n      swiper.virtual.cache = {};\r\n    }\r\n    update(true);\r\n    swiper.slideTo(0, 0);\r\n  }\r\n  on('beforeInit', () => {\r\n    if (!swiper.params.virtual.enabled) return;\r\n    let domSlidesAssigned;\r\n    if (typeof swiper.passedParams.virtual.slides === 'undefined') {\r\n      const slides = [...swiper.slidesEl.children].filter(el => el.matches(`.${swiper.params.slideClass}, swiper-slide`));\r\n      if (slides && slides.length) {\r\n        swiper.virtual.slides = [...slides];\r\n        domSlidesAssigned = true;\r\n        slides.forEach((slideEl, slideIndex) => {\r\n          slideEl.setAttribute('data-swiper-slide-index', slideIndex);\r\n          swiper.virtual.cache[slideIndex] = slideEl;\r\n          slideEl.remove();\r\n        });\r\n      }\r\n    }\r\n    if (!domSlidesAssigned) {\r\n      swiper.virtual.slides = swiper.params.virtual.slides;\r\n    }\r\n    swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\r\n    swiper.params.watchSlidesProgress = true;\r\n    swiper.originalParams.watchSlidesProgress = true;\r\n    update(false, true);\r\n  });\r\n  on('setTranslate', () => {\r\n    if (!swiper.params.virtual.enabled) return;\r\n    if (swiper.params.cssMode && !swiper._immediateVirtual) {\r\n      clearTimeout(cssModeTimeout);\r\n      cssModeTimeout = setTimeout(() => {\r\n        update();\r\n      }, 100);\r\n    } else {\r\n      update();\r\n    }\r\n  });\r\n  on('init update resize', () => {\r\n    if (!swiper.params.virtual.enabled) return;\r\n    if (swiper.params.cssMode) {\r\n      (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);\r\n    }\r\n  });\r\n  Object.assign(swiper.virtual, {\r\n    appendSlide,\r\n    prependSlide,\r\n    removeSlide,\r\n    removeAllSlides,\r\n    update\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/virtual.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/zoom.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/zoom.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Zoom)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\nfunction Zoom(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  extendParams({\r\n    zoom: {\r\n      enabled: false,\r\n      limitToOriginalSize: false,\r\n      maxRatio: 3,\r\n      minRatio: 1,\r\n      toggle: true,\r\n      containerClass: 'swiper-zoom-container',\r\n      zoomedSlideClass: 'swiper-slide-zoomed'\r\n    }\r\n  });\r\n  swiper.zoom = {\r\n    enabled: false\r\n  };\r\n  let currentScale = 1;\r\n  let isScaling = false;\r\n  let fakeGestureTouched;\r\n  let fakeGestureMoved;\r\n  const evCache = [];\r\n  const gesture = {\r\n    originX: 0,\r\n    originY: 0,\r\n    slideEl: undefined,\r\n    slideWidth: undefined,\r\n    slideHeight: undefined,\r\n    imageEl: undefined,\r\n    imageWrapEl: undefined,\r\n    maxRatio: 3\r\n  };\r\n  const image = {\r\n    isTouched: undefined,\r\n    isMoved: undefined,\r\n    currentX: undefined,\r\n    currentY: undefined,\r\n    minX: undefined,\r\n    minY: undefined,\r\n    maxX: undefined,\r\n    maxY: undefined,\r\n    width: undefined,\r\n    height: undefined,\r\n    startX: undefined,\r\n    startY: undefined,\r\n    touchesStart: {},\r\n    touchesCurrent: {}\r\n  };\r\n  const velocity = {\r\n    x: undefined,\r\n    y: undefined,\r\n    prevPositionX: undefined,\r\n    prevPositionY: undefined,\r\n    prevTime: undefined\r\n  };\r\n  let scale = 1;\r\n  Object.defineProperty(swiper.zoom, 'scale', {\r\n    get() {\r\n      return scale;\r\n    },\r\n    set(value) {\r\n      if (scale !== value) {\r\n        const imageEl = gesture.imageEl;\r\n        const slideEl = gesture.slideEl;\r\n        emit('zoomChange', value, imageEl, slideEl);\r\n      }\r\n      scale = value;\r\n    }\r\n  });\r\n  function getDistanceBetweenTouches() {\r\n    if (evCache.length < 2) return 1;\r\n    const x1 = evCache[0].pageX;\r\n    const y1 = evCache[0].pageY;\r\n    const x2 = evCache[1].pageX;\r\n    const y2 = evCache[1].pageY;\r\n    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n    return distance;\r\n  }\r\n  function getMaxRatio() {\r\n    const params = swiper.params.zoom;\r\n    const maxRatio = gesture.imageWrapEl.getAttribute('data-swiper-zoom') || params.maxRatio;\r\n    if (params.limitToOriginalSize && gesture.imageEl && gesture.imageEl.naturalWidth) {\r\n      const imageMaxRatio = gesture.imageEl.naturalWidth / gesture.imageEl.offsetWidth;\r\n      return Math.min(imageMaxRatio, maxRatio);\r\n    }\r\n    return maxRatio;\r\n  }\r\n  function getScaleOrigin() {\r\n    if (evCache.length < 2) return {\r\n      x: null,\r\n      y: null\r\n    };\r\n    const box = gesture.imageEl.getBoundingClientRect();\r\n    return [(evCache[0].pageX + (evCache[1].pageX - evCache[0].pageX) / 2 - box.x - window.scrollX) / currentScale, (evCache[0].pageY + (evCache[1].pageY - evCache[0].pageY) / 2 - box.y - window.scrollY) / currentScale];\r\n  }\r\n  function getSlideSelector() {\r\n    return swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\r\n  }\r\n  function eventWithinSlide(e) {\r\n    const slideSelector = getSlideSelector();\r\n    if (e.target.matches(slideSelector)) return true;\r\n    if (swiper.slides.filter(slideEl => slideEl.contains(e.target)).length > 0) return true;\r\n    return false;\r\n  }\r\n  function eventWithinZoomContainer(e) {\r\n    const selector = `.${swiper.params.zoom.containerClass}`;\r\n    if (e.target.matches(selector)) return true;\r\n    if ([...swiper.hostEl.querySelectorAll(selector)].filter(containerEl => containerEl.contains(e.target)).length > 0) return true;\r\n    return false;\r\n  }\r\n\r\n  // Events\r\n  function onGestureStart(e) {\r\n    if (e.pointerType === 'mouse') {\r\n      evCache.splice(0, evCache.length);\r\n    }\r\n    if (!eventWithinSlide(e)) return;\r\n    const params = swiper.params.zoom;\r\n    fakeGestureTouched = false;\r\n    fakeGestureMoved = false;\r\n    evCache.push(e);\r\n    if (evCache.length < 2) {\r\n      return;\r\n    }\r\n    fakeGestureTouched = true;\r\n    gesture.scaleStart = getDistanceBetweenTouches();\r\n    if (!gesture.slideEl) {\r\n      gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\r\n      if (!gesture.slideEl) gesture.slideEl = swiper.slides[swiper.activeIndex];\r\n      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\r\n      if (imageEl) {\r\n        imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\r\n      }\r\n      gesture.imageEl = imageEl;\r\n      if (imageEl) {\r\n        gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(gesture.imageEl, `.${params.containerClass}`)[0];\r\n      } else {\r\n        gesture.imageWrapEl = undefined;\r\n      }\r\n      if (!gesture.imageWrapEl) {\r\n        gesture.imageEl = undefined;\r\n        return;\r\n      }\r\n      gesture.maxRatio = getMaxRatio();\r\n    }\r\n    if (gesture.imageEl) {\r\n      const [originX, originY] = getScaleOrigin();\r\n      gesture.originX = originX;\r\n      gesture.originY = originY;\r\n      gesture.imageEl.style.transitionDuration = '0ms';\r\n    }\r\n    isScaling = true;\r\n  }\r\n  function onGestureChange(e) {\r\n    if (!eventWithinSlide(e)) return;\r\n    const params = swiper.params.zoom;\r\n    const zoom = swiper.zoom;\r\n    const pointerIndex = evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);\r\n    if (pointerIndex >= 0) evCache[pointerIndex] = e;\r\n    if (evCache.length < 2) {\r\n      return;\r\n    }\r\n    fakeGestureMoved = true;\r\n    gesture.scaleMove = getDistanceBetweenTouches();\r\n    if (!gesture.imageEl) {\r\n      return;\r\n    }\r\n    zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\r\n    if (zoom.scale > gesture.maxRatio) {\r\n      zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\r\n    }\r\n    if (zoom.scale < params.minRatio) {\r\n      zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\r\n    }\r\n    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\r\n  }\r\n  function onGestureEnd(e) {\r\n    if (!eventWithinSlide(e)) return;\r\n    if (e.pointerType === 'mouse' && e.type === 'pointerout') return;\r\n    const params = swiper.params.zoom;\r\n    const zoom = swiper.zoom;\r\n    const pointerIndex = evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);\r\n    if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);\r\n    if (!fakeGestureTouched || !fakeGestureMoved) {\r\n      return;\r\n    }\r\n    fakeGestureTouched = false;\r\n    fakeGestureMoved = false;\r\n    if (!gesture.imageEl) return;\r\n    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\r\n    gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;\r\n    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\r\n    currentScale = zoom.scale;\r\n    isScaling = false;\r\n    if (zoom.scale > 1 && gesture.slideEl) {\r\n      gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\r\n    } else if (zoom.scale <= 1 && gesture.slideEl) {\r\n      gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\r\n    }\r\n    if (zoom.scale === 1) {\r\n      gesture.originX = 0;\r\n      gesture.originY = 0;\r\n      gesture.slideEl = undefined;\r\n    }\r\n  }\r\n  let allowTouchMoveTimeout;\r\n  function allowTouchMove() {\r\n    swiper.touchEventsData.preventTouchMoveFromPointerMove = false;\r\n  }\r\n  function preventTouchMove() {\r\n    clearTimeout(allowTouchMoveTimeout);\r\n    swiper.touchEventsData.preventTouchMoveFromPointerMove = true;\r\n    allowTouchMoveTimeout = setTimeout(() => {\r\n      if (swiper.destroyed) return;\r\n      allowTouchMove();\r\n    });\r\n  }\r\n  function onTouchStart(e) {\r\n    const device = swiper.device;\r\n    if (!gesture.imageEl) return;\r\n    if (image.isTouched) return;\r\n    if (device.android && e.cancelable) e.preventDefault();\r\n    image.isTouched = true;\r\n    const event = evCache.length > 0 ? evCache[0] : e;\r\n    image.touchesStart.x = event.pageX;\r\n    image.touchesStart.y = event.pageY;\r\n  }\r\n  function onTouchMove(e) {\r\n    if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) {\r\n      return;\r\n    }\r\n    const zoom = swiper.zoom;\r\n    if (!gesture.imageEl) {\r\n      return;\r\n    }\r\n    if (!image.isTouched || !gesture.slideEl) {\r\n      return;\r\n    }\r\n    if (!image.isMoved) {\r\n      image.width = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\r\n      image.height = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\r\n      image.startX = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(gesture.imageWrapEl, 'x') || 0;\r\n      image.startY = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(gesture.imageWrapEl, 'y') || 0;\r\n      gesture.slideWidth = gesture.slideEl.offsetWidth;\r\n      gesture.slideHeight = gesture.slideEl.offsetHeight;\r\n      gesture.imageWrapEl.style.transitionDuration = '0ms';\r\n    }\r\n    // Define if we need image drag\r\n    const scaledWidth = image.width * zoom.scale;\r\n    const scaledHeight = image.height * zoom.scale;\r\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\r\n    image.maxX = -image.minX;\r\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\r\n    image.maxY = -image.minY;\r\n    image.touchesCurrent.x = evCache.length > 0 ? evCache[0].pageX : e.pageX;\r\n    image.touchesCurrent.y = evCache.length > 0 ? evCache[0].pageY : e.pageY;\r\n    const touchesDiff = Math.max(Math.abs(image.touchesCurrent.x - image.touchesStart.x), Math.abs(image.touchesCurrent.y - image.touchesStart.y));\r\n    if (touchesDiff > 5) {\r\n      swiper.allowClick = false;\r\n    }\r\n    if (!image.isMoved && !isScaling) {\r\n      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\r\n        image.isTouched = false;\r\n        allowTouchMove();\r\n        return;\r\n      }\r\n      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\r\n        image.isTouched = false;\r\n        allowTouchMove();\r\n        return;\r\n      }\r\n    }\r\n    if (e.cancelable) {\r\n      e.preventDefault();\r\n    }\r\n    e.stopPropagation();\r\n    preventTouchMove();\r\n    image.isMoved = true;\r\n    const scaleRatio = (zoom.scale - currentScale) / (gesture.maxRatio - swiper.params.zoom.minRatio);\r\n    const {\r\n      originX,\r\n      originY\r\n    } = gesture;\r\n    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX + scaleRatio * (image.width - originX * 2);\r\n    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY + scaleRatio * (image.height - originY * 2);\r\n    if (image.currentX < image.minX) {\r\n      image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\r\n    }\r\n    if (image.currentX > image.maxX) {\r\n      image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\r\n    }\r\n    if (image.currentY < image.minY) {\r\n      image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\r\n    }\r\n    if (image.currentY > image.maxY) {\r\n      image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\r\n    }\r\n\r\n    // Velocity\r\n    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\r\n    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\r\n    if (!velocity.prevTime) velocity.prevTime = Date.now();\r\n    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\r\n    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\r\n    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\r\n    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\r\n    velocity.prevPositionX = image.touchesCurrent.x;\r\n    velocity.prevPositionY = image.touchesCurrent.y;\r\n    velocity.prevTime = Date.now();\r\n    gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\r\n  }\r\n  function onTouchEnd() {\r\n    const zoom = swiper.zoom;\r\n    if (!gesture.imageEl) return;\r\n    if (!image.isTouched || !image.isMoved) {\r\n      image.isTouched = false;\r\n      image.isMoved = false;\r\n      return;\r\n    }\r\n    image.isTouched = false;\r\n    image.isMoved = false;\r\n    let momentumDurationX = 300;\r\n    let momentumDurationY = 300;\r\n    const momentumDistanceX = velocity.x * momentumDurationX;\r\n    const newPositionX = image.currentX + momentumDistanceX;\r\n    const momentumDistanceY = velocity.y * momentumDurationY;\r\n    const newPositionY = image.currentY + momentumDistanceY;\r\n\r\n    // Fix duration\r\n    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\r\n    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\r\n    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\r\n    image.currentX = newPositionX;\r\n    image.currentY = newPositionY;\r\n    // Define if we need image drag\r\n    const scaledWidth = image.width * zoom.scale;\r\n    const scaledHeight = image.height * zoom.scale;\r\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\r\n    image.maxX = -image.minX;\r\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\r\n    image.maxY = -image.minY;\r\n    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\r\n    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\r\n    gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;\r\n    gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\r\n  }\r\n  function onTransitionEnd() {\r\n    const zoom = swiper.zoom;\r\n    if (gesture.slideEl && swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)) {\r\n      if (gesture.imageEl) {\r\n        gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';\r\n      }\r\n      if (gesture.imageWrapEl) {\r\n        gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';\r\n      }\r\n      gesture.slideEl.classList.remove(`${swiper.params.zoom.zoomedSlideClass}`);\r\n      zoom.scale = 1;\r\n      currentScale = 1;\r\n      gesture.slideEl = undefined;\r\n      gesture.imageEl = undefined;\r\n      gesture.imageWrapEl = undefined;\r\n      gesture.originX = 0;\r\n      gesture.originY = 0;\r\n    }\r\n  }\r\n  function zoomIn(e) {\r\n    const zoom = swiper.zoom;\r\n    const params = swiper.params.zoom;\r\n    if (!gesture.slideEl) {\r\n      if (e && e.target) {\r\n        gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\r\n      }\r\n      if (!gesture.slideEl) {\r\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\r\n          gesture.slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\r\n        } else {\r\n          gesture.slideEl = swiper.slides[swiper.activeIndex];\r\n        }\r\n      }\r\n      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\r\n      if (imageEl) {\r\n        imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\r\n      }\r\n      gesture.imageEl = imageEl;\r\n      if (imageEl) {\r\n        gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(gesture.imageEl, `.${params.containerClass}`)[0];\r\n      } else {\r\n        gesture.imageWrapEl = undefined;\r\n      }\r\n    }\r\n    if (!gesture.imageEl || !gesture.imageWrapEl) return;\r\n    if (swiper.params.cssMode) {\r\n      swiper.wrapperEl.style.overflow = 'hidden';\r\n      swiper.wrapperEl.style.touchAction = 'none';\r\n    }\r\n    gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\r\n    let touchX;\r\n    let touchY;\r\n    let offsetX;\r\n    let offsetY;\r\n    let diffX;\r\n    let diffY;\r\n    let translateX;\r\n    let translateY;\r\n    let imageWidth;\r\n    let imageHeight;\r\n    let scaledWidth;\r\n    let scaledHeight;\r\n    let translateMinX;\r\n    let translateMinY;\r\n    let translateMaxX;\r\n    let translateMaxY;\r\n    let slideWidth;\r\n    let slideHeight;\r\n    if (typeof image.touchesStart.x === 'undefined' && e) {\r\n      touchX = e.pageX;\r\n      touchY = e.pageY;\r\n    } else {\r\n      touchX = image.touchesStart.x;\r\n      touchY = image.touchesStart.y;\r\n    }\r\n    const forceZoomRatio = typeof e === 'number' ? e : null;\r\n    if (currentScale === 1 && forceZoomRatio) {\r\n      touchX = undefined;\r\n      touchY = undefined;\r\n      image.touchesStart.x = undefined;\r\n      image.touchesStart.y = undefined;\r\n    }\r\n    const maxRatio = getMaxRatio();\r\n    zoom.scale = forceZoomRatio || maxRatio;\r\n    currentScale = forceZoomRatio || maxRatio;\r\n    if (e && !(currentScale === 1 && forceZoomRatio)) {\r\n      slideWidth = gesture.slideEl.offsetWidth;\r\n      slideHeight = gesture.slideEl.offsetHeight;\r\n      offsetX = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(gesture.slideEl).left + window.scrollX;\r\n      offsetY = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(gesture.slideEl).top + window.scrollY;\r\n      diffX = offsetX + slideWidth / 2 - touchX;\r\n      diffY = offsetY + slideHeight / 2 - touchY;\r\n      imageWidth = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\r\n      imageHeight = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\r\n      scaledWidth = imageWidth * zoom.scale;\r\n      scaledHeight = imageHeight * zoom.scale;\r\n      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\r\n      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\r\n      translateMaxX = -translateMinX;\r\n      translateMaxY = -translateMinY;\r\n      translateX = diffX * zoom.scale;\r\n      translateY = diffY * zoom.scale;\r\n      if (translateX < translateMinX) {\r\n        translateX = translateMinX;\r\n      }\r\n      if (translateX > translateMaxX) {\r\n        translateX = translateMaxX;\r\n      }\r\n      if (translateY < translateMinY) {\r\n        translateY = translateMinY;\r\n      }\r\n      if (translateY > translateMaxY) {\r\n        translateY = translateMaxY;\r\n      }\r\n    } else {\r\n      translateX = 0;\r\n      translateY = 0;\r\n    }\r\n    if (forceZoomRatio && zoom.scale === 1) {\r\n      gesture.originX = 0;\r\n      gesture.originY = 0;\r\n    }\r\n    gesture.imageWrapEl.style.transitionDuration = '300ms';\r\n    gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;\r\n    gesture.imageEl.style.transitionDuration = '300ms';\r\n    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\r\n  }\r\n  function zoomOut() {\r\n    const zoom = swiper.zoom;\r\n    const params = swiper.params.zoom;\r\n    if (!gesture.slideEl) {\r\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\r\n        gesture.slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\r\n      } else {\r\n        gesture.slideEl = swiper.slides[swiper.activeIndex];\r\n      }\r\n      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\r\n      if (imageEl) {\r\n        imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\r\n      }\r\n      gesture.imageEl = imageEl;\r\n      if (imageEl) {\r\n        gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(gesture.imageEl, `.${params.containerClass}`)[0];\r\n      } else {\r\n        gesture.imageWrapEl = undefined;\r\n      }\r\n    }\r\n    if (!gesture.imageEl || !gesture.imageWrapEl) return;\r\n    if (swiper.params.cssMode) {\r\n      swiper.wrapperEl.style.overflow = '';\r\n      swiper.wrapperEl.style.touchAction = '';\r\n    }\r\n    zoom.scale = 1;\r\n    currentScale = 1;\r\n    image.touchesStart.x = undefined;\r\n    image.touchesStart.y = undefined;\r\n    gesture.imageWrapEl.style.transitionDuration = '300ms';\r\n    gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';\r\n    gesture.imageEl.style.transitionDuration = '300ms';\r\n    gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';\r\n    gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\r\n    gesture.slideEl = undefined;\r\n    gesture.originX = 0;\r\n    gesture.originY = 0;\r\n  }\r\n\r\n  // Toggle Zoom\r\n  function zoomToggle(e) {\r\n    const zoom = swiper.zoom;\r\n    if (zoom.scale && zoom.scale !== 1) {\r\n      // Zoom Out\r\n      zoomOut();\r\n    } else {\r\n      // Zoom In\r\n      zoomIn(e);\r\n    }\r\n  }\r\n  function getListeners() {\r\n    const passiveListener = swiper.params.passiveListeners ? {\r\n      passive: true,\r\n      capture: false\r\n    } : false;\r\n    const activeListenerWithCapture = swiper.params.passiveListeners ? {\r\n      passive: false,\r\n      capture: true\r\n    } : true;\r\n    return {\r\n      passiveListener,\r\n      activeListenerWithCapture\r\n    };\r\n  }\r\n\r\n  // Attach/Detach Events\r\n  function enable() {\r\n    const zoom = swiper.zoom;\r\n    if (zoom.enabled) return;\r\n    zoom.enabled = true;\r\n    const {\r\n      passiveListener,\r\n      activeListenerWithCapture\r\n    } = getListeners();\r\n\r\n    // Scale image\r\n    swiper.wrapperEl.addEventListener('pointerdown', onGestureStart, passiveListener);\r\n    swiper.wrapperEl.addEventListener('pointermove', onGestureChange, activeListenerWithCapture);\r\n    ['pointerup', 'pointercancel', 'pointerout'].forEach(eventName => {\r\n      swiper.wrapperEl.addEventListener(eventName, onGestureEnd, passiveListener);\r\n    });\r\n\r\n    // Move image\r\n    swiper.wrapperEl.addEventListener('pointermove', onTouchMove, activeListenerWithCapture);\r\n  }\r\n  function disable() {\r\n    const zoom = swiper.zoom;\r\n    if (!zoom.enabled) return;\r\n    zoom.enabled = false;\r\n    const {\r\n      passiveListener,\r\n      activeListenerWithCapture\r\n    } = getListeners();\r\n\r\n    // Scale image\r\n    swiper.wrapperEl.removeEventListener('pointerdown', onGestureStart, passiveListener);\r\n    swiper.wrapperEl.removeEventListener('pointermove', onGestureChange, activeListenerWithCapture);\r\n    ['pointerup', 'pointercancel', 'pointerout'].forEach(eventName => {\r\n      swiper.wrapperEl.removeEventListener(eventName, onGestureEnd, passiveListener);\r\n    });\r\n\r\n    // Move image\r\n    swiper.wrapperEl.removeEventListener('pointermove', onTouchMove, activeListenerWithCapture);\r\n  }\r\n  on('init', () => {\r\n    if (swiper.params.zoom.enabled) {\r\n      enable();\r\n    }\r\n  });\r\n  on('destroy', () => {\r\n    disable();\r\n  });\r\n  on('touchStart', (_s, e) => {\r\n    if (!swiper.zoom.enabled) return;\r\n    onTouchStart(e);\r\n  });\r\n  on('touchEnd', (_s, e) => {\r\n    if (!swiper.zoom.enabled) return;\r\n    onTouchEnd();\r\n  });\r\n  on('doubleTap', (_s, e) => {\r\n    if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\r\n      zoomToggle(e);\r\n    }\r\n  });\r\n  on('transitionEnd', () => {\r\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\r\n      onTransitionEnd();\r\n    }\r\n  });\r\n  on('slideChange', () => {\r\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\r\n      onTransitionEnd();\r\n    }\r\n  });\r\n  Object.assign(swiper.zoom, {\r\n    enable,\r\n    disable,\r\n    in: zoomIn,\r\n    out: zoomOut,\r\n    toggle: zoomToggle\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/zoom.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs":
/*!************************************************************!*\
  !*** ./node_modules/swiper/shared/classes-to-selector.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ classesToSelector)\n/* harmony export */ });\nfunction classesToSelector(classes) {\r\n  if (classes === void 0) {\r\n    classes = '';\r\n  }\r\n  return `.${classes.trim().replace(/([\\.:!+\\/])/g, '\\\\$1') // eslint-disable-line\r\n  .replace(/ /g, '.')}`;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2Isc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzPzBiOWYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3Nlcykge1xyXG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcclxuICAgIGNsYXNzZXMgPSAnJztcclxuICB9XHJcbiAgcmV0dXJuIGAuJHtjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjohK1xcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgLnJlcGxhY2UoLyAvZywgJy4nKX1gO1xyXG59XHJcblxyXG5leHBvcnQgeyBjbGFzc2VzVG9TZWxlY3RvciBhcyBjIH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/create-element-if-not-defined.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createElementIfNotDefined)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\nfunction createElementIfNotDefined(swiper, originalParams, params, checkProps) {\r\n  if (swiper.params.createElements) {\r\n    Object.keys(checkProps).forEach(key => {\r\n      if (!params[key] && params.auto === true) {\r\n        let element = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(swiper.el, `.${checkProps[key]}`)[0];\r\n        if (!element) {\r\n          element = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)('div', checkProps[key]);\r\n          element.className = checkProps[key];\r\n          swiper.el.append(element);\r\n        }\r\n        params[key] = element;\r\n        originalParams[key] = element;\r\n      }\r\n    });\r\n  }\r\n  return params;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2Q0FBZSxnQkFBZ0IsZ0JBQWdCO0FBQ3JFO0FBQ0Esb0JBQW9CLDZDQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUMwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzP2JmZmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIGMgYXMgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4vdXRpbHMubWpzJztcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBvcmlnaW5hbFBhcmFtcywgcGFyYW1zLCBjaGVja1Byb3BzKSB7XHJcbiAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcclxuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5lbCwgYC4ke2NoZWNrUHJvcHNba2V5XX1gKVswXTtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBjaGVja1Byb3BzW2tleV0pO1xyXG4gICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XHJcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XHJcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gcGFyYW1zO1xyXG59XHJcblxyXG5leHBvcnQgeyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIGFzIGMgfTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/create-shadow.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/create-shadow.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createShadow)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\nfunction createShadow(suffix, slideEl, side) {\r\n  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}${suffix ? ` swiper-slide-shadow-${suffix}` : ''}`;\r\n  const shadowContainer = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(slideEl);\r\n  let shadowEl = shadowContainer.querySelector(`.${shadowClass.split(' ').join('.')}`);\r\n  if (!shadowEl) {\r\n    shadowEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)('div', shadowClass.split(' '));\r\n    shadowContainer.append(shadowEl);\r\n  }\r\n  return shadowEl;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtc2hhZG93Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyRTtBQUMzRTtBQUNBO0FBQ0EsNENBQTRDLFdBQVcsS0FBSyxPQUFPLEVBQUUsaUNBQWlDLE9BQU8sT0FBTztBQUNwSCwwQkFBMEIsNkNBQW1CO0FBQzdDLG1EQUFtRCxpQ0FBaUM7QUFDcEY7QUFDQSxlQUFlLDZDQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1zaGFkb3cubWpzP2I0OTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZyBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsLCBjIGFzIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuL3V0aWxzLm1qcyc7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coc3VmZml4LCBzbGlkZUVsLCBzaWRlKSB7XHJcbiAgY29uc3Qgc2hhZG93Q2xhc3MgPSBgc3dpcGVyLXNsaWRlLXNoYWRvdyR7c2lkZSA/IGAtJHtzaWRlfWAgOiAnJ30ke3N1ZmZpeCA/IGAgc3dpcGVyLXNsaWRlLXNoYWRvdy0ke3N1ZmZpeH1gIDogJyd9YDtcclxuICBjb25zdCBzaGFkb3dDb250YWluZXIgPSBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpO1xyXG4gIGxldCBzaGFkb3dFbCA9IHNoYWRvd0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGAuJHtzaGFkb3dDbGFzcy5zcGxpdCgnICcpLmpvaW4oJy4nKX1gKTtcclxuICBpZiAoIXNoYWRvd0VsKSB7XHJcbiAgICBzaGFkb3dFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHNoYWRvd0NsYXNzLnNwbGl0KCcgJykpO1xyXG4gICAgc2hhZG93Q29udGFpbmVyLmFwcGVuZChzaGFkb3dFbCk7XHJcbiAgfVxyXG4gIHJldHVybiBzaGFkb3dFbDtcclxufVxyXG5cclxuZXhwb3J0IHsgY3JlYXRlU2hhZG93IGFzIGMgfTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/create-shadow.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/effect-init.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/shared/effect-init.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectInit)\n/* harmony export */ });\nfunction effectInit(params) {\r\n  const {\r\n    effect,\r\n    swiper,\r\n    on,\r\n    setTranslate,\r\n    setTransition,\r\n    overwriteParams,\r\n    perspective,\r\n    recreateShadows,\r\n    getEffectParams\r\n  } = params;\r\n  on('beforeInit', () => {\r\n    if (swiper.params.effect !== effect) return;\r\n    swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\r\n    if (perspective && perspective()) {\r\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\r\n    }\r\n    const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\r\n    Object.assign(swiper.params, overwriteParamsResult);\r\n    Object.assign(swiper.originalParams, overwriteParamsResult);\r\n  });\r\n  on('setTranslate', () => {\r\n    if (swiper.params.effect !== effect) return;\r\n    setTranslate();\r\n  });\r\n  on('setTransition', (_s, duration) => {\r\n    if (swiper.params.effect !== effect) return;\r\n    setTransition(duration);\r\n  });\r\n  on('transitionEnd', () => {\r\n    if (swiper.params.effect !== effect) return;\r\n    if (recreateShadows) {\r\n      if (!getEffectParams || !getEffectParams().slideShadows) return;\r\n      // remove shadows\r\n      swiper.slides.forEach(slideEl => {\r\n        slideEl.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => shadowEl.remove());\r\n      });\r\n      // create new one\r\n      recreateShadows();\r\n    }\r\n  });\r\n  let requireUpdateOnVirtual;\r\n  on('virtualUpdate', () => {\r\n    if (swiper.params.effect !== effect) return;\r\n    if (!swiper.slides.length) {\r\n      requireUpdateOnVirtual = true;\r\n    }\r\n    requestAnimationFrame(() => {\r\n      if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\r\n        setTranslate();\r\n        requireUpdateOnVirtual = false;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtaW5pdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDhCQUE4QixxQ0FBcUMsRUFBRSxPQUFPO0FBQzVFO0FBQ0EsZ0NBQWdDLHFDQUFxQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQzJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtaW5pdC5tanM/NzNmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlZmZlY3RJbml0KHBhcmFtcykge1xyXG4gIGNvbnN0IHtcclxuICAgIGVmZmVjdCxcclxuICAgIHN3aXBlcixcclxuICAgIG9uLFxyXG4gICAgc2V0VHJhbnNsYXRlLFxyXG4gICAgc2V0VHJhbnNpdGlvbixcclxuICAgIG92ZXJ3cml0ZVBhcmFtcyxcclxuICAgIHBlcnNwZWN0aXZlLFxyXG4gICAgcmVjcmVhdGVTaGFkb3dzLFxyXG4gICAgZ2V0RWZmZWN0UGFyYW1zXHJcbiAgfSA9IHBhcmFtcztcclxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XHJcbiAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2VmZmVjdH1gKTtcclxuICAgIGlmIChwZXJzcGVjdGl2ZSAmJiBwZXJzcGVjdGl2ZSgpKSB7XHJcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQgPSBvdmVyd3JpdGVQYXJhbXMgPyBvdmVyd3JpdGVQYXJhbXMoKSA6IHt9O1xyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7XHJcbiAgfSk7XHJcbiAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHtcclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XHJcbiAgICBzZXRUcmFuc2xhdGUoKTtcclxuICB9KTtcclxuICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHtcclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XHJcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcclxuICB9KTtcclxuICBvbigndHJhbnNpdGlvbkVuZCcsICgpID0+IHtcclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XHJcbiAgICBpZiAocmVjcmVhdGVTaGFkb3dzKSB7XHJcbiAgICAgIGlmICghZ2V0RWZmZWN0UGFyYW1zIHx8ICFnZXRFZmZlY3RQYXJhbXMoKS5zbGlkZVNoYWRvd3MpIHJldHVybjtcclxuICAgICAgLy8gcmVtb3ZlIHNoYWRvd3NcclxuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xyXG4gICAgICAgIHNsaWRlRWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykuZm9yRWFjaChzaGFkb3dFbCA9PiBzaGFkb3dFbC5yZW1vdmUoKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBjcmVhdGUgbmV3IG9uZVxyXG4gICAgICByZWNyZWF0ZVNoYWRvd3MoKTtcclxuICAgIH1cclxuICB9KTtcclxuICBsZXQgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbDtcclxuICBvbigndmlydHVhbFVwZGF0ZScsICgpID0+IHtcclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XHJcbiAgICBpZiAoIXN3aXBlci5zbGlkZXMubGVuZ3RoKSB7XHJcbiAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgaWYgKHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgJiYgc3dpcGVyLnNsaWRlcyAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkge1xyXG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xyXG4gICAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGVmZmVjdEluaXQgYXMgZSB9O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/effect-init.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/effect-target.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/effect-target.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectTarget)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\nfunction effectTarget(effectParams, slideEl) {\r\n  const transformEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(slideEl);\r\n  if (transformEl !== slideEl) {\r\n    transformEl.style.backfaceVisibility = 'hidden';\r\n    transformEl.style['-webkit-backface-visibility'] = 'hidden';\r\n  }\r\n  return transformEl;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtdGFyZ2V0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1RDtBQUN2RDtBQUNBO0FBQ0Esc0JBQXNCLDZDQUFtQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXRhcmdldC5tanM/ZWFlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuL3V0aWxzLm1qcyc7XHJcblxyXG5mdW5jdGlvbiBlZmZlY3RUYXJnZXQoZWZmZWN0UGFyYW1zLCBzbGlkZUVsKSB7XHJcbiAgY29uc3QgdHJhbnNmb3JtRWwgPSBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpO1xyXG4gIGlmICh0cmFuc2Zvcm1FbCAhPT0gc2xpZGVFbCkge1xyXG4gICAgdHJhbnNmb3JtRWwuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICB0cmFuc2Zvcm1FbC5zdHlsZVsnLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5J10gPSAnaGlkZGVuJztcclxuICB9XHJcbiAgcmV0dXJuIHRyYW5zZm9ybUVsO1xyXG59XHJcblxyXG5leHBvcnQgeyBlZmZlY3RUYXJnZXQgYXMgZSB9O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/effect-target.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/effect-virtual-transition-end.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectVirtualTransitionEnd)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\nfunction effectVirtualTransitionEnd(_ref) {\r\n  let {\r\n    swiper,\r\n    duration,\r\n    transformElements,\r\n    allSlides\r\n  } = _ref;\r\n  const {\r\n    activeIndex\r\n  } = swiper;\r\n  const getSlide = el => {\r\n    if (!el.parentElement) {\r\n      // assume shadow root\r\n      const slide = swiper.slides.filter(slideEl => slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode)[0];\r\n      return slide;\r\n    }\r\n    return el.parentElement;\r\n  };\r\n  if (swiper.params.virtualTranslate && duration !== 0) {\r\n    let eventTriggered = false;\r\n    let transitionEndTarget;\r\n    if (allSlides) {\r\n      transitionEndTarget = transformElements;\r\n    } else {\r\n      transitionEndTarget = transformElements.filter(transformEl => {\r\n        const el = transformEl.classList.contains('swiper-slide-transform') ? getSlide(transformEl) : transformEl;\r\n        return swiper.getSlideIndex(el) === activeIndex;\r\n      });\r\n    }\r\n    transitionEndTarget.forEach(el => {\r\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(el, () => {\r\n        if (eventTriggered) return;\r\n        if (!swiper || swiper.destroyed) return;\r\n        eventTriggered = true;\r\n        swiper.animating = false;\r\n        const evt = new window.CustomEvent('transitionend', {\r\n          bubbles: true,\r\n          cancelable: true\r\n        });\r\n        swiper.wrapperEl.dispatchEvent(evt);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE1BQU0sNkNBQW9CO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLm1qcz82YTEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGsgYXMgZWxlbWVudFRyYW5zaXRpb25FbmQgfSBmcm9tICcuL3V0aWxzLm1qcyc7XHJcblxyXG5mdW5jdGlvbiBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZChfcmVmKSB7XHJcbiAgbGV0IHtcclxuICAgIHN3aXBlcixcclxuICAgIGR1cmF0aW9uLFxyXG4gICAgdHJhbnNmb3JtRWxlbWVudHMsXHJcbiAgICBhbGxTbGlkZXNcclxuICB9ID0gX3JlZjtcclxuICBjb25zdCB7XHJcbiAgICBhY3RpdmVJbmRleFxyXG4gIH0gPSBzd2lwZXI7XHJcbiAgY29uc3QgZ2V0U2xpZGUgPSBlbCA9PiB7XHJcbiAgICBpZiAoIWVsLnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgLy8gYXNzdW1lIHNoYWRvdyByb290XHJcbiAgICAgIGNvbnN0IHNsaWRlID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLnNoYWRvd1Jvb3QgJiYgc2xpZGVFbC5zaGFkb3dSb290ID09PSBlbC5wYXJlbnROb2RlKVswXTtcclxuICAgICAgcmV0dXJuIHNsaWRlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVsLnBhcmVudEVsZW1lbnQ7XHJcbiAgfTtcclxuICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XHJcbiAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcclxuICAgIGxldCB0cmFuc2l0aW9uRW5kVGFyZ2V0O1xyXG4gICAgaWYgKGFsbFNsaWRlcykge1xyXG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHMuZmlsdGVyKHRyYW5zZm9ybUVsID0+IHtcclxuICAgICAgICBjb25zdCBlbCA9IHRyYW5zZm9ybUVsLmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpID8gZ2V0U2xpZGUodHJhbnNmb3JtRWwpIDogdHJhbnNmb3JtRWw7XHJcbiAgICAgICAgcmV0dXJuIHN3aXBlci5nZXRTbGlkZUluZGV4KGVsKSA9PT0gYWN0aXZlSW5kZXg7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdHJhbnNpdGlvbkVuZFRhcmdldC5mb3JFYWNoKGVsID0+IHtcclxuICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsICgpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcclxuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XHJcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xyXG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0cmFuc2l0aW9uZW5kJywge1xyXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcclxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBzd2lwZXIud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIGFzIGUgfTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/swiper/shared/ssr-window.esm.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getWindow),\n/* harmony export */   g: () => (/* binding */ getDocument)\n/* harmony export */ });\n/**\r\n * SSR Window 4.0.2\r\n * Better handling for window object in SSR environment\r\n * https://github.com/nolimits4web/ssr-window\r\n *\r\n * Copyright 2021, Vladimir Kharlampidi\r\n *\r\n * Licensed under MIT\r\n *\r\n * Released on: December 13, 2021\r\n */\r\n/* eslint-disable no-param-reassign */\r\nfunction isObject(obj) {\r\n  return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;\r\n}\r\nfunction extend(target, src) {\r\n  if (target === void 0) {\r\n    target = {};\r\n  }\r\n  if (src === void 0) {\r\n    src = {};\r\n  }\r\n  Object.keys(src).forEach(key => {\r\n    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\r\n      extend(target[key], src[key]);\r\n    }\r\n  });\r\n}\r\nconst ssrDocument = {\r\n  body: {},\r\n  addEventListener() {},\r\n  removeEventListener() {},\r\n  activeElement: {\r\n    blur() {},\r\n    nodeName: ''\r\n  },\r\n  querySelector() {\r\n    return null;\r\n  },\r\n  querySelectorAll() {\r\n    return [];\r\n  },\r\n  getElementById() {\r\n    return null;\r\n  },\r\n  createEvent() {\r\n    return {\r\n      initEvent() {}\r\n    };\r\n  },\r\n  createElement() {\r\n    return {\r\n      children: [],\r\n      childNodes: [],\r\n      style: {},\r\n      setAttribute() {},\r\n      getElementsByTagName() {\r\n        return [];\r\n      }\r\n    };\r\n  },\r\n  createElementNS() {\r\n    return {};\r\n  },\r\n  importNode() {\r\n    return null;\r\n  },\r\n  location: {\r\n    hash: '',\r\n    host: '',\r\n    hostname: '',\r\n    href: '',\r\n    origin: '',\r\n    pathname: '',\r\n    protocol: '',\r\n    search: ''\r\n  }\r\n};\r\nfunction getDocument() {\r\n  const doc = typeof document !== 'undefined' ? document : {};\r\n  extend(doc, ssrDocument);\r\n  return doc;\r\n}\r\nconst ssrWindow = {\r\n  document: ssrDocument,\r\n  navigator: {\r\n    userAgent: ''\r\n  },\r\n  location: {\r\n    hash: '',\r\n    host: '',\r\n    hostname: '',\r\n    href: '',\r\n    origin: '',\r\n    pathname: '',\r\n    protocol: '',\r\n    search: ''\r\n  },\r\n  history: {\r\n    replaceState() {},\r\n    pushState() {},\r\n    go() {},\r\n    back() {}\r\n  },\r\n  CustomEvent: function CustomEvent() {\r\n    return this;\r\n  },\r\n  addEventListener() {},\r\n  removeEventListener() {},\r\n  getComputedStyle() {\r\n    return {\r\n      getPropertyValue() {\r\n        return '';\r\n      }\r\n    };\r\n  },\r\n  Image() {},\r\n  Date() {},\r\n  screen: {},\r\n  setTimeout() {},\r\n  clearTimeout() {},\r\n  matchMedia() {\r\n    return {};\r\n  },\r\n  requestAnimationFrame(callback) {\r\n    if (typeof setTimeout === 'undefined') {\r\n      callback();\r\n      return null;\r\n    }\r\n    return setTimeout(callback, 0);\r\n  },\r\n  cancelAnimationFrame(id) {\r\n    if (typeof setTimeout === 'undefined') {\r\n      return;\r\n    }\r\n    clearTimeout(id);\r\n  }\r\n};\r\nfunction getWindow() {\r\n  const win = typeof window !== 'undefined' ? window : {};\r\n  extend(win, ssrWindow);\r\n  return win;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLFVBQVU7QUFDVix1QkFBdUI7QUFDdkIsMEJBQTBCO0FBQzFCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckIsa0JBQWtCO0FBQ2xCLFdBQVc7QUFDWDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNILHVCQUF1QjtBQUN2QiwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILFlBQVk7QUFDWixXQUFXO0FBQ1gsWUFBWTtBQUNaLGlCQUFpQjtBQUNqQixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcz83NWI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBTU1IgV2luZG93IDQuMC4yXHJcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcclxuICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93XHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDIxLCBWbGFkaW1pciBLaGFybGFtcGlkaVxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcclxuICpcclxuICogUmVsZWFzZWQgb246IERlY2VtYmVyIDEzLCAyMDIxXHJcbiAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xyXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcclxuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xyXG59XHJcbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNyYykge1xyXG4gIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xyXG4gICAgdGFyZ2V0ID0ge307XHJcbiAgfVxyXG4gIGlmIChzcmMgPT09IHZvaWQgMCkge1xyXG4gICAgc3JjID0ge307XHJcbiAgfVxyXG4gIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHRhcmdldFtrZXldID0gc3JjW2tleV07ZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xyXG4gICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5jb25zdCBzc3JEb2N1bWVudCA9IHtcclxuICBib2R5OiB7fSxcclxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxyXG4gIGFjdGl2ZUVsZW1lbnQ6IHtcclxuICAgIGJsdXIoKSB7fSxcclxuICAgIG5vZGVOYW1lOiAnJ1xyXG4gIH0sXHJcbiAgcXVlcnlTZWxlY3RvcigpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0sXHJcbiAgcXVlcnlTZWxlY3RvckFsbCgpIHtcclxuICAgIHJldHVybiBbXTtcclxuICB9LFxyXG4gIGdldEVsZW1lbnRCeUlkKCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfSxcclxuICBjcmVhdGVFdmVudCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGluaXRFdmVudCgpIHt9XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgY3JlYXRlRWxlbWVudCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNoaWxkcmVuOiBbXSxcclxuICAgICAgY2hpbGROb2RlczogW10sXHJcbiAgICAgIHN0eWxlOiB7fSxcclxuICAgICAgc2V0QXR0cmlidXRlKCkge30sXHJcbiAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LFxyXG4gIGNyZWF0ZUVsZW1lbnROUygpIHtcclxuICAgIHJldHVybiB7fTtcclxuICB9LFxyXG4gIGltcG9ydE5vZGUoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9LFxyXG4gIGxvY2F0aW9uOiB7XHJcbiAgICBoYXNoOiAnJyxcclxuICAgIGhvc3Q6ICcnLFxyXG4gICAgaG9zdG5hbWU6ICcnLFxyXG4gICAgaHJlZjogJycsXHJcbiAgICBvcmlnaW46ICcnLFxyXG4gICAgcGF0aG5hbWU6ICcnLFxyXG4gICAgcHJvdG9jb2w6ICcnLFxyXG4gICAgc2VhcmNoOiAnJ1xyXG4gIH1cclxufTtcclxuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XHJcbiAgY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XHJcbiAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xyXG4gIHJldHVybiBkb2M7XHJcbn1cclxuY29uc3Qgc3NyV2luZG93ID0ge1xyXG4gIGRvY3VtZW50OiBzc3JEb2N1bWVudCxcclxuICBuYXZpZ2F0b3I6IHtcclxuICAgIHVzZXJBZ2VudDogJydcclxuICB9LFxyXG4gIGxvY2F0aW9uOiB7XHJcbiAgICBoYXNoOiAnJyxcclxuICAgIGhvc3Q6ICcnLFxyXG4gICAgaG9zdG5hbWU6ICcnLFxyXG4gICAgaHJlZjogJycsXHJcbiAgICBvcmlnaW46ICcnLFxyXG4gICAgcGF0aG5hbWU6ICcnLFxyXG4gICAgcHJvdG9jb2w6ICcnLFxyXG4gICAgc2VhcmNoOiAnJ1xyXG4gIH0sXHJcbiAgaGlzdG9yeToge1xyXG4gICAgcmVwbGFjZVN0YXRlKCkge30sXHJcbiAgICBwdXNoU3RhdGUoKSB7fSxcclxuICAgIGdvKCkge30sXHJcbiAgICBiYWNrKCkge31cclxuICB9LFxyXG4gIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH0sXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxyXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcclxuICBnZXRDb21wdXRlZFN0eWxlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfSxcclxuICBJbWFnZSgpIHt9LFxyXG4gIERhdGUoKSB7fSxcclxuICBzY3JlZW46IHt9LFxyXG4gIHNldFRpbWVvdXQoKSB7fSxcclxuICBjbGVhclRpbWVvdXQoKSB7fSxcclxuICBtYXRjaE1lZGlhKCkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH0sXHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XHJcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xyXG4gIH0sXHJcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcclxuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY2xlYXJUaW1lb3V0KGlkKTtcclxuICB9XHJcbn07XHJcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcclxuICBjb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xyXG4gIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XHJcbiAgcmV0dXJuIHdpbjtcclxufVxyXG5cclxuZXhwb3J0IHsgZ2V0V2luZG93IGFzIGEsIGdldERvY3VtZW50IGFzIGcgfTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/swiper-core.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/shared/swiper-core.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ Swiper),\n/* harmony export */   d: () => (/* binding */ defaults)\n/* harmony export */ });\n/* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\r\n\r\n\r\nlet support;\r\nfunction calcSupport() {\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  const document = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  return {\r\n    smoothScroll: document.documentElement && document.documentElement.style && 'scrollBehavior' in document.documentElement.style,\r\n    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch)\r\n  };\r\n}\r\nfunction getSupport() {\r\n  if (!support) {\r\n    support = calcSupport();\r\n  }\r\n  return support;\r\n}\r\n\r\nlet deviceCached;\r\nfunction calcDevice(_temp) {\r\n  let {\r\n    userAgent\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const support = getSupport();\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  const platform = window.navigator.platform;\r\n  const ua = userAgent || window.navigator.userAgent;\r\n  const device = {\r\n    ios: false,\r\n    android: false\r\n  };\r\n  const screenWidth = window.screen.width;\r\n  const screenHeight = window.screen.height;\r\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\r\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\r\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\r\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\r\n  const windows = platform === 'Win32';\r\n  let macos = platform === 'MacIntel';\r\n\r\n  // iPadOs 13 fix\r\n  const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\r\n  if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\r\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\r\n    if (!ipad) ipad = [0, 1, '13_0_0'];\r\n    macos = false;\r\n  }\r\n\r\n  // Android\r\n  if (android && !windows) {\r\n    device.os = 'android';\r\n    device.android = true;\r\n  }\r\n  if (ipad || iphone || ipod) {\r\n    device.os = 'ios';\r\n    device.ios = true;\r\n  }\r\n\r\n  // Export object\r\n  return device;\r\n}\r\nfunction getDevice(overrides) {\r\n  if (overrides === void 0) {\r\n    overrides = {};\r\n  }\r\n  if (!deviceCached) {\r\n    deviceCached = calcDevice(overrides);\r\n  }\r\n  return deviceCached;\r\n}\r\n\r\nlet browser;\r\nfunction calcBrowser() {\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  const device = getDevice();\r\n  let needPerspectiveFix = false;\r\n  function isSafari() {\r\n    const ua = window.navigator.userAgent.toLowerCase();\r\n    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\r\n  }\r\n  if (isSafari()) {\r\n    const ua = String(window.navigator.userAgent);\r\n    if (ua.includes('Version/')) {\r\n      const [major, minor] = ua.split('Version/')[1].split(' ')[0].split('.').map(num => Number(num));\r\n      needPerspectiveFix = major < 16 || major === 16 && minor < 2;\r\n    }\r\n  }\r\n  const isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent);\r\n  const isSafariBrowser = isSafari();\r\n  const need3dFix = isSafariBrowser || isWebView && device.ios;\r\n  return {\r\n    isSafari: needPerspectiveFix || isSafariBrowser,\r\n    needPerspectiveFix,\r\n    need3dFix,\r\n    isWebView\r\n  };\r\n}\r\nfunction getBrowser() {\r\n  if (!browser) {\r\n    browser = calcBrowser();\r\n  }\r\n  return browser;\r\n}\r\n\r\nfunction Resize(_ref) {\r\n  let {\r\n    swiper,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  let observer = null;\r\n  let animationFrame = null;\r\n  const resizeHandler = () => {\r\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\r\n    emit('beforeResize');\r\n    emit('resize');\r\n  };\r\n  const createObserver = () => {\r\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\r\n    observer = new ResizeObserver(entries => {\r\n      animationFrame = window.requestAnimationFrame(() => {\r\n        const {\r\n          width,\r\n          height\r\n        } = swiper;\r\n        let newWidth = width;\r\n        let newHeight = height;\r\n        entries.forEach(_ref2 => {\r\n          let {\r\n            contentBoxSize,\r\n            contentRect,\r\n            target\r\n          } = _ref2;\r\n          if (target && target !== swiper.el) return;\r\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\r\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\r\n        });\r\n        if (newWidth !== width || newHeight !== height) {\r\n          resizeHandler();\r\n        }\r\n      });\r\n    });\r\n    observer.observe(swiper.el);\r\n  };\r\n  const removeObserver = () => {\r\n    if (animationFrame) {\r\n      window.cancelAnimationFrame(animationFrame);\r\n    }\r\n    if (observer && observer.unobserve && swiper.el) {\r\n      observer.unobserve(swiper.el);\r\n      observer = null;\r\n    }\r\n  };\r\n  const orientationChangeHandler = () => {\r\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\r\n    emit('orientationchange');\r\n  };\r\n  on('init', () => {\r\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\r\n      createObserver();\r\n      return;\r\n    }\r\n    window.addEventListener('resize', resizeHandler);\r\n    window.addEventListener('orientationchange', orientationChangeHandler);\r\n  });\r\n  on('destroy', () => {\r\n    removeObserver();\r\n    window.removeEventListener('resize', resizeHandler);\r\n    window.removeEventListener('orientationchange', orientationChangeHandler);\r\n  });\r\n}\r\n\r\nfunction Observer(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  const observers = [];\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  const attach = function (target, options) {\r\n    if (options === void 0) {\r\n      options = {};\r\n    }\r\n    const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\r\n    const observer = new ObserverFunc(mutations => {\r\n      // The observerUpdate event should only be triggered\r\n      // once despite the number of mutations.  Additional\r\n      // triggers are redundant and are very costly\r\n      if (swiper.__preventObserver__) return;\r\n      if (mutations.length === 1) {\r\n        emit('observerUpdate', mutations[0]);\r\n        return;\r\n      }\r\n      const observerUpdate = function observerUpdate() {\r\n        emit('observerUpdate', mutations[0]);\r\n      };\r\n      if (window.requestAnimationFrame) {\r\n        window.requestAnimationFrame(observerUpdate);\r\n      } else {\r\n        window.setTimeout(observerUpdate, 0);\r\n      }\r\n    });\r\n    observer.observe(target, {\r\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\r\n      childList: swiper.isElement || (typeof options.childList === 'undefined' ? true : options).childList,\r\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData\r\n    });\r\n    observers.push(observer);\r\n  };\r\n  const init = () => {\r\n    if (!swiper.params.observer) return;\r\n    if (swiper.params.observeParents) {\r\n      const containerParents = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(swiper.hostEl);\r\n      for (let i = 0; i < containerParents.length; i += 1) {\r\n        attach(containerParents[i]);\r\n      }\r\n    }\r\n    // Observe container\r\n    attach(swiper.hostEl, {\r\n      childList: swiper.params.observeSlideChildren\r\n    });\r\n\r\n    // Observe wrapper\r\n    attach(swiper.wrapperEl, {\r\n      attributes: false\r\n    });\r\n  };\r\n  const destroy = () => {\r\n    observers.forEach(observer => {\r\n      observer.disconnect();\r\n    });\r\n    observers.splice(0, observers.length);\r\n  };\r\n  extendParams({\r\n    observer: false,\r\n    observeParents: false,\r\n    observeSlideChildren: false\r\n  });\r\n  on('init', init);\r\n  on('destroy', destroy);\r\n}\r\n\r\n/* eslint-disable no-underscore-dangle */\r\n\r\nvar eventsEmitter = {\r\n  on(events, handler, priority) {\r\n    const self = this;\r\n    if (!self.eventsListeners || self.destroyed) return self;\r\n    if (typeof handler !== 'function') return self;\r\n    const method = priority ? 'unshift' : 'push';\r\n    events.split(' ').forEach(event => {\r\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\r\n      self.eventsListeners[event][method](handler);\r\n    });\r\n    return self;\r\n  },\r\n  once(events, handler, priority) {\r\n    const self = this;\r\n    if (!self.eventsListeners || self.destroyed) return self;\r\n    if (typeof handler !== 'function') return self;\r\n    function onceHandler() {\r\n      self.off(events, onceHandler);\r\n      if (onceHandler.__emitterProxy) {\r\n        delete onceHandler.__emitterProxy;\r\n      }\r\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n        args[_key] = arguments[_key];\r\n      }\r\n      handler.apply(self, args);\r\n    }\r\n    onceHandler.__emitterProxy = handler;\r\n    return self.on(events, onceHandler, priority);\r\n  },\r\n  onAny(handler, priority) {\r\n    const self = this;\r\n    if (!self.eventsListeners || self.destroyed) return self;\r\n    if (typeof handler !== 'function') return self;\r\n    const method = priority ? 'unshift' : 'push';\r\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\r\n      self.eventsAnyListeners[method](handler);\r\n    }\r\n    return self;\r\n  },\r\n  offAny(handler) {\r\n    const self = this;\r\n    if (!self.eventsListeners || self.destroyed) return self;\r\n    if (!self.eventsAnyListeners) return self;\r\n    const index = self.eventsAnyListeners.indexOf(handler);\r\n    if (index >= 0) {\r\n      self.eventsAnyListeners.splice(index, 1);\r\n    }\r\n    return self;\r\n  },\r\n  off(events, handler) {\r\n    const self = this;\r\n    if (!self.eventsListeners || self.destroyed) return self;\r\n    if (!self.eventsListeners) return self;\r\n    events.split(' ').forEach(event => {\r\n      if (typeof handler === 'undefined') {\r\n        self.eventsListeners[event] = [];\r\n      } else if (self.eventsListeners[event]) {\r\n        self.eventsListeners[event].forEach((eventHandler, index) => {\r\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\r\n            self.eventsListeners[event].splice(index, 1);\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return self;\r\n  },\r\n  emit() {\r\n    const self = this;\r\n    if (!self.eventsListeners || self.destroyed) return self;\r\n    if (!self.eventsListeners) return self;\r\n    let events;\r\n    let data;\r\n    let context;\r\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n      args[_key2] = arguments[_key2];\r\n    }\r\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\r\n      events = args[0];\r\n      data = args.slice(1, args.length);\r\n      context = self;\r\n    } else {\r\n      events = args[0].events;\r\n      data = args[0].data;\r\n      context = args[0].context || self;\r\n    }\r\n    data.unshift(context);\r\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\r\n    eventsArray.forEach(event => {\r\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\r\n        self.eventsAnyListeners.forEach(eventHandler => {\r\n          eventHandler.apply(context, [event, ...data]);\r\n        });\r\n      }\r\n      if (self.eventsListeners && self.eventsListeners[event]) {\r\n        self.eventsListeners[event].forEach(eventHandler => {\r\n          eventHandler.apply(context, data);\r\n        });\r\n      }\r\n    });\r\n    return self;\r\n  }\r\n};\r\n\r\nfunction updateSize() {\r\n  const swiper = this;\r\n  let width;\r\n  let height;\r\n  const el = swiper.el;\r\n  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\r\n    width = swiper.params.width;\r\n  } else {\r\n    width = el.clientWidth;\r\n  }\r\n  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\r\n    height = swiper.params.height;\r\n  } else {\r\n    height = el.clientHeight;\r\n  }\r\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\r\n    return;\r\n  }\r\n\r\n  // Subtract paddings\r\n  width = width - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(el, 'padding-left') || 0, 10) - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(el, 'padding-right') || 0, 10);\r\n  height = height - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(el, 'padding-top') || 0, 10) - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(el, 'padding-bottom') || 0, 10);\r\n  if (Number.isNaN(width)) width = 0;\r\n  if (Number.isNaN(height)) height = 0;\r\n  Object.assign(swiper, {\r\n    width,\r\n    height,\r\n    size: swiper.isHorizontal() ? width : height\r\n  });\r\n}\r\n\r\nfunction updateSlides() {\r\n  const swiper = this;\r\n  function getDirectionPropertyValue(node, label) {\r\n    return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);\r\n  }\r\n  const params = swiper.params;\r\n  const {\r\n    wrapperEl,\r\n    slidesEl,\r\n    size: swiperSize,\r\n    rtlTranslate: rtl,\r\n    wrongRTL\r\n  } = swiper;\r\n  const isVirtual = swiper.virtual && params.virtual.enabled;\r\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\r\n  const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${swiper.params.slideClass}, swiper-slide`);\r\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\r\n  let snapGrid = [];\r\n  const slidesGrid = [];\r\n  const slidesSizesGrid = [];\r\n  let offsetBefore = params.slidesOffsetBefore;\r\n  if (typeof offsetBefore === 'function') {\r\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\r\n  }\r\n  let offsetAfter = params.slidesOffsetAfter;\r\n  if (typeof offsetAfter === 'function') {\r\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\r\n  }\r\n  const previousSnapGridLength = swiper.snapGrid.length;\r\n  const previousSlidesGridLength = swiper.slidesGrid.length;\r\n  let spaceBetween = params.spaceBetween;\r\n  let slidePosition = -offsetBefore;\r\n  let prevSlideSize = 0;\r\n  let index = 0;\r\n  if (typeof swiperSize === 'undefined') {\r\n    return;\r\n  }\r\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\r\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\r\n  } else if (typeof spaceBetween === 'string') {\r\n    spaceBetween = parseFloat(spaceBetween);\r\n  }\r\n  swiper.virtualSize = -spaceBetween;\r\n\r\n  // reset margins\r\n  slides.forEach(slideEl => {\r\n    if (rtl) {\r\n      slideEl.style.marginLeft = '';\r\n    } else {\r\n      slideEl.style.marginRight = '';\r\n    }\r\n    slideEl.style.marginBottom = '';\r\n    slideEl.style.marginTop = '';\r\n  });\r\n\r\n  // reset cssMode offsets\r\n  if (params.centeredSlides && params.cssMode) {\r\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(wrapperEl, '--swiper-centered-offset-before', '');\r\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(wrapperEl, '--swiper-centered-offset-after', '');\r\n  }\r\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\r\n  if (gridEnabled) {\r\n    swiper.grid.initSlides(slides);\r\n  } else if (swiper.grid) {\r\n    swiper.grid.unsetSlides();\r\n  }\r\n\r\n  // Calc slides\r\n  let slideSize;\r\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\r\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\r\n  }).length > 0;\r\n  for (let i = 0; i < slidesLength; i += 1) {\r\n    slideSize = 0;\r\n    let slide;\r\n    if (slides[i]) slide = slides[i];\r\n    if (gridEnabled) {\r\n      swiper.grid.updateSlide(i, slide, slides);\r\n    }\r\n    if (slides[i] && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(slide, 'display') === 'none') continue; // eslint-disable-line\r\n\r\n    if (params.slidesPerView === 'auto') {\r\n      if (shouldResetSlideSize) {\r\n        slides[i].style[swiper.getDirectionLabel('width')] = ``;\r\n      }\r\n      const slideStyles = getComputedStyle(slide);\r\n      const currentTransform = slide.style.transform;\r\n      const currentWebKitTransform = slide.style.webkitTransform;\r\n      if (currentTransform) {\r\n        slide.style.transform = 'none';\r\n      }\r\n      if (currentWebKitTransform) {\r\n        slide.style.webkitTransform = 'none';\r\n      }\r\n      if (params.roundLengths) {\r\n        slideSize = swiper.isHorizontal() ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(slide, 'width', true) : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(slide, 'height', true);\r\n      } else {\r\n        // eslint-disable-next-line\r\n        const width = getDirectionPropertyValue(slideStyles, 'width');\r\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\r\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\r\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\r\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\r\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\r\n        if (boxSizing && boxSizing === 'border-box') {\r\n          slideSize = width + marginLeft + marginRight;\r\n        } else {\r\n          const {\r\n            clientWidth,\r\n            offsetWidth\r\n          } = slide;\r\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\r\n        }\r\n      }\r\n      if (currentTransform) {\r\n        slide.style.transform = currentTransform;\r\n      }\r\n      if (currentWebKitTransform) {\r\n        slide.style.webkitTransform = currentWebKitTransform;\r\n      }\r\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\r\n    } else {\r\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\r\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\r\n      if (slides[i]) {\r\n        slides[i].style[swiper.getDirectionLabel('width')] = `${slideSize}px`;\r\n      }\r\n    }\r\n    if (slides[i]) {\r\n      slides[i].swiperSlideSize = slideSize;\r\n    }\r\n    slidesSizesGrid.push(slideSize);\r\n    if (params.centeredSlides) {\r\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\r\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\r\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\r\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\r\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\r\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\r\n      slidesGrid.push(slidePosition);\r\n    } else {\r\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\r\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\r\n      slidesGrid.push(slidePosition);\r\n      slidePosition = slidePosition + slideSize + spaceBetween;\r\n    }\r\n    swiper.virtualSize += slideSize + spaceBetween;\r\n    prevSlideSize = slideSize;\r\n    index += 1;\r\n  }\r\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\r\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\r\n    wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;\r\n  }\r\n  if (params.setWrapperSize) {\r\n    wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\r\n  }\r\n  if (gridEnabled) {\r\n    swiper.grid.updateWrapperSize(slideSize, snapGrid);\r\n  }\r\n\r\n  // Remove last grid elements depending on width\r\n  if (!params.centeredSlides) {\r\n    const newSlidesGrid = [];\r\n    for (let i = 0; i < snapGrid.length; i += 1) {\r\n      let slidesGridItem = snapGrid[i];\r\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\r\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\r\n        newSlidesGrid.push(slidesGridItem);\r\n      }\r\n    }\r\n    snapGrid = newSlidesGrid;\r\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\r\n      snapGrid.push(swiper.virtualSize - swiperSize);\r\n    }\r\n  }\r\n  if (isVirtual && params.loop) {\r\n    const size = slidesSizesGrid[0] + spaceBetween;\r\n    if (params.slidesPerGroup > 1) {\r\n      const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);\r\n      const groupSize = size * params.slidesPerGroup;\r\n      for (let i = 0; i < groups; i += 1) {\r\n        snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);\r\n      }\r\n    }\r\n    for (let i = 0; i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i += 1) {\r\n      if (params.slidesPerGroup === 1) {\r\n        snapGrid.push(snapGrid[snapGrid.length - 1] + size);\r\n      }\r\n      slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);\r\n      swiper.virtualSize += size;\r\n    }\r\n  }\r\n  if (snapGrid.length === 0) snapGrid = [0];\r\n  if (spaceBetween !== 0) {\r\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : swiper.getDirectionLabel('marginRight');\r\n    slides.filter((_, slideIndex) => {\r\n      if (!params.cssMode || params.loop) return true;\r\n      if (slideIndex === slides.length - 1) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }).forEach(slideEl => {\r\n      slideEl.style[key] = `${spaceBetween}px`;\r\n    });\r\n  }\r\n  if (params.centeredSlides && params.centeredSlidesBounds) {\r\n    let allSlidesSize = 0;\r\n    slidesSizesGrid.forEach(slideSizeValue => {\r\n      allSlidesSize += slideSizeValue + (spaceBetween || 0);\r\n    });\r\n    allSlidesSize -= spaceBetween;\r\n    const maxSnap = allSlidesSize > swiperSize ? allSlidesSize - swiperSize : 0;\r\n    snapGrid = snapGrid.map(snap => {\r\n      if (snap <= 0) return -offsetBefore;\r\n      if (snap > maxSnap) return maxSnap + offsetAfter;\r\n      return snap;\r\n    });\r\n  }\r\n  if (params.centerInsufficientSlides) {\r\n    let allSlidesSize = 0;\r\n    slidesSizesGrid.forEach(slideSizeValue => {\r\n      allSlidesSize += slideSizeValue + (spaceBetween || 0);\r\n    });\r\n    allSlidesSize -= spaceBetween;\r\n    const offsetSize = (params.slidesOffsetBefore || 0) + (params.slidesOffsetAfter || 0);\r\n    if (allSlidesSize + offsetSize < swiperSize) {\r\n      const allSlidesOffset = (swiperSize - allSlidesSize - offsetSize) / 2;\r\n      snapGrid.forEach((snap, snapIndex) => {\r\n        snapGrid[snapIndex] = snap - allSlidesOffset;\r\n      });\r\n      slidesGrid.forEach((snap, snapIndex) => {\r\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\r\n      });\r\n    }\r\n  }\r\n  Object.assign(swiper, {\r\n    slides,\r\n    snapGrid,\r\n    slidesGrid,\r\n    slidesSizesGrid\r\n  });\r\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\r\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\r\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\r\n    const addToSnapGrid = -swiper.snapGrid[0];\r\n    const addToSlidesGrid = -swiper.slidesGrid[0];\r\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\r\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\r\n  }\r\n  if (slidesLength !== previousSlidesLength) {\r\n    swiper.emit('slidesLengthChange');\r\n  }\r\n  if (snapGrid.length !== previousSnapGridLength) {\r\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\r\n    swiper.emit('snapGridLengthChange');\r\n  }\r\n  if (slidesGrid.length !== previousSlidesGridLength) {\r\n    swiper.emit('slidesGridLengthChange');\r\n  }\r\n  if (params.watchSlidesProgress) {\r\n    swiper.updateSlidesOffset();\r\n  }\r\n  swiper.emit('slidesUpdated');\r\n  if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\r\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\r\n    const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);\r\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\r\n      if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);\r\n    } else if (hasClassBackfaceClassAdded) {\r\n      swiper.el.classList.remove(backFaceHiddenClass);\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateAutoHeight(speed) {\r\n  const swiper = this;\r\n  const activeSlides = [];\r\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\r\n  let newHeight = 0;\r\n  let i;\r\n  if (typeof speed === 'number') {\r\n    swiper.setTransition(speed);\r\n  } else if (speed === true) {\r\n    swiper.setTransition(swiper.params.speed);\r\n  }\r\n  const getSlideByIndex = index => {\r\n    if (isVirtual) {\r\n      return swiper.slides[swiper.getSlideIndexByData(index)];\r\n    }\r\n    return swiper.slides[index];\r\n  };\r\n  // Find slides currently in view\r\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\r\n    if (swiper.params.centeredSlides) {\r\n      (swiper.visibleSlides || []).forEach(slide => {\r\n        activeSlides.push(slide);\r\n      });\r\n    } else {\r\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\r\n        const index = swiper.activeIndex + i;\r\n        if (index > swiper.slides.length && !isVirtual) break;\r\n        activeSlides.push(getSlideByIndex(index));\r\n      }\r\n    }\r\n  } else {\r\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\r\n  }\r\n\r\n  // Find new height from highest slide in view\r\n  for (i = 0; i < activeSlides.length; i += 1) {\r\n    if (typeof activeSlides[i] !== 'undefined') {\r\n      const height = activeSlides[i].offsetHeight;\r\n      newHeight = height > newHeight ? height : newHeight;\r\n    }\r\n  }\r\n\r\n  // Update Height\r\n  if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;\r\n}\r\n\r\nfunction updateSlidesOffset() {\r\n  const swiper = this;\r\n  const slides = swiper.slides;\r\n  // eslint-disable-next-line\r\n  const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;\r\n  for (let i = 0; i < slides.length; i += 1) {\r\n    slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();\r\n  }\r\n}\r\n\r\nconst toggleSlideClasses$1 = (slideEl, condition, className) => {\r\n  if (condition && !slideEl.classList.contains(className)) {\r\n    slideEl.classList.add(className);\r\n  } else if (!condition && slideEl.classList.contains(className)) {\r\n    slideEl.classList.remove(className);\r\n  }\r\n};\r\nfunction updateSlidesProgress(translate) {\r\n  if (translate === void 0) {\r\n    translate = this && this.translate || 0;\r\n  }\r\n  const swiper = this;\r\n  const params = swiper.params;\r\n  const {\r\n    slides,\r\n    rtlTranslate: rtl,\r\n    snapGrid\r\n  } = swiper;\r\n  if (slides.length === 0) return;\r\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\r\n  let offsetCenter = -translate;\r\n  if (rtl) offsetCenter = translate;\r\n  swiper.visibleSlidesIndexes = [];\r\n  swiper.visibleSlides = [];\r\n  let spaceBetween = params.spaceBetween;\r\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\r\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\r\n  } else if (typeof spaceBetween === 'string') {\r\n    spaceBetween = parseFloat(spaceBetween);\r\n  }\r\n  for (let i = 0; i < slides.length; i += 1) {\r\n    const slide = slides[i];\r\n    let slideOffset = slide.swiperSlideOffset;\r\n    if (params.cssMode && params.centeredSlides) {\r\n      slideOffset -= slides[0].swiperSlideOffset;\r\n    }\r\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\r\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\r\n    const slideBefore = -(offsetCenter - slideOffset);\r\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\r\n    const isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i];\r\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\r\n    if (isVisible) {\r\n      swiper.visibleSlides.push(slide);\r\n      swiper.visibleSlidesIndexes.push(i);\r\n    }\r\n    toggleSlideClasses$1(slide, isVisible, params.slideVisibleClass);\r\n    toggleSlideClasses$1(slide, isFullyVisible, params.slideFullyVisibleClass);\r\n    slide.progress = rtl ? -slideProgress : slideProgress;\r\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\r\n  }\r\n}\r\n\r\nfunction updateProgress(translate) {\r\n  const swiper = this;\r\n  if (typeof translate === 'undefined') {\r\n    const multiplier = swiper.rtlTranslate ? -1 : 1;\r\n    // eslint-disable-next-line\r\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\r\n  }\r\n  const params = swiper.params;\r\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\r\n  let {\r\n    progress,\r\n    isBeginning,\r\n    isEnd,\r\n    progressLoop\r\n  } = swiper;\r\n  const wasBeginning = isBeginning;\r\n  const wasEnd = isEnd;\r\n  if (translatesDiff === 0) {\r\n    progress = 0;\r\n    isBeginning = true;\r\n    isEnd = true;\r\n  } else {\r\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\r\n    const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;\r\n    const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;\r\n    isBeginning = isBeginningRounded || progress <= 0;\r\n    isEnd = isEndRounded || progress >= 1;\r\n    if (isBeginningRounded) progress = 0;\r\n    if (isEndRounded) progress = 1;\r\n  }\r\n  if (params.loop) {\r\n    const firstSlideIndex = swiper.getSlideIndexByData(0);\r\n    const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);\r\n    const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];\r\n    const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];\r\n    const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];\r\n    const translateAbs = Math.abs(translate);\r\n    if (translateAbs >= firstSlideTranslate) {\r\n      progressLoop = (translateAbs - firstSlideTranslate) / translateMax;\r\n    } else {\r\n      progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;\r\n    }\r\n    if (progressLoop > 1) progressLoop -= 1;\r\n  }\r\n  Object.assign(swiper, {\r\n    progress,\r\n    progressLoop,\r\n    isBeginning,\r\n    isEnd\r\n  });\r\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\r\n  if (isBeginning && !wasBeginning) {\r\n    swiper.emit('reachBeginning toEdge');\r\n  }\r\n  if (isEnd && !wasEnd) {\r\n    swiper.emit('reachEnd toEdge');\r\n  }\r\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\r\n    swiper.emit('fromEdge');\r\n  }\r\n  swiper.emit('progress', progress);\r\n}\r\n\r\nconst toggleSlideClasses = (slideEl, condition, className) => {\r\n  if (condition && !slideEl.classList.contains(className)) {\r\n    slideEl.classList.add(className);\r\n  } else if (!condition && slideEl.classList.contains(className)) {\r\n    slideEl.classList.remove(className);\r\n  }\r\n};\r\nfunction updateSlidesClasses() {\r\n  const swiper = this;\r\n  const {\r\n    slides,\r\n    params,\r\n    slidesEl,\r\n    activeIndex\r\n  } = swiper;\r\n  const isVirtual = swiper.virtual && params.virtual.enabled;\r\n  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\r\n  const getFilteredSlide = selector => {\r\n    return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];\r\n  };\r\n  let activeSlide;\r\n  let prevSlide;\r\n  let nextSlide;\r\n  if (isVirtual) {\r\n    if (params.loop) {\r\n      let slideIndex = activeIndex - swiper.virtual.slidesBefore;\r\n      if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;\r\n      if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;\r\n      activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${slideIndex}\"]`);\r\n    } else {\r\n      activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${activeIndex}\"]`);\r\n    }\r\n  } else {\r\n    if (gridEnabled) {\r\n      activeSlide = slides.filter(slideEl => slideEl.column === activeIndex)[0];\r\n      nextSlide = slides.filter(slideEl => slideEl.column === activeIndex + 1)[0];\r\n      prevSlide = slides.filter(slideEl => slideEl.column === activeIndex - 1)[0];\r\n    } else {\r\n      activeSlide = slides[activeIndex];\r\n    }\r\n  }\r\n  if (activeSlide) {\r\n    if (!gridEnabled) {\r\n      // Next Slide\r\n      nextSlide = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\r\n      if (params.loop && !nextSlide) {\r\n        nextSlide = slides[0];\r\n      }\r\n\r\n      // Prev Slide\r\n      prevSlide = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.r)(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\r\n      if (params.loop && !prevSlide === 0) {\r\n        prevSlide = slides[slides.length - 1];\r\n      }\r\n    }\r\n  }\r\n  slides.forEach(slideEl => {\r\n    toggleSlideClasses(slideEl, slideEl === activeSlide, params.slideActiveClass);\r\n    toggleSlideClasses(slideEl, slideEl === nextSlide, params.slideNextClass);\r\n    toggleSlideClasses(slideEl, slideEl === prevSlide, params.slidePrevClass);\r\n  });\r\n  swiper.emitSlidesClasses();\r\n}\r\n\r\nconst processLazyPreloader = (swiper, imageEl) => {\r\n  if (!swiper || swiper.destroyed || !swiper.params) return;\r\n  const slideSelector = () => swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\r\n  const slideEl = imageEl.closest(slideSelector());\r\n  if (slideEl) {\r\n    let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);\r\n    if (!lazyEl && swiper.isElement) {\r\n      if (slideEl.shadowRoot) {\r\n        lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\r\n      } else {\r\n        // init later\r\n        requestAnimationFrame(() => {\r\n          if (slideEl.shadowRoot) {\r\n            lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\r\n            if (lazyEl) lazyEl.remove();\r\n          }\r\n        });\r\n      }\r\n    }\r\n    if (lazyEl) lazyEl.remove();\r\n  }\r\n};\r\nconst unlazy = (swiper, index) => {\r\n  if (!swiper.slides[index]) return;\r\n  const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\r\n  if (imageEl) imageEl.removeAttribute('loading');\r\n};\r\nconst preload = swiper => {\r\n  if (!swiper || swiper.destroyed || !swiper.params) return;\r\n  let amount = swiper.params.lazyPreloadPrevNext;\r\n  const len = swiper.slides.length;\r\n  if (!len || !amount || amount < 0) return;\r\n  amount = Math.min(amount, len);\r\n  const slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\r\n  const activeIndex = swiper.activeIndex;\r\n  if (swiper.params.grid && swiper.params.grid.rows > 1) {\r\n    const activeColumn = activeIndex;\r\n    const preloadColumns = [activeColumn - amount];\r\n    preloadColumns.push(...Array.from({\r\n      length: amount\r\n    }).map((_, i) => {\r\n      return activeColumn + slidesPerView + i;\r\n    }));\r\n    swiper.slides.forEach((slideEl, i) => {\r\n      if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\r\n    });\r\n    return;\r\n  }\r\n  const slideIndexLastInView = activeIndex + slidesPerView - 1;\r\n  if (swiper.params.rewind || swiper.params.loop) {\r\n    for (let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {\r\n      const realIndex = (i % len + len) % len;\r\n      if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\r\n    }\r\n  } else {\r\n    for (let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1) {\r\n      if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {\r\n        unlazy(swiper, i);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction getActiveIndexByTranslate(swiper) {\r\n  const {\r\n    slidesGrid,\r\n    params\r\n  } = swiper;\r\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\r\n  let activeIndex;\r\n  for (let i = 0; i < slidesGrid.length; i += 1) {\r\n    if (typeof slidesGrid[i + 1] !== 'undefined') {\r\n      if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\r\n        activeIndex = i;\r\n      } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\r\n        activeIndex = i + 1;\r\n      }\r\n    } else if (translate >= slidesGrid[i]) {\r\n      activeIndex = i;\r\n    }\r\n  }\r\n  // Normalize slideIndex\r\n  if (params.normalizeSlideIndex) {\r\n    if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\r\n  }\r\n  return activeIndex;\r\n}\r\nfunction updateActiveIndex(newActiveIndex) {\r\n  const swiper = this;\r\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\r\n  const {\r\n    snapGrid,\r\n    params,\r\n    activeIndex: previousIndex,\r\n    realIndex: previousRealIndex,\r\n    snapIndex: previousSnapIndex\r\n  } = swiper;\r\n  let activeIndex = newActiveIndex;\r\n  let snapIndex;\r\n  const getVirtualRealIndex = aIndex => {\r\n    let realIndex = aIndex - swiper.virtual.slidesBefore;\r\n    if (realIndex < 0) {\r\n      realIndex = swiper.virtual.slides.length + realIndex;\r\n    }\r\n    if (realIndex >= swiper.virtual.slides.length) {\r\n      realIndex -= swiper.virtual.slides.length;\r\n    }\r\n    return realIndex;\r\n  };\r\n  if (typeof activeIndex === 'undefined') {\r\n    activeIndex = getActiveIndexByTranslate(swiper);\r\n  }\r\n  if (snapGrid.indexOf(translate) >= 0) {\r\n    snapIndex = snapGrid.indexOf(translate);\r\n  } else {\r\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\r\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\r\n  }\r\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\r\n  if (activeIndex === previousIndex && !swiper.params.loop) {\r\n    if (snapIndex !== previousSnapIndex) {\r\n      swiper.snapIndex = snapIndex;\r\n      swiper.emit('snapIndexChange');\r\n    }\r\n    return;\r\n  }\r\n  if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\r\n    swiper.realIndex = getVirtualRealIndex(activeIndex);\r\n    return;\r\n  }\r\n  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\r\n\r\n  // Get real index\r\n  let realIndex;\r\n  if (swiper.virtual && params.virtual.enabled && params.loop) {\r\n    realIndex = getVirtualRealIndex(activeIndex);\r\n  } else if (gridEnabled) {\r\n    const firstSlideInColumn = swiper.slides.filter(slideEl => slideEl.column === activeIndex)[0];\r\n    let activeSlideIndex = parseInt(firstSlideInColumn.getAttribute('data-swiper-slide-index'), 10);\r\n    if (Number.isNaN(activeSlideIndex)) {\r\n      activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);\r\n    }\r\n    realIndex = Math.floor(activeSlideIndex / params.grid.rows);\r\n  } else if (swiper.slides[activeIndex]) {\r\n    const slideIndex = swiper.slides[activeIndex].getAttribute('data-swiper-slide-index');\r\n    if (slideIndex) {\r\n      realIndex = parseInt(slideIndex, 10);\r\n    } else {\r\n      realIndex = activeIndex;\r\n    }\r\n  } else {\r\n    realIndex = activeIndex;\r\n  }\r\n  Object.assign(swiper, {\r\n    previousSnapIndex,\r\n    snapIndex,\r\n    previousRealIndex,\r\n    realIndex,\r\n    previousIndex,\r\n    activeIndex\r\n  });\r\n  if (swiper.initialized) {\r\n    preload(swiper);\r\n  }\r\n  swiper.emit('activeIndexChange');\r\n  swiper.emit('snapIndexChange');\r\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\r\n    if (previousRealIndex !== realIndex) {\r\n      swiper.emit('realIndexChange');\r\n    }\r\n    swiper.emit('slideChange');\r\n  }\r\n}\r\n\r\nfunction updateClickedSlide(el, path) {\r\n  const swiper = this;\r\n  const params = swiper.params;\r\n  let slide = el.closest(`.${params.slideClass}, swiper-slide`);\r\n  if (!slide && swiper.isElement && path && path.length > 1 && path.includes(el)) {\r\n    [...path.slice(path.indexOf(el) + 1, path.length)].forEach(pathEl => {\r\n      if (!slide && pathEl.matches && pathEl.matches(`.${params.slideClass}, swiper-slide`)) {\r\n        slide = pathEl;\r\n      }\r\n    });\r\n  }\r\n  let slideFound = false;\r\n  let slideIndex;\r\n  if (slide) {\r\n    for (let i = 0; i < swiper.slides.length; i += 1) {\r\n      if (swiper.slides[i] === slide) {\r\n        slideFound = true;\r\n        slideIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (slide && slideFound) {\r\n    swiper.clickedSlide = slide;\r\n    if (swiper.virtual && swiper.params.virtual.enabled) {\r\n      swiper.clickedIndex = parseInt(slide.getAttribute('data-swiper-slide-index'), 10);\r\n    } else {\r\n      swiper.clickedIndex = slideIndex;\r\n    }\r\n  } else {\r\n    swiper.clickedSlide = undefined;\r\n    swiper.clickedIndex = undefined;\r\n    return;\r\n  }\r\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\r\n    swiper.slideToClickedSlide();\r\n  }\r\n}\r\n\r\nvar update = {\r\n  updateSize,\r\n  updateSlides,\r\n  updateAutoHeight,\r\n  updateSlidesOffset,\r\n  updateSlidesProgress,\r\n  updateProgress,\r\n  updateSlidesClasses,\r\n  updateActiveIndex,\r\n  updateClickedSlide\r\n};\r\n\r\nfunction getSwiperTranslate(axis) {\r\n  if (axis === void 0) {\r\n    axis = this.isHorizontal() ? 'x' : 'y';\r\n  }\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    rtlTranslate: rtl,\r\n    translate,\r\n    wrapperEl\r\n  } = swiper;\r\n  if (params.virtualTranslate) {\r\n    return rtl ? -translate : translate;\r\n  }\r\n  if (params.cssMode) {\r\n    return translate;\r\n  }\r\n  let currentTranslate = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(wrapperEl, axis);\r\n  currentTranslate += swiper.cssOverflowAdjustment();\r\n  if (rtl) currentTranslate = -currentTranslate;\r\n  return currentTranslate || 0;\r\n}\r\n\r\nfunction setTranslate(translate, byController) {\r\n  const swiper = this;\r\n  const {\r\n    rtlTranslate: rtl,\r\n    params,\r\n    wrapperEl,\r\n    progress\r\n  } = swiper;\r\n  let x = 0;\r\n  let y = 0;\r\n  const z = 0;\r\n  if (swiper.isHorizontal()) {\r\n    x = rtl ? -translate : translate;\r\n  } else {\r\n    y = translate;\r\n  }\r\n  if (params.roundLengths) {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n  }\r\n  swiper.previousTranslate = swiper.translate;\r\n  swiper.translate = swiper.isHorizontal() ? x : y;\r\n  if (params.cssMode) {\r\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\r\n  } else if (!params.virtualTranslate) {\r\n    if (swiper.isHorizontal()) {\r\n      x -= swiper.cssOverflowAdjustment();\r\n    } else {\r\n      y -= swiper.cssOverflowAdjustment();\r\n    }\r\n    wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;\r\n  }\r\n\r\n  // Check if we need to update progress\r\n  let newProgress;\r\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\r\n  if (translatesDiff === 0) {\r\n    newProgress = 0;\r\n  } else {\r\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\r\n  }\r\n  if (newProgress !== progress) {\r\n    swiper.updateProgress(translate);\r\n  }\r\n  swiper.emit('setTranslate', swiper.translate, byController);\r\n}\r\n\r\nfunction minTranslate() {\r\n  return -this.snapGrid[0];\r\n}\r\n\r\nfunction maxTranslate() {\r\n  return -this.snapGrid[this.snapGrid.length - 1];\r\n}\r\n\r\nfunction translateTo(translate, speed, runCallbacks, translateBounds, internal) {\r\n  if (translate === void 0) {\r\n    translate = 0;\r\n  }\r\n  if (speed === void 0) {\r\n    speed = this.params.speed;\r\n  }\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  if (translateBounds === void 0) {\r\n    translateBounds = true;\r\n  }\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    wrapperEl\r\n  } = swiper;\r\n  if (swiper.animating && params.preventInteractionOnTransition) {\r\n    return false;\r\n  }\r\n  const minTranslate = swiper.minTranslate();\r\n  const maxTranslate = swiper.maxTranslate();\r\n  let newTranslate;\r\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate;\r\n\r\n  // Update progress\r\n  swiper.updateProgress(newTranslate);\r\n  if (params.cssMode) {\r\n    const isH = swiper.isHorizontal();\r\n    if (speed === 0) {\r\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\r\n    } else {\r\n      if (!swiper.support.smoothScroll) {\r\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)({\r\n          swiper,\r\n          targetPosition: -newTranslate,\r\n          side: isH ? 'left' : 'top'\r\n        });\r\n        return true;\r\n      }\r\n      wrapperEl.scrollTo({\r\n        [isH ? 'left' : 'top']: -newTranslate,\r\n        behavior: 'smooth'\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n  if (speed === 0) {\r\n    swiper.setTransition(0);\r\n    swiper.setTranslate(newTranslate);\r\n    if (runCallbacks) {\r\n      swiper.emit('beforeTransitionStart', speed, internal);\r\n      swiper.emit('transitionEnd');\r\n    }\r\n  } else {\r\n    swiper.setTransition(speed);\r\n    swiper.setTranslate(newTranslate);\r\n    if (runCallbacks) {\r\n      swiper.emit('beforeTransitionStart', speed, internal);\r\n      swiper.emit('transitionStart');\r\n    }\r\n    if (!swiper.animating) {\r\n      swiper.animating = true;\r\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\r\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\r\n          if (!swiper || swiper.destroyed) return;\r\n          if (e.target !== this) return;\r\n          swiper.wrapperEl.removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\r\n          swiper.onTranslateToWrapperTransitionEnd = null;\r\n          delete swiper.onTranslateToWrapperTransitionEnd;\r\n          swiper.animating = false;\r\n          if (runCallbacks) {\r\n            swiper.emit('transitionEnd');\r\n          }\r\n        };\r\n      }\r\n      swiper.wrapperEl.addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nvar translate = {\r\n  getTranslate: getSwiperTranslate,\r\n  setTranslate,\r\n  minTranslate,\r\n  maxTranslate,\r\n  translateTo\r\n};\r\n\r\nfunction setTransition(duration, byController) {\r\n  const swiper = this;\r\n  if (!swiper.params.cssMode) {\r\n    swiper.wrapperEl.style.transitionDuration = `${duration}ms`;\r\n    swiper.wrapperEl.style.transitionDelay = duration === 0 ? `0ms` : '';\r\n  }\r\n  swiper.emit('setTransition', duration, byController);\r\n}\r\n\r\nfunction transitionEmit(_ref) {\r\n  let {\r\n    swiper,\r\n    runCallbacks,\r\n    direction,\r\n    step\r\n  } = _ref;\r\n  const {\r\n    activeIndex,\r\n    previousIndex\r\n  } = swiper;\r\n  let dir = direction;\r\n  if (!dir) {\r\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\r\n  }\r\n  swiper.emit(`transition${step}`);\r\n  if (runCallbacks && activeIndex !== previousIndex) {\r\n    if (dir === 'reset') {\r\n      swiper.emit(`slideResetTransition${step}`);\r\n      return;\r\n    }\r\n    swiper.emit(`slideChangeTransition${step}`);\r\n    if (dir === 'next') {\r\n      swiper.emit(`slideNextTransition${step}`);\r\n    } else {\r\n      swiper.emit(`slidePrevTransition${step}`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction transitionStart(runCallbacks, direction) {\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  const swiper = this;\r\n  const {\r\n    params\r\n  } = swiper;\r\n  if (params.cssMode) return;\r\n  if (params.autoHeight) {\r\n    swiper.updateAutoHeight();\r\n  }\r\n  transitionEmit({\r\n    swiper,\r\n    runCallbacks,\r\n    direction,\r\n    step: 'Start'\r\n  });\r\n}\r\n\r\nfunction transitionEnd(runCallbacks, direction) {\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  const swiper = this;\r\n  const {\r\n    params\r\n  } = swiper;\r\n  swiper.animating = false;\r\n  if (params.cssMode) return;\r\n  swiper.setTransition(0);\r\n  transitionEmit({\r\n    swiper,\r\n    runCallbacks,\r\n    direction,\r\n    step: 'End'\r\n  });\r\n}\r\n\r\nvar transition = {\r\n  setTransition,\r\n  transitionStart,\r\n  transitionEnd\r\n};\r\n\r\nfunction slideTo(index, speed, runCallbacks, internal, initial) {\r\n  if (index === void 0) {\r\n    index = 0;\r\n  }\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  if (typeof index === 'string') {\r\n    index = parseInt(index, 10);\r\n  }\r\n  const swiper = this;\r\n  let slideIndex = index;\r\n  if (slideIndex < 0) slideIndex = 0;\r\n  const {\r\n    params,\r\n    snapGrid,\r\n    slidesGrid,\r\n    previousIndex,\r\n    activeIndex,\r\n    rtlTranslate: rtl,\r\n    wrapperEl,\r\n    enabled\r\n  } = swiper;\r\n  if (!enabled && !internal && !initial || swiper.destroyed || swiper.animating && params.preventInteractionOnTransition) {\r\n    return false;\r\n  }\r\n  if (typeof speed === 'undefined') {\r\n    speed = swiper.params.speed;\r\n  }\r\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\r\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\r\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\r\n  const translate = -snapGrid[snapIndex];\r\n  // Normalize slideIndex\r\n  if (params.normalizeSlideIndex) {\r\n    for (let i = 0; i < slidesGrid.length; i += 1) {\r\n      const normalizedTranslate = -Math.floor(translate * 100);\r\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\r\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\r\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\r\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\r\n          slideIndex = i;\r\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\r\n          slideIndex = i + 1;\r\n        }\r\n      } else if (normalizedTranslate >= normalizedGrid) {\r\n        slideIndex = i;\r\n      }\r\n    }\r\n  }\r\n  // Directions locks\r\n  if (swiper.initialized && slideIndex !== activeIndex) {\r\n    if (!swiper.allowSlideNext && (rtl ? translate > swiper.translate && translate > swiper.minTranslate() : translate < swiper.translate && translate < swiper.minTranslate())) {\r\n      return false;\r\n    }\r\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\r\n      if ((activeIndex || 0) !== slideIndex) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  if (slideIndex !== (previousIndex || 0) && runCallbacks) {\r\n    swiper.emit('beforeSlideChangeStart');\r\n  }\r\n\r\n  // Update progress\r\n  swiper.updateProgress(translate);\r\n  let direction;\r\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset';\r\n\r\n  // initial virtual\r\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\r\n  const isInitialVirtual = isVirtual && initial;\r\n  // Update Index\r\n  if (!isInitialVirtual && (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate)) {\r\n    swiper.updateActiveIndex(slideIndex);\r\n    // Update Height\r\n    if (params.autoHeight) {\r\n      swiper.updateAutoHeight();\r\n    }\r\n    swiper.updateSlidesClasses();\r\n    if (params.effect !== 'slide') {\r\n      swiper.setTranslate(translate);\r\n    }\r\n    if (direction !== 'reset') {\r\n      swiper.transitionStart(runCallbacks, direction);\r\n      swiper.transitionEnd(runCallbacks, direction);\r\n    }\r\n    return false;\r\n  }\r\n  if (params.cssMode) {\r\n    const isH = swiper.isHorizontal();\r\n    const t = rtl ? translate : -translate;\r\n    if (speed === 0) {\r\n      if (isVirtual) {\r\n        swiper.wrapperEl.style.scrollSnapType = 'none';\r\n        swiper._immediateVirtual = true;\r\n      }\r\n      if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {\r\n        swiper._cssModeVirtualInitialSet = true;\r\n        requestAnimationFrame(() => {\r\n          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\r\n        });\r\n      } else {\r\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\r\n      }\r\n      if (isVirtual) {\r\n        requestAnimationFrame(() => {\r\n          swiper.wrapperEl.style.scrollSnapType = '';\r\n          swiper._immediateVirtual = false;\r\n        });\r\n      }\r\n    } else {\r\n      if (!swiper.support.smoothScroll) {\r\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)({\r\n          swiper,\r\n          targetPosition: t,\r\n          side: isH ? 'left' : 'top'\r\n        });\r\n        return true;\r\n      }\r\n      wrapperEl.scrollTo({\r\n        [isH ? 'left' : 'top']: t,\r\n        behavior: 'smooth'\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n  swiper.setTransition(speed);\r\n  swiper.setTranslate(translate);\r\n  swiper.updateActiveIndex(slideIndex);\r\n  swiper.updateSlidesClasses();\r\n  swiper.emit('beforeTransitionStart', speed, internal);\r\n  swiper.transitionStart(runCallbacks, direction);\r\n  if (speed === 0) {\r\n    swiper.transitionEnd(runCallbacks, direction);\r\n  } else if (!swiper.animating) {\r\n    swiper.animating = true;\r\n    if (!swiper.onSlideToWrapperTransitionEnd) {\r\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\r\n        if (!swiper || swiper.destroyed) return;\r\n        if (e.target !== this) return;\r\n        swiper.wrapperEl.removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\r\n        swiper.onSlideToWrapperTransitionEnd = null;\r\n        delete swiper.onSlideToWrapperTransitionEnd;\r\n        swiper.transitionEnd(runCallbacks, direction);\r\n      };\r\n    }\r\n    swiper.wrapperEl.addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction slideToLoop(index, speed, runCallbacks, internal) {\r\n  if (index === void 0) {\r\n    index = 0;\r\n  }\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  if (typeof index === 'string') {\r\n    const indexAsNumber = parseInt(index, 10);\r\n    index = indexAsNumber;\r\n  }\r\n  const swiper = this;\r\n  if (swiper.destroyed) return;\r\n  if (typeof speed === 'undefined') {\r\n    speed = swiper.params.speed;\r\n  }\r\n  const gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;\r\n  let newIndex = index;\r\n  if (swiper.params.loop) {\r\n    if (swiper.virtual && swiper.params.virtual.enabled) {\r\n      // eslint-disable-next-line\r\n      newIndex = newIndex + swiper.virtual.slidesBefore;\r\n    } else {\r\n      let targetSlideIndex;\r\n      if (gridEnabled) {\r\n        const slideIndex = newIndex * swiper.params.grid.rows;\r\n        targetSlideIndex = swiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex)[0].column;\r\n      } else {\r\n        targetSlideIndex = swiper.getSlideIndexByData(newIndex);\r\n      }\r\n      const cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;\r\n      const {\r\n        centeredSlides\r\n      } = swiper.params;\r\n      let slidesPerView = swiper.params.slidesPerView;\r\n      if (slidesPerView === 'auto') {\r\n        slidesPerView = swiper.slidesPerViewDynamic();\r\n      } else {\r\n        slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));\r\n        if (centeredSlides && slidesPerView % 2 === 0) {\r\n          slidesPerView = slidesPerView + 1;\r\n        }\r\n      }\r\n      let needLoopFix = cols - targetSlideIndex < slidesPerView;\r\n      if (centeredSlides) {\r\n        needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);\r\n      }\r\n      if (internal && centeredSlides && swiper.params.slidesPerView !== 'auto' && !gridEnabled) {\r\n        needLoopFix = false;\r\n      }\r\n      if (needLoopFix) {\r\n        const direction = centeredSlides ? targetSlideIndex < swiper.activeIndex ? 'prev' : 'next' : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? 'next' : 'prev';\r\n        swiper.loopFix({\r\n          direction,\r\n          slideTo: true,\r\n          activeSlideIndex: direction === 'next' ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,\r\n          slideRealIndex: direction === 'next' ? swiper.realIndex : undefined\r\n        });\r\n      }\r\n      if (gridEnabled) {\r\n        const slideIndex = newIndex * swiper.params.grid.rows;\r\n        newIndex = swiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex)[0].column;\r\n      } else {\r\n        newIndex = swiper.getSlideIndexByData(newIndex);\r\n      }\r\n    }\r\n  }\r\n  requestAnimationFrame(() => {\r\n    swiper.slideTo(newIndex, speed, runCallbacks, internal);\r\n  });\r\n  return swiper;\r\n}\r\n\r\n/* eslint no-unused-vars: \"off\" */\r\nfunction slideNext(speed, runCallbacks, internal) {\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  const swiper = this;\r\n  const {\r\n    enabled,\r\n    params,\r\n    animating\r\n  } = swiper;\r\n  if (!enabled || swiper.destroyed) return swiper;\r\n  if (typeof speed === 'undefined') {\r\n    speed = swiper.params.speed;\r\n  }\r\n  let perGroup = params.slidesPerGroup;\r\n  if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\r\n    perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\r\n  }\r\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\r\n  const isVirtual = swiper.virtual && params.virtual.enabled;\r\n  if (params.loop) {\r\n    if (animating && !isVirtual && params.loopPreventsSliding) return false;\r\n    swiper.loopFix({\r\n      direction: 'next'\r\n    });\r\n    // eslint-disable-next-line\r\n    swiper._clientLeft = swiper.wrapperEl.clientLeft;\r\n    if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {\r\n      requestAnimationFrame(() => {\r\n        swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\r\n      });\r\n      return true;\r\n    }\r\n  }\r\n  if (params.rewind && swiper.isEnd) {\r\n    return swiper.slideTo(0, speed, runCallbacks, internal);\r\n  }\r\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\r\n}\r\n\r\n/* eslint no-unused-vars: \"off\" */\r\nfunction slidePrev(speed, runCallbacks, internal) {\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    snapGrid,\r\n    slidesGrid,\r\n    rtlTranslate,\r\n    enabled,\r\n    animating\r\n  } = swiper;\r\n  if (!enabled || swiper.destroyed) return swiper;\r\n  if (typeof speed === 'undefined') {\r\n    speed = swiper.params.speed;\r\n  }\r\n  const isVirtual = swiper.virtual && params.virtual.enabled;\r\n  if (params.loop) {\r\n    if (animating && !isVirtual && params.loopPreventsSliding) return false;\r\n    swiper.loopFix({\r\n      direction: 'prev'\r\n    });\r\n    // eslint-disable-next-line\r\n    swiper._clientLeft = swiper.wrapperEl.clientLeft;\r\n  }\r\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\r\n  function normalize(val) {\r\n    if (val < 0) return -Math.floor(Math.abs(val));\r\n    return Math.floor(val);\r\n  }\r\n  const normalizedTranslate = normalize(translate);\r\n  const normalizedSnapGrid = snapGrid.map(val => normalize(val));\r\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\r\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\r\n    let prevSnapIndex;\r\n    snapGrid.forEach((snap, snapIndex) => {\r\n      if (normalizedTranslate >= snap) {\r\n        // prevSnap = snap;\r\n        prevSnapIndex = snapIndex;\r\n      }\r\n    });\r\n    if (typeof prevSnapIndex !== 'undefined') {\r\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\r\n    }\r\n  }\r\n  let prevIndex = 0;\r\n  if (typeof prevSnap !== 'undefined') {\r\n    prevIndex = slidesGrid.indexOf(prevSnap);\r\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\r\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\r\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\r\n      prevIndex = Math.max(prevIndex, 0);\r\n    }\r\n  }\r\n  if (params.rewind && swiper.isBeginning) {\r\n    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\r\n    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\r\n  } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {\r\n    requestAnimationFrame(() => {\r\n      swiper.slideTo(prevIndex, speed, runCallbacks, internal);\r\n    });\r\n    return true;\r\n  }\r\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\r\n}\r\n\r\n/* eslint no-unused-vars: \"off\" */\r\nfunction slideReset(speed, runCallbacks, internal) {\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  const swiper = this;\r\n  if (swiper.destroyed) return;\r\n  if (typeof speed === 'undefined') {\r\n    speed = swiper.params.speed;\r\n  }\r\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\r\n}\r\n\r\n/* eslint no-unused-vars: \"off\" */\r\nfunction slideToClosest(speed, runCallbacks, internal, threshold) {\r\n  if (runCallbacks === void 0) {\r\n    runCallbacks = true;\r\n  }\r\n  if (threshold === void 0) {\r\n    threshold = 0.5;\r\n  }\r\n  const swiper = this;\r\n  if (swiper.destroyed) return;\r\n  if (typeof speed === 'undefined') {\r\n    speed = swiper.params.speed;\r\n  }\r\n  let index = swiper.activeIndex;\r\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\r\n  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\r\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\r\n  if (translate >= swiper.snapGrid[snapIndex]) {\r\n    // The current translate is on or after the current snap index, so the choice\r\n    // is between the current index and the one after it.\r\n    const currentSnap = swiper.snapGrid[snapIndex];\r\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\r\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\r\n      index += swiper.params.slidesPerGroup;\r\n    }\r\n  } else {\r\n    // The current translate is before the current snap index, so the choice\r\n    // is between the current index and the one before it.\r\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\r\n    const currentSnap = swiper.snapGrid[snapIndex];\r\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\r\n      index -= swiper.params.slidesPerGroup;\r\n    }\r\n  }\r\n  index = Math.max(index, 0);\r\n  index = Math.min(index, swiper.slidesGrid.length - 1);\r\n  return swiper.slideTo(index, speed, runCallbacks, internal);\r\n}\r\n\r\nfunction slideToClickedSlide() {\r\n  const swiper = this;\r\n  if (swiper.destroyed) return;\r\n  const {\r\n    params,\r\n    slidesEl\r\n  } = swiper;\r\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\r\n  let slideToIndex = swiper.clickedIndex;\r\n  let realIndex;\r\n  const slideSelector = swiper.isElement ? `swiper-slide` : `.${params.slideClass}`;\r\n  if (params.loop) {\r\n    if (swiper.animating) return;\r\n    realIndex = parseInt(swiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\r\n    if (params.centeredSlides) {\r\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\r\n        swiper.loopFix();\r\n        slideToIndex = swiper.getSlideIndex((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\r\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {\r\n          swiper.slideTo(slideToIndex);\r\n        });\r\n      } else {\r\n        swiper.slideTo(slideToIndex);\r\n      }\r\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\r\n      swiper.loopFix();\r\n      slideToIndex = swiper.getSlideIndex((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\r\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {\r\n        swiper.slideTo(slideToIndex);\r\n      });\r\n    } else {\r\n      swiper.slideTo(slideToIndex);\r\n    }\r\n  } else {\r\n    swiper.slideTo(slideToIndex);\r\n  }\r\n}\r\n\r\nvar slide = {\r\n  slideTo,\r\n  slideToLoop,\r\n  slideNext,\r\n  slidePrev,\r\n  slideReset,\r\n  slideToClosest,\r\n  slideToClickedSlide\r\n};\r\n\r\nfunction loopCreate(slideRealIndex) {\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    slidesEl\r\n  } = swiper;\r\n  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\r\n  const initSlides = () => {\r\n    const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\r\n    slides.forEach((el, index) => {\r\n      el.setAttribute('data-swiper-slide-index', index);\r\n    });\r\n  };\r\n  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\r\n  const slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);\r\n  const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;\r\n  const shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;\r\n  const addBlankSlides = amountOfSlides => {\r\n    for (let i = 0; i < amountOfSlides; i += 1) {\r\n      const slideEl = swiper.isElement ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('swiper-slide', [params.slideBlankClass]) : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', [params.slideClass, params.slideBlankClass]);\r\n      swiper.slidesEl.append(slideEl);\r\n    }\r\n  };\r\n  if (shouldFillGroup) {\r\n    if (params.loopAddBlankSlides) {\r\n      const slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;\r\n      addBlankSlides(slidesToAdd);\r\n      swiper.recalcSlides();\r\n      swiper.updateSlides();\r\n    } else {\r\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)('Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');\r\n    }\r\n    initSlides();\r\n  } else if (shouldFillGrid) {\r\n    if (params.loopAddBlankSlides) {\r\n      const slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;\r\n      addBlankSlides(slidesToAdd);\r\n      swiper.recalcSlides();\r\n      swiper.updateSlides();\r\n    } else {\r\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)('Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');\r\n    }\r\n    initSlides();\r\n  } else {\r\n    initSlides();\r\n  }\r\n  swiper.loopFix({\r\n    slideRealIndex,\r\n    direction: params.centeredSlides ? undefined : 'next'\r\n  });\r\n}\r\n\r\nfunction loopFix(_temp) {\r\n  let {\r\n    slideRealIndex,\r\n    slideTo = true,\r\n    direction,\r\n    setTranslate,\r\n    activeSlideIndex,\r\n    byController,\r\n    byMousewheel\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const swiper = this;\r\n  if (!swiper.params.loop) return;\r\n  swiper.emit('beforeLoopFix');\r\n  const {\r\n    slides,\r\n    allowSlidePrev,\r\n    allowSlideNext,\r\n    slidesEl,\r\n    params\r\n  } = swiper;\r\n  const {\r\n    centeredSlides\r\n  } = params;\r\n  swiper.allowSlidePrev = true;\r\n  swiper.allowSlideNext = true;\r\n  if (swiper.virtual && params.virtual.enabled) {\r\n    if (slideTo) {\r\n      if (!params.centeredSlides && swiper.snapIndex === 0) {\r\n        swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\r\n      } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {\r\n        swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\r\n      } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\r\n        swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\r\n      }\r\n    }\r\n    swiper.allowSlidePrev = allowSlidePrev;\r\n    swiper.allowSlideNext = allowSlideNext;\r\n    swiper.emit('loopFix');\r\n    return;\r\n  }\r\n  let slidesPerView = params.slidesPerView;\r\n  if (slidesPerView === 'auto') {\r\n    slidesPerView = swiper.slidesPerViewDynamic();\r\n  } else {\r\n    slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));\r\n    if (centeredSlides && slidesPerView % 2 === 0) {\r\n      slidesPerView = slidesPerView + 1;\r\n    }\r\n  }\r\n  const slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;\r\n  let loopedSlides = slidesPerGroup;\r\n  if (loopedSlides % slidesPerGroup !== 0) {\r\n    loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;\r\n  }\r\n  loopedSlides += params.loopAdditionalSlides;\r\n  swiper.loopedSlides = loopedSlides;\r\n  const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\r\n  if (slides.length < slidesPerView + loopedSlides) {\r\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)('Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters');\r\n  } else if (gridEnabled && params.grid.fill === 'row') {\r\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)('Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`');\r\n  }\r\n  const prependSlidesIndexes = [];\r\n  const appendSlidesIndexes = [];\r\n  let activeIndex = swiper.activeIndex;\r\n  if (typeof activeSlideIndex === 'undefined') {\r\n    activeSlideIndex = swiper.getSlideIndex(slides.filter(el => el.classList.contains(params.slideActiveClass))[0]);\r\n  } else {\r\n    activeIndex = activeSlideIndex;\r\n  }\r\n  const isNext = direction === 'next' || !direction;\r\n  const isPrev = direction === 'prev' || !direction;\r\n  let slidesPrepended = 0;\r\n  let slidesAppended = 0;\r\n  const cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;\r\n  const activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;\r\n  const activeColIndexWithShift = activeColIndex + (centeredSlides && typeof setTranslate === 'undefined' ? -slidesPerView / 2 + 0.5 : 0);\r\n  // prepend last slides before start\r\n  if (activeColIndexWithShift < loopedSlides) {\r\n    slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);\r\n    for (let i = 0; i < loopedSlides - activeColIndexWithShift; i += 1) {\r\n      const index = i - Math.floor(i / cols) * cols;\r\n      if (gridEnabled) {\r\n        const colIndexToPrepend = cols - index - 1;\r\n        for (let i = slides.length - 1; i >= 0; i -= 1) {\r\n          if (slides[i].column === colIndexToPrepend) prependSlidesIndexes.push(i);\r\n        }\r\n        // slides.forEach((slide, slideIndex) => {\r\n        //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);\r\n        // });\r\n      } else {\r\n        prependSlidesIndexes.push(cols - index - 1);\r\n      }\r\n    }\r\n  } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {\r\n    slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);\r\n    for (let i = 0; i < slidesAppended; i += 1) {\r\n      const index = i - Math.floor(i / cols) * cols;\r\n      if (gridEnabled) {\r\n        slides.forEach((slide, slideIndex) => {\r\n          if (slide.column === index) appendSlidesIndexes.push(slideIndex);\r\n        });\r\n      } else {\r\n        appendSlidesIndexes.push(index);\r\n      }\r\n    }\r\n  }\r\n  swiper.__preventObserver__ = true;\r\n  requestAnimationFrame(() => {\r\n    swiper.__preventObserver__ = false;\r\n  });\r\n  if (isPrev) {\r\n    prependSlidesIndexes.forEach(index => {\r\n      slides[index].swiperLoopMoveDOM = true;\r\n      slidesEl.prepend(slides[index]);\r\n      slides[index].swiperLoopMoveDOM = false;\r\n    });\r\n  }\r\n  if (isNext) {\r\n    appendSlidesIndexes.forEach(index => {\r\n      slides[index].swiperLoopMoveDOM = true;\r\n      slidesEl.append(slides[index]);\r\n      slides[index].swiperLoopMoveDOM = false;\r\n    });\r\n  }\r\n  swiper.recalcSlides();\r\n  if (params.slidesPerView === 'auto') {\r\n    swiper.updateSlides();\r\n  } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {\r\n    swiper.slides.forEach((slide, slideIndex) => {\r\n      swiper.grid.updateSlide(slideIndex, slide, swiper.slides);\r\n    });\r\n  }\r\n  if (params.watchSlidesProgress) {\r\n    swiper.updateSlidesOffset();\r\n  }\r\n  if (slideTo) {\r\n    if (prependSlidesIndexes.length > 0 && isPrev) {\r\n      if (typeof slideRealIndex === 'undefined') {\r\n        const currentSlideTranslate = swiper.slidesGrid[activeIndex];\r\n        const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\r\n        const diff = newSlideTranslate - currentSlideTranslate;\r\n        if (byMousewheel) {\r\n          swiper.setTranslate(swiper.translate - diff);\r\n        } else {\r\n          swiper.slideTo(activeIndex + Math.ceil(slidesPrepended), 0, false, true);\r\n          if (setTranslate) {\r\n            swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\r\n            swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\r\n          }\r\n        }\r\n      } else {\r\n        if (setTranslate) {\r\n          const shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;\r\n          swiper.slideTo(swiper.activeIndex + shift, 0, false, true);\r\n          swiper.touchEventsData.currentTranslate = swiper.translate;\r\n        }\r\n      }\r\n    } else if (appendSlidesIndexes.length > 0 && isNext) {\r\n      if (typeof slideRealIndex === 'undefined') {\r\n        const currentSlideTranslate = swiper.slidesGrid[activeIndex];\r\n        const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\r\n        const diff = newSlideTranslate - currentSlideTranslate;\r\n        if (byMousewheel) {\r\n          swiper.setTranslate(swiper.translate - diff);\r\n        } else {\r\n          swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\r\n          if (setTranslate) {\r\n            swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\r\n            swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\r\n          }\r\n        }\r\n      } else {\r\n        const shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;\r\n        swiper.slideTo(swiper.activeIndex - shift, 0, false, true);\r\n      }\r\n    }\r\n  }\r\n  swiper.allowSlidePrev = allowSlidePrev;\r\n  swiper.allowSlideNext = allowSlideNext;\r\n  if (swiper.controller && swiper.controller.control && !byController) {\r\n    const loopParams = {\r\n      slideRealIndex,\r\n      direction,\r\n      setTranslate,\r\n      activeSlideIndex,\r\n      byController: true\r\n    };\r\n    if (Array.isArray(swiper.controller.control)) {\r\n      swiper.controller.control.forEach(c => {\r\n        if (!c.destroyed && c.params.loop) c.loopFix({\r\n          ...loopParams,\r\n          slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo : false\r\n        });\r\n      });\r\n    } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\r\n      swiper.controller.control.loopFix({\r\n        ...loopParams,\r\n        slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo : false\r\n      });\r\n    }\r\n  }\r\n  swiper.emit('loopFix');\r\n}\r\n\r\nfunction loopDestroy() {\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    slidesEl\r\n  } = swiper;\r\n  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\r\n  swiper.recalcSlides();\r\n  const newSlidesOrder = [];\r\n  swiper.slides.forEach(slideEl => {\r\n    const index = typeof slideEl.swiperSlideIndex === 'undefined' ? slideEl.getAttribute('data-swiper-slide-index') * 1 : slideEl.swiperSlideIndex;\r\n    newSlidesOrder[index] = slideEl;\r\n  });\r\n  swiper.slides.forEach(slideEl => {\r\n    slideEl.removeAttribute('data-swiper-slide-index');\r\n  });\r\n  newSlidesOrder.forEach(slideEl => {\r\n    slidesEl.append(slideEl);\r\n  });\r\n  swiper.recalcSlides();\r\n  swiper.slideTo(swiper.realIndex, 0);\r\n}\r\n\r\nvar loop = {\r\n  loopCreate,\r\n  loopFix,\r\n  loopDestroy\r\n};\r\n\r\nfunction setGrabCursor(moving) {\r\n  const swiper = this;\r\n  if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\r\n  const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\r\n  if (swiper.isElement) {\r\n    swiper.__preventObserver__ = true;\r\n  }\r\n  el.style.cursor = 'move';\r\n  el.style.cursor = moving ? 'grabbing' : 'grab';\r\n  if (swiper.isElement) {\r\n    requestAnimationFrame(() => {\r\n      swiper.__preventObserver__ = false;\r\n    });\r\n  }\r\n}\r\n\r\nfunction unsetGrabCursor() {\r\n  const swiper = this;\r\n  if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\r\n    return;\r\n  }\r\n  if (swiper.isElement) {\r\n    swiper.__preventObserver__ = true;\r\n  }\r\n  swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\r\n  if (swiper.isElement) {\r\n    requestAnimationFrame(() => {\r\n      swiper.__preventObserver__ = false;\r\n    });\r\n  }\r\n}\r\n\r\nvar grabCursor = {\r\n  setGrabCursor,\r\n  unsetGrabCursor\r\n};\r\n\r\n// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\r\nfunction closestElement(selector, base) {\r\n  if (base === void 0) {\r\n    base = this;\r\n  }\r\n  function __closestFrom(el) {\r\n    if (!el || el === (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)() || el === (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)()) return null;\r\n    if (el.assignedSlot) el = el.assignedSlot;\r\n    const found = el.closest(selector);\r\n    if (!found && !el.getRootNode) {\r\n      return null;\r\n    }\r\n    return found || __closestFrom(el.getRootNode().host);\r\n  }\r\n  return __closestFrom(base);\r\n}\r\nfunction preventEdgeSwipe(swiper, event, startX) {\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  const {\r\n    params\r\n  } = swiper;\r\n  const edgeSwipeDetection = params.edgeSwipeDetection;\r\n  const edgeSwipeThreshold = params.edgeSwipeThreshold;\r\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\r\n    if (edgeSwipeDetection === 'prevent') {\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\nfunction onTouchStart(event) {\r\n  const swiper = this;\r\n  const document = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  let e = event;\r\n  if (e.originalEvent) e = e.originalEvent;\r\n  const data = swiper.touchEventsData;\r\n  if (e.type === 'pointerdown') {\r\n    if (data.pointerId !== null && data.pointerId !== e.pointerId) {\r\n      return;\r\n    }\r\n    data.pointerId = e.pointerId;\r\n  } else if (e.type === 'touchstart' && e.targetTouches.length === 1) {\r\n    data.touchId = e.targetTouches[0].identifier;\r\n  }\r\n  if (e.type === 'touchstart') {\r\n    // don't proceed touch event\r\n    preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);\r\n    return;\r\n  }\r\n  const {\r\n    params,\r\n    touches,\r\n    enabled\r\n  } = swiper;\r\n  if (!enabled) return;\r\n  if (!params.simulateTouch && e.pointerType === 'mouse') return;\r\n  if (swiper.animating && params.preventInteractionOnTransition) {\r\n    return;\r\n  }\r\n  if (!swiper.animating && params.cssMode && params.loop) {\r\n    swiper.loopFix();\r\n  }\r\n  let targetEl = e.target;\r\n  if (params.touchEventsTarget === 'wrapper') {\r\n    if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(targetEl, swiper.wrapperEl)) return;\r\n  }\r\n  if ('which' in e && e.which === 3) return;\r\n  if ('button' in e && e.button > 0) return;\r\n  if (data.isTouched && data.isMoved) return;\r\n\r\n  // change target el for shadow root component\r\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\r\n  // eslint-disable-next-line\r\n  const eventPath = e.composedPath ? e.composedPath() : e.path;\r\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {\r\n    targetEl = eventPath[0];\r\n  }\r\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\r\n  const isTargetShadow = !!(e.target && e.target.shadowRoot);\r\n\r\n  // use closestElement for shadow root element to get the actual closest for nested shadow root element\r\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {\r\n    swiper.allowClick = true;\r\n    return;\r\n  }\r\n  if (params.swipeHandler) {\r\n    if (!targetEl.closest(params.swipeHandler)) return;\r\n  }\r\n  touches.currentX = e.pageX;\r\n  touches.currentY = e.pageY;\r\n  const startX = touches.currentX;\r\n  const startY = touches.currentY;\r\n\r\n  // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\r\n\r\n  if (!preventEdgeSwipe(swiper, e, startX)) {\r\n    return;\r\n  }\r\n  Object.assign(data, {\r\n    isTouched: true,\r\n    isMoved: false,\r\n    allowTouchCallbacks: true,\r\n    isScrolling: undefined,\r\n    startMoving: undefined\r\n  });\r\n  touches.startX = startX;\r\n  touches.startY = startY;\r\n  data.touchStartTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\r\n  swiper.allowClick = true;\r\n  swiper.updateSize();\r\n  swiper.swipeDirection = undefined;\r\n  if (params.threshold > 0) data.allowThresholdMove = false;\r\n  let preventDefault = true;\r\n  if (targetEl.matches(data.focusableElements)) {\r\n    preventDefault = false;\r\n    if (targetEl.nodeName === 'SELECT') {\r\n      data.isTouched = false;\r\n    }\r\n  }\r\n  if (document.activeElement && document.activeElement.matches(data.focusableElements) && document.activeElement !== targetEl && (e.pointerType === 'mouse' || e.pointerType !== 'mouse' && !targetEl.matches(data.focusableElements))) {\r\n    document.activeElement.blur();\r\n  }\r\n  const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\r\n  if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {\r\n    e.preventDefault();\r\n  }\r\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\r\n    swiper.freeMode.onTouchStart();\r\n  }\r\n  swiper.emit('touchStart', e);\r\n}\r\n\r\nfunction onTouchMove(event) {\r\n  const document = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  const swiper = this;\r\n  const data = swiper.touchEventsData;\r\n  const {\r\n    params,\r\n    touches,\r\n    rtlTranslate: rtl,\r\n    enabled\r\n  } = swiper;\r\n  if (!enabled) return;\r\n  if (!params.simulateTouch && event.pointerType === 'mouse') return;\r\n  let e = event;\r\n  if (e.originalEvent) e = e.originalEvent;\r\n  if (e.type === 'pointermove') {\r\n    if (data.touchId !== null) return; // return from pointer if we use touch\r\n    const id = e.pointerId;\r\n    if (id !== data.pointerId) return;\r\n  }\r\n  let targetTouch;\r\n  if (e.type === 'touchmove') {\r\n    targetTouch = [...e.changedTouches].filter(t => t.identifier === data.touchId)[0];\r\n    if (!targetTouch || targetTouch.identifier !== data.touchId) return;\r\n  } else {\r\n    targetTouch = e;\r\n  }\r\n  if (!data.isTouched) {\r\n    if (data.startMoving && data.isScrolling) {\r\n      swiper.emit('touchMoveOpposite', e);\r\n    }\r\n    return;\r\n  }\r\n  const pageX = targetTouch.pageX;\r\n  const pageY = targetTouch.pageY;\r\n  if (e.preventedByNestedSwiper) {\r\n    touches.startX = pageX;\r\n    touches.startY = pageY;\r\n    return;\r\n  }\r\n  if (!swiper.allowTouchMove) {\r\n    if (!e.target.matches(data.focusableElements)) {\r\n      swiper.allowClick = false;\r\n    }\r\n    if (data.isTouched) {\r\n      Object.assign(touches, {\r\n        startX: pageX,\r\n        startY: pageY,\r\n        currentX: pageX,\r\n        currentY: pageY\r\n      });\r\n      data.touchStartTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\r\n    }\r\n    return;\r\n  }\r\n  if (params.touchReleaseOnEdges && !params.loop) {\r\n    if (swiper.isVertical()) {\r\n      // Vertical\r\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\r\n        data.isTouched = false;\r\n        data.isMoved = false;\r\n        return;\r\n      }\r\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\r\n      return;\r\n    }\r\n  }\r\n  if (document.activeElement && document.activeElement.matches(data.focusableElements) && document.activeElement !== e.target && e.pointerType !== 'mouse') {\r\n    document.activeElement.blur();\r\n  }\r\n  if (document.activeElement) {\r\n    if (e.target === document.activeElement && e.target.matches(data.focusableElements)) {\r\n      data.isMoved = true;\r\n      swiper.allowClick = false;\r\n      return;\r\n    }\r\n  }\r\n  if (data.allowTouchCallbacks) {\r\n    swiper.emit('touchMove', e);\r\n  }\r\n  touches.previousX = touches.currentX;\r\n  touches.previousY = touches.currentY;\r\n  touches.currentX = pageX;\r\n  touches.currentY = pageY;\r\n  const diffX = touches.currentX - touches.startX;\r\n  const diffY = touches.currentY - touches.startY;\r\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\r\n  if (typeof data.isScrolling === 'undefined') {\r\n    let touchAngle;\r\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\r\n      data.isScrolling = false;\r\n    } else {\r\n      // eslint-disable-next-line\r\n      if (diffX * diffX + diffY * diffY >= 25) {\r\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\r\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\r\n      }\r\n    }\r\n  }\r\n  if (data.isScrolling) {\r\n    swiper.emit('touchMoveOpposite', e);\r\n  }\r\n  if (typeof data.startMoving === 'undefined') {\r\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\r\n      data.startMoving = true;\r\n    }\r\n  }\r\n  if (data.isScrolling || e.type === 'touchmove' && data.preventTouchMoveFromPointerMove) {\r\n    data.isTouched = false;\r\n    return;\r\n  }\r\n  if (!data.startMoving) {\r\n    return;\r\n  }\r\n  swiper.allowClick = false;\r\n  if (!params.cssMode && e.cancelable) {\r\n    e.preventDefault();\r\n  }\r\n  if (params.touchMoveStopPropagation && !params.nested) {\r\n    e.stopPropagation();\r\n  }\r\n  let diff = swiper.isHorizontal() ? diffX : diffY;\r\n  let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;\r\n  if (params.oneWayMovement) {\r\n    diff = Math.abs(diff) * (rtl ? 1 : -1);\r\n    touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);\r\n  }\r\n  touches.diff = diff;\r\n  diff *= params.touchRatio;\r\n  if (rtl) {\r\n    diff = -diff;\r\n    touchesDiff = -touchesDiff;\r\n  }\r\n  const prevTouchesDirection = swiper.touchesDirection;\r\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\r\n  swiper.touchesDirection = touchesDiff > 0 ? 'prev' : 'next';\r\n  const isLoop = swiper.params.loop && !params.cssMode;\r\n  const allowLoopFix = swiper.touchesDirection === 'next' && swiper.allowSlideNext || swiper.touchesDirection === 'prev' && swiper.allowSlidePrev;\r\n  if (!data.isMoved) {\r\n    if (isLoop && allowLoopFix) {\r\n      swiper.loopFix({\r\n        direction: swiper.swipeDirection\r\n      });\r\n    }\r\n    data.startTranslate = swiper.getTranslate();\r\n    swiper.setTransition(0);\r\n    if (swiper.animating) {\r\n      const evt = new window.CustomEvent('transitionend', {\r\n        bubbles: true,\r\n        cancelable: true,\r\n        detail: {\r\n          bySwiperTouchMove: true\r\n        }\r\n      });\r\n      swiper.wrapperEl.dispatchEvent(evt);\r\n    }\r\n    data.allowMomentumBounce = false;\r\n    // Grab Cursor\r\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\r\n      swiper.setGrabCursor(true);\r\n    }\r\n    swiper.emit('sliderFirstMove', e);\r\n  }\r\n  let loopFixed;\r\n  new Date().getTime();\r\n  if (data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {\r\n    Object.assign(touches, {\r\n      startX: pageX,\r\n      startY: pageY,\r\n      currentX: pageX,\r\n      currentY: pageY,\r\n      startTranslate: data.currentTranslate\r\n    });\r\n    data.loopSwapReset = true;\r\n    data.startTranslate = data.currentTranslate;\r\n    return;\r\n  }\r\n  swiper.emit('sliderMove', e);\r\n  data.isMoved = true;\r\n  data.currentTranslate = diff + data.startTranslate;\r\n  let disableParentSwiper = true;\r\n  let resistanceRatio = params.resistanceRatio;\r\n  if (params.touchReleaseOnEdges) {\r\n    resistanceRatio = 0;\r\n  }\r\n  if (diff > 0) {\r\n    if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] - (params.slidesPerView !== 'auto' && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.activeIndex + 1] + swiper.params.spaceBetween : 0) - swiper.params.spaceBetween : swiper.minTranslate())) {\r\n      swiper.loopFix({\r\n        direction: 'prev',\r\n        setTranslate: true,\r\n        activeSlideIndex: 0\r\n      });\r\n    }\r\n    if (data.currentTranslate > swiper.minTranslate()) {\r\n      disableParentSwiper = false;\r\n      if (params.resistance) {\r\n        data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\r\n      }\r\n    }\r\n  } else if (diff < 0) {\r\n    if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween + (params.slidesPerView !== 'auto' && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween : 0) : swiper.maxTranslate())) {\r\n      swiper.loopFix({\r\n        direction: 'next',\r\n        setTranslate: true,\r\n        activeSlideIndex: swiper.slides.length - (params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))\r\n      });\r\n    }\r\n    if (data.currentTranslate < swiper.maxTranslate()) {\r\n      disableParentSwiper = false;\r\n      if (params.resistance) {\r\n        data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\r\n      }\r\n    }\r\n  }\r\n  if (disableParentSwiper) {\r\n    e.preventedByNestedSwiper = true;\r\n  }\r\n\r\n  // Directions locks\r\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\r\n    data.currentTranslate = data.startTranslate;\r\n  }\r\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\r\n    data.currentTranslate = data.startTranslate;\r\n  }\r\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\r\n    data.currentTranslate = data.startTranslate;\r\n  }\r\n\r\n  // Threshold\r\n  if (params.threshold > 0) {\r\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\r\n      if (!data.allowThresholdMove) {\r\n        data.allowThresholdMove = true;\r\n        touches.startX = touches.currentX;\r\n        touches.startY = touches.currentY;\r\n        data.currentTranslate = data.startTranslate;\r\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\r\n        return;\r\n      }\r\n    } else {\r\n      data.currentTranslate = data.startTranslate;\r\n      return;\r\n    }\r\n  }\r\n  if (!params.followFinger || params.cssMode) return;\r\n\r\n  // Update active index in free mode\r\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\r\n    swiper.updateActiveIndex();\r\n    swiper.updateSlidesClasses();\r\n  }\r\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {\r\n    swiper.freeMode.onTouchMove();\r\n  }\r\n  // Update progress\r\n  swiper.updateProgress(data.currentTranslate);\r\n  // Update translate\r\n  swiper.setTranslate(data.currentTranslate);\r\n}\r\n\r\nfunction onTouchEnd(event) {\r\n  const swiper = this;\r\n  const data = swiper.touchEventsData;\r\n  let e = event;\r\n  if (e.originalEvent) e = e.originalEvent;\r\n  let targetTouch;\r\n  const isTouchEvent = e.type === 'touchend' || e.type === 'touchcancel';\r\n  if (!isTouchEvent) {\r\n    if (data.touchId !== null) return; // return from pointer if we use touch\r\n    if (e.pointerId !== data.pointerId) return;\r\n    targetTouch = e;\r\n  } else {\r\n    targetTouch = [...e.changedTouches].filter(t => t.identifier === data.touchId)[0];\r\n    if (!targetTouch || targetTouch.identifier !== data.touchId) return;\r\n  }\r\n  if (['pointercancel', 'pointerout', 'pointerleave', 'contextmenu'].includes(e.type)) {\r\n    const proceed = ['pointercancel', 'contextmenu'].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);\r\n    if (!proceed) {\r\n      return;\r\n    }\r\n  }\r\n  data.pointerId = null;\r\n  data.touchId = null;\r\n  const {\r\n    params,\r\n    touches,\r\n    rtlTranslate: rtl,\r\n    slidesGrid,\r\n    enabled\r\n  } = swiper;\r\n  if (!enabled) return;\r\n  if (!params.simulateTouch && e.pointerType === 'mouse') return;\r\n  if (data.allowTouchCallbacks) {\r\n    swiper.emit('touchEnd', e);\r\n  }\r\n  data.allowTouchCallbacks = false;\r\n  if (!data.isTouched) {\r\n    if (data.isMoved && params.grabCursor) {\r\n      swiper.setGrabCursor(false);\r\n    }\r\n    data.isMoved = false;\r\n    data.startMoving = false;\r\n    return;\r\n  }\r\n\r\n  // Return Grab Cursor\r\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\r\n    swiper.setGrabCursor(false);\r\n  }\r\n\r\n  // Time diff\r\n  const touchEndTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\r\n  const timeDiff = touchEndTime - data.touchStartTime;\r\n\r\n  // Tap, doubleTap, Click\r\n  if (swiper.allowClick) {\r\n    const pathTree = e.path || e.composedPath && e.composedPath();\r\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);\r\n    swiper.emit('tap click', e);\r\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\r\n      swiper.emit('doubleTap doubleClick', e);\r\n    }\r\n  }\r\n  data.lastClickTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\r\n  (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(() => {\r\n    if (!swiper.destroyed) swiper.allowClick = true;\r\n  });\r\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {\r\n    data.isTouched = false;\r\n    data.isMoved = false;\r\n    data.startMoving = false;\r\n    return;\r\n  }\r\n  data.isTouched = false;\r\n  data.isMoved = false;\r\n  data.startMoving = false;\r\n  let currentPos;\r\n  if (params.followFinger) {\r\n    currentPos = rtl ? swiper.translate : -swiper.translate;\r\n  } else {\r\n    currentPos = -data.currentTranslate;\r\n  }\r\n  if (params.cssMode) {\r\n    return;\r\n  }\r\n  if (params.freeMode && params.freeMode.enabled) {\r\n    swiper.freeMode.onTouchEnd({\r\n      currentPos\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Find current slide\r\n  const swipeToLast = currentPos >= -swiper.maxTranslate() && !swiper.params.loop;\r\n  let stopIndex = 0;\r\n  let groupSize = swiper.slidesSizesGrid[0];\r\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\r\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\r\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\r\n      if (swipeToLast || currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\r\n        stopIndex = i;\r\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\r\n      }\r\n    } else if (swipeToLast || currentPos >= slidesGrid[i]) {\r\n      stopIndex = i;\r\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\r\n    }\r\n  }\r\n  let rewindFirstIndex = null;\r\n  let rewindLastIndex = null;\r\n  if (params.rewind) {\r\n    if (swiper.isBeginning) {\r\n      rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\r\n    } else if (swiper.isEnd) {\r\n      rewindFirstIndex = 0;\r\n    }\r\n  }\r\n  // Find current slide size\r\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\r\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\r\n  if (timeDiff > params.longSwipesMs) {\r\n    // Long touches\r\n    if (!params.longSwipes) {\r\n      swiper.slideTo(swiper.activeIndex);\r\n      return;\r\n    }\r\n    if (swiper.swipeDirection === 'next') {\r\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\r\n    }\r\n    if (swiper.swipeDirection === 'prev') {\r\n      if (ratio > 1 - params.longSwipesRatio) {\r\n        swiper.slideTo(stopIndex + increment);\r\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\r\n        swiper.slideTo(rewindLastIndex);\r\n      } else {\r\n        swiper.slideTo(stopIndex);\r\n      }\r\n    }\r\n  } else {\r\n    // Short swipes\r\n    if (!params.shortSwipes) {\r\n      swiper.slideTo(swiper.activeIndex);\r\n      return;\r\n    }\r\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\r\n    if (!isNavButtonTarget) {\r\n      if (swiper.swipeDirection === 'next') {\r\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\r\n      }\r\n      if (swiper.swipeDirection === 'prev') {\r\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\r\n      }\r\n    } else if (e.target === swiper.navigation.nextEl) {\r\n      swiper.slideTo(stopIndex + increment);\r\n    } else {\r\n      swiper.slideTo(stopIndex);\r\n    }\r\n  }\r\n}\r\n\r\nfunction onResize() {\r\n  const swiper = this;\r\n  const {\r\n    params,\r\n    el\r\n  } = swiper;\r\n  if (el && el.offsetWidth === 0) return;\r\n\r\n  // Breakpoints\r\n  if (params.breakpoints) {\r\n    swiper.setBreakpoint();\r\n  }\r\n\r\n  // Save locks\r\n  const {\r\n    allowSlideNext,\r\n    allowSlidePrev,\r\n    snapGrid\r\n  } = swiper;\r\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\r\n\r\n  // Disable locks on resize\r\n  swiper.allowSlideNext = true;\r\n  swiper.allowSlidePrev = true;\r\n  swiper.updateSize();\r\n  swiper.updateSlides();\r\n  swiper.updateSlidesClasses();\r\n  const isVirtualLoop = isVirtual && params.loop;\r\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {\r\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\r\n  } else {\r\n    if (swiper.params.loop && !isVirtual) {\r\n      swiper.slideToLoop(swiper.realIndex, 0, false, true);\r\n    } else {\r\n      swiper.slideTo(swiper.activeIndex, 0, false, true);\r\n    }\r\n  }\r\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\r\n    clearTimeout(swiper.autoplay.resizeTimeout);\r\n    swiper.autoplay.resizeTimeout = setTimeout(() => {\r\n      if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\r\n        swiper.autoplay.resume();\r\n      }\r\n    }, 500);\r\n  }\r\n  // Return locks after resize\r\n  swiper.allowSlidePrev = allowSlidePrev;\r\n  swiper.allowSlideNext = allowSlideNext;\r\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\r\n    swiper.checkOverflow();\r\n  }\r\n}\r\n\r\nfunction onClick(e) {\r\n  const swiper = this;\r\n  if (!swiper.enabled) return;\r\n  if (!swiper.allowClick) {\r\n    if (swiper.params.preventClicks) e.preventDefault();\r\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\r\n      e.stopPropagation();\r\n      e.stopImmediatePropagation();\r\n    }\r\n  }\r\n}\r\n\r\nfunction onScroll() {\r\n  const swiper = this;\r\n  const {\r\n    wrapperEl,\r\n    rtlTranslate,\r\n    enabled\r\n  } = swiper;\r\n  if (!enabled) return;\r\n  swiper.previousTranslate = swiper.translate;\r\n  if (swiper.isHorizontal()) {\r\n    swiper.translate = -wrapperEl.scrollLeft;\r\n  } else {\r\n    swiper.translate = -wrapperEl.scrollTop;\r\n  }\r\n  // eslint-disable-next-line\r\n  if (swiper.translate === 0) swiper.translate = 0;\r\n  swiper.updateActiveIndex();\r\n  swiper.updateSlidesClasses();\r\n  let newProgress;\r\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\r\n  if (translatesDiff === 0) {\r\n    newProgress = 0;\r\n  } else {\r\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\r\n  }\r\n  if (newProgress !== swiper.progress) {\r\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\r\n  }\r\n  swiper.emit('setTranslate', swiper.translate, false);\r\n}\r\n\r\nfunction onLoad(e) {\r\n  const swiper = this;\r\n  processLazyPreloader(swiper, e.target);\r\n  if (swiper.params.cssMode || swiper.params.slidesPerView !== 'auto' && !swiper.params.autoHeight) {\r\n    return;\r\n  }\r\n  swiper.update();\r\n}\r\n\r\nfunction onDocumentTouchStart() {\r\n  const swiper = this;\r\n  if (swiper.documentTouchHandlerProceeded) return;\r\n  swiper.documentTouchHandlerProceeded = true;\r\n  if (swiper.params.touchReleaseOnEdges) {\r\n    swiper.el.style.touchAction = 'auto';\r\n  }\r\n}\r\n\r\nconst events = (swiper, method) => {\r\n  const document = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  const {\r\n    params,\r\n    el,\r\n    wrapperEl,\r\n    device\r\n  } = swiper;\r\n  const capture = !!params.nested;\r\n  const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\r\n  const swiperMethod = method;\r\n  if (!el || typeof el === 'string') return;\r\n\r\n  // Touch Events\r\n  document[domMethod]('touchstart', swiper.onDocumentTouchStart, {\r\n    passive: false,\r\n    capture\r\n  });\r\n  el[domMethod]('touchstart', swiper.onTouchStart, {\r\n    passive: false\r\n  });\r\n  el[domMethod]('pointerdown', swiper.onTouchStart, {\r\n    passive: false\r\n  });\r\n  document[domMethod]('touchmove', swiper.onTouchMove, {\r\n    passive: false,\r\n    capture\r\n  });\r\n  document[domMethod]('pointermove', swiper.onTouchMove, {\r\n    passive: false,\r\n    capture\r\n  });\r\n  document[domMethod]('touchend', swiper.onTouchEnd, {\r\n    passive: true\r\n  });\r\n  document[domMethod]('pointerup', swiper.onTouchEnd, {\r\n    passive: true\r\n  });\r\n  document[domMethod]('pointercancel', swiper.onTouchEnd, {\r\n    passive: true\r\n  });\r\n  document[domMethod]('touchcancel', swiper.onTouchEnd, {\r\n    passive: true\r\n  });\r\n  document[domMethod]('pointerout', swiper.onTouchEnd, {\r\n    passive: true\r\n  });\r\n  document[domMethod]('pointerleave', swiper.onTouchEnd, {\r\n    passive: true\r\n  });\r\n  document[domMethod]('contextmenu', swiper.onTouchEnd, {\r\n    passive: true\r\n  });\r\n\r\n  // Prevent Links Clicks\r\n  if (params.preventClicks || params.preventClicksPropagation) {\r\n    el[domMethod]('click', swiper.onClick, true);\r\n  }\r\n  if (params.cssMode) {\r\n    wrapperEl[domMethod]('scroll', swiper.onScroll);\r\n  }\r\n\r\n  // Resize handler\r\n  if (params.updateOnWindowResize) {\r\n    swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\r\n  } else {\r\n    swiper[swiperMethod]('observerUpdate', onResize, true);\r\n  }\r\n\r\n  // Images loader\r\n  el[domMethod]('load', swiper.onLoad, {\r\n    capture: true\r\n  });\r\n};\r\nfunction attachEvents() {\r\n  const swiper = this;\r\n  const {\r\n    params\r\n  } = swiper;\r\n  swiper.onTouchStart = onTouchStart.bind(swiper);\r\n  swiper.onTouchMove = onTouchMove.bind(swiper);\r\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\r\n  swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);\r\n  if (params.cssMode) {\r\n    swiper.onScroll = onScroll.bind(swiper);\r\n  }\r\n  swiper.onClick = onClick.bind(swiper);\r\n  swiper.onLoad = onLoad.bind(swiper);\r\n  events(swiper, 'on');\r\n}\r\nfunction detachEvents() {\r\n  const swiper = this;\r\n  events(swiper, 'off');\r\n}\r\nvar events$1 = {\r\n  attachEvents,\r\n  detachEvents\r\n};\r\n\r\nconst isGridEnabled = (swiper, params) => {\r\n  return swiper.grid && params.grid && params.grid.rows > 1;\r\n};\r\nfunction setBreakpoint() {\r\n  const swiper = this;\r\n  const {\r\n    realIndex,\r\n    initialized,\r\n    params,\r\n    el\r\n  } = swiper;\r\n  const breakpoints = params.breakpoints;\r\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;\r\n\r\n  // Get breakpoint for window width and update parameters\r\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\r\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\r\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\r\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\r\n  const wasMultiRow = isGridEnabled(swiper, params);\r\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\r\n  const wasGrabCursor = swiper.params.grabCursor;\r\n  const isGrabCursor = breakpointParams.grabCursor;\r\n  const wasEnabled = params.enabled;\r\n  if (wasMultiRow && !isMultiRow) {\r\n    el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\r\n    swiper.emitContainerClasses();\r\n  } else if (!wasMultiRow && isMultiRow) {\r\n    el.classList.add(`${params.containerModifierClass}grid`);\r\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\r\n      el.classList.add(`${params.containerModifierClass}grid-column`);\r\n    }\r\n    swiper.emitContainerClasses();\r\n  }\r\n  if (wasGrabCursor && !isGrabCursor) {\r\n    swiper.unsetGrabCursor();\r\n  } else if (!wasGrabCursor && isGrabCursor) {\r\n    swiper.setGrabCursor();\r\n  }\r\n\r\n  // Toggle navigation, pagination, scrollbar\r\n  ['navigation', 'pagination', 'scrollbar'].forEach(prop => {\r\n    if (typeof breakpointParams[prop] === 'undefined') return;\r\n    const wasModuleEnabled = params[prop] && params[prop].enabled;\r\n    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\r\n    if (wasModuleEnabled && !isModuleEnabled) {\r\n      swiper[prop].disable();\r\n    }\r\n    if (!wasModuleEnabled && isModuleEnabled) {\r\n      swiper[prop].enable();\r\n    }\r\n  });\r\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\r\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\r\n  const wasLoop = params.loop;\r\n  if (directionChanged && initialized) {\r\n    swiper.changeDirection();\r\n  }\r\n  (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(swiper.params, breakpointParams);\r\n  const isEnabled = swiper.params.enabled;\r\n  const hasLoop = swiper.params.loop;\r\n  Object.assign(swiper, {\r\n    allowTouchMove: swiper.params.allowTouchMove,\r\n    allowSlideNext: swiper.params.allowSlideNext,\r\n    allowSlidePrev: swiper.params.allowSlidePrev\r\n  });\r\n  if (wasEnabled && !isEnabled) {\r\n    swiper.disable();\r\n  } else if (!wasEnabled && isEnabled) {\r\n    swiper.enable();\r\n  }\r\n  swiper.currentBreakpoint = breakpoint;\r\n  swiper.emit('_beforeBreakpoint', breakpointParams);\r\n  if (initialized) {\r\n    if (needsReLoop) {\r\n      swiper.loopDestroy();\r\n      swiper.loopCreate(realIndex);\r\n      swiper.updateSlides();\r\n    } else if (!wasLoop && hasLoop) {\r\n      swiper.loopCreate(realIndex);\r\n      swiper.updateSlides();\r\n    } else if (wasLoop && !hasLoop) {\r\n      swiper.loopDestroy();\r\n    }\r\n  }\r\n  swiper.emit('breakpoint', breakpointParams);\r\n}\r\n\r\nfunction getBreakpoint(breakpoints, base, containerEl) {\r\n  if (base === void 0) {\r\n    base = 'window';\r\n  }\r\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\r\n  let breakpoint = false;\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\r\n  const points = Object.keys(breakpoints).map(point => {\r\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\r\n      const minRatio = parseFloat(point.substr(1));\r\n      const value = currentHeight * minRatio;\r\n      return {\r\n        value,\r\n        point\r\n      };\r\n    }\r\n    return {\r\n      value: point,\r\n      point\r\n    };\r\n  });\r\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\r\n  for (let i = 0; i < points.length; i += 1) {\r\n    const {\r\n      point,\r\n      value\r\n    } = points[i];\r\n    if (base === 'window') {\r\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\r\n        breakpoint = point;\r\n      }\r\n    } else if (value <= containerEl.clientWidth) {\r\n      breakpoint = point;\r\n    }\r\n  }\r\n  return breakpoint || 'max';\r\n}\r\n\r\nvar breakpoints = {\r\n  setBreakpoint,\r\n  getBreakpoint\r\n};\r\n\r\nfunction prepareClasses(entries, prefix) {\r\n  const resultClasses = [];\r\n  entries.forEach(item => {\r\n    if (typeof item === 'object') {\r\n      Object.keys(item).forEach(classNames => {\r\n        if (item[classNames]) {\r\n          resultClasses.push(prefix + classNames);\r\n        }\r\n      });\r\n    } else if (typeof item === 'string') {\r\n      resultClasses.push(prefix + item);\r\n    }\r\n  });\r\n  return resultClasses;\r\n}\r\nfunction addClasses() {\r\n  const swiper = this;\r\n  const {\r\n    classNames,\r\n    params,\r\n    rtl,\r\n    el,\r\n    device\r\n  } = swiper;\r\n  // prettier-ignore\r\n  const suffixes = prepareClasses(['initialized', params.direction, {\r\n    'free-mode': swiper.params.freeMode && params.freeMode.enabled\r\n  }, {\r\n    'autoheight': params.autoHeight\r\n  }, {\r\n    'rtl': rtl\r\n  }, {\r\n    'grid': params.grid && params.grid.rows > 1\r\n  }, {\r\n    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\r\n  }, {\r\n    'android': device.android\r\n  }, {\r\n    'ios': device.ios\r\n  }, {\r\n    'css-mode': params.cssMode\r\n  }, {\r\n    'centered': params.cssMode && params.centeredSlides\r\n  }, {\r\n    'watch-progress': params.watchSlidesProgress\r\n  }], params.containerModifierClass);\r\n  classNames.push(...suffixes);\r\n  el.classList.add(...classNames);\r\n  swiper.emitContainerClasses();\r\n}\r\n\r\nfunction removeClasses() {\r\n  const swiper = this;\r\n  const {\r\n    el,\r\n    classNames\r\n  } = swiper;\r\n  if (!el || typeof el === 'string') return;\r\n  el.classList.remove(...classNames);\r\n  swiper.emitContainerClasses();\r\n}\r\n\r\nvar classes = {\r\n  addClasses,\r\n  removeClasses\r\n};\r\n\r\nfunction checkOverflow() {\r\n  const swiper = this;\r\n  const {\r\n    isLocked: wasLocked,\r\n    params\r\n  } = swiper;\r\n  const {\r\n    slidesOffsetBefore\r\n  } = params;\r\n  if (slidesOffsetBefore) {\r\n    const lastSlideIndex = swiper.slides.length - 1;\r\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\r\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\r\n  } else {\r\n    swiper.isLocked = swiper.snapGrid.length === 1;\r\n  }\r\n  if (params.allowSlideNext === true) {\r\n    swiper.allowSlideNext = !swiper.isLocked;\r\n  }\r\n  if (params.allowSlidePrev === true) {\r\n    swiper.allowSlidePrev = !swiper.isLocked;\r\n  }\r\n  if (wasLocked && wasLocked !== swiper.isLocked) {\r\n    swiper.isEnd = false;\r\n  }\r\n  if (wasLocked !== swiper.isLocked) {\r\n    swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\r\n  }\r\n}\r\nvar checkOverflow$1 = {\r\n  checkOverflow\r\n};\r\n\r\nvar defaults = {\r\n  init: true,\r\n  direction: 'horizontal',\r\n  oneWayMovement: false,\r\n  swiperElementNodeName: 'SWIPER-CONTAINER',\r\n  touchEventsTarget: 'wrapper',\r\n  initialSlide: 0,\r\n  speed: 300,\r\n  cssMode: false,\r\n  updateOnWindowResize: true,\r\n  resizeObserver: true,\r\n  nested: false,\r\n  createElements: false,\r\n  eventsPrefix: 'swiper',\r\n  enabled: true,\r\n  focusableElements: 'input, select, option, textarea, button, video, label',\r\n  // Overrides\r\n  width: null,\r\n  height: null,\r\n  //\r\n  preventInteractionOnTransition: false,\r\n  // ssr\r\n  userAgent: null,\r\n  url: null,\r\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\r\n  edgeSwipeDetection: false,\r\n  edgeSwipeThreshold: 20,\r\n  // Autoheight\r\n  autoHeight: false,\r\n  // Set wrapper width\r\n  setWrapperSize: false,\r\n  // Virtual Translate\r\n  virtualTranslate: false,\r\n  // Effects\r\n  effect: 'slide',\r\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\r\n\r\n  // Breakpoints\r\n  breakpoints: undefined,\r\n  breakpointsBase: 'window',\r\n  // Slides grid\r\n  spaceBetween: 0,\r\n  slidesPerView: 1,\r\n  slidesPerGroup: 1,\r\n  slidesPerGroupSkip: 0,\r\n  slidesPerGroupAuto: false,\r\n  centeredSlides: false,\r\n  centeredSlidesBounds: false,\r\n  slidesOffsetBefore: 0,\r\n  // in px\r\n  slidesOffsetAfter: 0,\r\n  // in px\r\n  normalizeSlideIndex: true,\r\n  centerInsufficientSlides: false,\r\n  // Disable swiper and hide navigation when container not overflow\r\n  watchOverflow: true,\r\n  // Round length\r\n  roundLengths: false,\r\n  // Touches\r\n  touchRatio: 1,\r\n  touchAngle: 45,\r\n  simulateTouch: true,\r\n  shortSwipes: true,\r\n  longSwipes: true,\r\n  longSwipesRatio: 0.5,\r\n  longSwipesMs: 300,\r\n  followFinger: true,\r\n  allowTouchMove: true,\r\n  threshold: 5,\r\n  touchMoveStopPropagation: false,\r\n  touchStartPreventDefault: true,\r\n  touchStartForcePreventDefault: false,\r\n  touchReleaseOnEdges: false,\r\n  // Unique Navigation Elements\r\n  uniqueNavElements: true,\r\n  // Resistance\r\n  resistance: true,\r\n  resistanceRatio: 0.85,\r\n  // Progress\r\n  watchSlidesProgress: false,\r\n  // Cursor\r\n  grabCursor: false,\r\n  // Clicks\r\n  preventClicks: true,\r\n  preventClicksPropagation: true,\r\n  slideToClickedSlide: false,\r\n  // loop\r\n  loop: false,\r\n  loopAddBlankSlides: true,\r\n  loopAdditionalSlides: 0,\r\n  loopPreventsSliding: true,\r\n  // rewind\r\n  rewind: false,\r\n  // Swiping/no swiping\r\n  allowSlidePrev: true,\r\n  allowSlideNext: true,\r\n  swipeHandler: null,\r\n  // '.swipe-handler',\r\n  noSwiping: true,\r\n  noSwipingClass: 'swiper-no-swiping',\r\n  noSwipingSelector: null,\r\n  // Passive Listeners\r\n  passiveListeners: true,\r\n  maxBackfaceHiddenSlides: 10,\r\n  // NS\r\n  containerModifierClass: 'swiper-',\r\n  // NEW\r\n  slideClass: 'swiper-slide',\r\n  slideBlankClass: 'swiper-slide-blank',\r\n  slideActiveClass: 'swiper-slide-active',\r\n  slideVisibleClass: 'swiper-slide-visible',\r\n  slideFullyVisibleClass: 'swiper-slide-fully-visible',\r\n  slideNextClass: 'swiper-slide-next',\r\n  slidePrevClass: 'swiper-slide-prev',\r\n  wrapperClass: 'swiper-wrapper',\r\n  lazyPreloaderClass: 'swiper-lazy-preloader',\r\n  lazyPreloadPrevNext: 0,\r\n  // Callbacks\r\n  runCallbacksOnInit: true,\r\n  // Internals\r\n  _emitClasses: false\r\n};\r\n\r\nfunction moduleExtendParams(params, allModulesParams) {\r\n  return function extendParams(obj) {\r\n    if (obj === void 0) {\r\n      obj = {};\r\n    }\r\n    const moduleParamName = Object.keys(obj)[0];\r\n    const moduleParams = obj[moduleParamName];\r\n    if (typeof moduleParams !== 'object' || moduleParams === null) {\r\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(allModulesParams, obj);\r\n      return;\r\n    }\r\n    if (params[moduleParamName] === true) {\r\n      params[moduleParamName] = {\r\n        enabled: true\r\n      };\r\n    }\r\n    if (moduleParamName === 'navigation' && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {\r\n      params[moduleParamName].auto = true;\r\n    }\r\n    if (['pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {\r\n      params[moduleParamName].auto = true;\r\n    }\r\n    if (!(moduleParamName in params && 'enabled' in moduleParams)) {\r\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(allModulesParams, obj);\r\n      return;\r\n    }\r\n    if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\r\n      params[moduleParamName].enabled = true;\r\n    }\r\n    if (!params[moduleParamName]) params[moduleParamName] = {\r\n      enabled: false\r\n    };\r\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(allModulesParams, obj);\r\n  };\r\n}\r\n\r\n/* eslint no-param-reassign: \"off\" */\r\nconst prototypes = {\r\n  eventsEmitter,\r\n  update,\r\n  translate,\r\n  transition,\r\n  slide,\r\n  loop,\r\n  grabCursor,\r\n  events: events$1,\r\n  breakpoints,\r\n  checkOverflow: checkOverflow$1,\r\n  classes\r\n};\r\nconst extendedDefaults = {};\r\nclass Swiper {\r\n  constructor() {\r\n    let el;\r\n    let params;\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\r\n      params = args[0];\r\n    } else {\r\n      [el, params] = args;\r\n    }\r\n    if (!params) params = {};\r\n    params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)({}, params);\r\n    if (el && !params.el) params.el = el;\r\n    const document = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n    if (params.el && typeof params.el === 'string' && document.querySelectorAll(params.el).length > 1) {\r\n      const swipers = [];\r\n      document.querySelectorAll(params.el).forEach(containerEl => {\r\n        const newParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)({}, params, {\r\n          el: containerEl\r\n        });\r\n        swipers.push(new Swiper(newParams));\r\n      });\r\n      // eslint-disable-next-line no-constructor-return\r\n      return swipers;\r\n    }\r\n\r\n    // Swiper Instance\r\n    const swiper = this;\r\n    swiper.__swiper__ = true;\r\n    swiper.support = getSupport();\r\n    swiper.device = getDevice({\r\n      userAgent: params.userAgent\r\n    });\r\n    swiper.browser = getBrowser();\r\n    swiper.eventsListeners = {};\r\n    swiper.eventsAnyListeners = [];\r\n    swiper.modules = [...swiper.__modules__];\r\n    if (params.modules && Array.isArray(params.modules)) {\r\n      swiper.modules.push(...params.modules);\r\n    }\r\n    const allModulesParams = {};\r\n    swiper.modules.forEach(mod => {\r\n      mod({\r\n        params,\r\n        swiper,\r\n        extendParams: moduleExtendParams(params, allModulesParams),\r\n        on: swiper.on.bind(swiper),\r\n        once: swiper.once.bind(swiper),\r\n        off: swiper.off.bind(swiper),\r\n        emit: swiper.emit.bind(swiper)\r\n      });\r\n    });\r\n\r\n    // Extend defaults with modules params\r\n    const swiperParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)({}, defaults, allModulesParams);\r\n\r\n    // Extend defaults with passed params\r\n    swiper.params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)({}, swiperParams, extendedDefaults, params);\r\n    swiper.originalParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)({}, swiper.params);\r\n    swiper.passedParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)({}, params);\r\n\r\n    // add event listeners\r\n    if (swiper.params && swiper.params.on) {\r\n      Object.keys(swiper.params.on).forEach(eventName => {\r\n        swiper.on(eventName, swiper.params.on[eventName]);\r\n      });\r\n    }\r\n    if (swiper.params && swiper.params.onAny) {\r\n      swiper.onAny(swiper.params.onAny);\r\n    }\r\n\r\n    // Extend Swiper\r\n    Object.assign(swiper, {\r\n      enabled: swiper.params.enabled,\r\n      el,\r\n      // Classes\r\n      classNames: [],\r\n      // Slides\r\n      slides: [],\r\n      slidesGrid: [],\r\n      snapGrid: [],\r\n      slidesSizesGrid: [],\r\n      // isDirection\r\n      isHorizontal() {\r\n        return swiper.params.direction === 'horizontal';\r\n      },\r\n      isVertical() {\r\n        return swiper.params.direction === 'vertical';\r\n      },\r\n      // Indexes\r\n      activeIndex: 0,\r\n      realIndex: 0,\r\n      //\r\n      isBeginning: true,\r\n      isEnd: false,\r\n      // Props\r\n      translate: 0,\r\n      previousTranslate: 0,\r\n      progress: 0,\r\n      velocity: 0,\r\n      animating: false,\r\n      cssOverflowAdjustment() {\r\n        // Returns 0 unless `translate` is > 2**23\r\n        // Should be subtracted from css values to prevent overflow\r\n        return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;\r\n      },\r\n      // Locks\r\n      allowSlideNext: swiper.params.allowSlideNext,\r\n      allowSlidePrev: swiper.params.allowSlidePrev,\r\n      // Touch Events\r\n      touchEventsData: {\r\n        isTouched: undefined,\r\n        isMoved: undefined,\r\n        allowTouchCallbacks: undefined,\r\n        touchStartTime: undefined,\r\n        isScrolling: undefined,\r\n        currentTranslate: undefined,\r\n        startTranslate: undefined,\r\n        allowThresholdMove: undefined,\r\n        // Form elements to match\r\n        focusableElements: swiper.params.focusableElements,\r\n        // Last click time\r\n        lastClickTime: 0,\r\n        clickTimeout: undefined,\r\n        // Velocities\r\n        velocities: [],\r\n        allowMomentumBounce: undefined,\r\n        startMoving: undefined,\r\n        pointerId: null,\r\n        touchId: null\r\n      },\r\n      // Clicks\r\n      allowClick: true,\r\n      // Touches\r\n      allowTouchMove: swiper.params.allowTouchMove,\r\n      touches: {\r\n        startX: 0,\r\n        startY: 0,\r\n        currentX: 0,\r\n        currentY: 0,\r\n        diff: 0\r\n      },\r\n      // Images\r\n      imagesToLoad: [],\r\n      imagesLoaded: 0\r\n    });\r\n    swiper.emit('_swiper');\r\n\r\n    // Init\r\n    if (swiper.params.init) {\r\n      swiper.init();\r\n    }\r\n\r\n    // Return app instance\r\n    // eslint-disable-next-line no-constructor-return\r\n    return swiper;\r\n  }\r\n  getDirectionLabel(property) {\r\n    if (this.isHorizontal()) {\r\n      return property;\r\n    }\r\n    // prettier-ignore\r\n    return {\r\n      'width': 'height',\r\n      'margin-top': 'margin-left',\r\n      'margin-bottom ': 'margin-right',\r\n      'margin-left': 'margin-top',\r\n      'margin-right': 'margin-bottom',\r\n      'padding-left': 'padding-top',\r\n      'padding-right': 'padding-bottom',\r\n      'marginRight': 'marginBottom'\r\n    }[property];\r\n  }\r\n  getSlideIndex(slideEl) {\r\n    const {\r\n      slidesEl,\r\n      params\r\n    } = this;\r\n    const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\r\n    const firstSlideIndex = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(slides[0]);\r\n    return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(slideEl) - firstSlideIndex;\r\n  }\r\n  getSlideIndexByData(index) {\r\n    return this.getSlideIndex(this.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === index)[0]);\r\n  }\r\n  recalcSlides() {\r\n    const swiper = this;\r\n    const {\r\n      slidesEl,\r\n      params\r\n    } = swiper;\r\n    swiper.slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\r\n  }\r\n  enable() {\r\n    const swiper = this;\r\n    if (swiper.enabled) return;\r\n    swiper.enabled = true;\r\n    if (swiper.params.grabCursor) {\r\n      swiper.setGrabCursor();\r\n    }\r\n    swiper.emit('enable');\r\n  }\r\n  disable() {\r\n    const swiper = this;\r\n    if (!swiper.enabled) return;\r\n    swiper.enabled = false;\r\n    if (swiper.params.grabCursor) {\r\n      swiper.unsetGrabCursor();\r\n    }\r\n    swiper.emit('disable');\r\n  }\r\n  setProgress(progress, speed) {\r\n    const swiper = this;\r\n    progress = Math.min(Math.max(progress, 0), 1);\r\n    const min = swiper.minTranslate();\r\n    const max = swiper.maxTranslate();\r\n    const current = (max - min) * progress + min;\r\n    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\r\n    swiper.updateActiveIndex();\r\n    swiper.updateSlidesClasses();\r\n  }\r\n  emitContainerClasses() {\r\n    const swiper = this;\r\n    if (!swiper.params._emitClasses || !swiper.el) return;\r\n    const cls = swiper.el.className.split(' ').filter(className => {\r\n      return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\r\n    });\r\n    swiper.emit('_containerClasses', cls.join(' '));\r\n  }\r\n  getSlideClasses(slideEl) {\r\n    const swiper = this;\r\n    if (swiper.destroyed) return '';\r\n    return slideEl.className.split(' ').filter(className => {\r\n      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\r\n    }).join(' ');\r\n  }\r\n  emitSlidesClasses() {\r\n    const swiper = this;\r\n    if (!swiper.params._emitClasses || !swiper.el) return;\r\n    const updates = [];\r\n    swiper.slides.forEach(slideEl => {\r\n      const classNames = swiper.getSlideClasses(slideEl);\r\n      updates.push({\r\n        slideEl,\r\n        classNames\r\n      });\r\n      swiper.emit('_slideClass', slideEl, classNames);\r\n    });\r\n    swiper.emit('_slideClasses', updates);\r\n  }\r\n  slidesPerViewDynamic(view, exact) {\r\n    if (view === void 0) {\r\n      view = 'current';\r\n    }\r\n    if (exact === void 0) {\r\n      exact = false;\r\n    }\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      slides,\r\n      slidesGrid,\r\n      slidesSizesGrid,\r\n      size: swiperSize,\r\n      activeIndex\r\n    } = swiper;\r\n    let spv = 1;\r\n    if (typeof params.slidesPerView === 'number') return params.slidesPerView;\r\n    if (params.centeredSlides) {\r\n      let slideSize = slides[activeIndex] ? Math.ceil(slides[activeIndex].swiperSlideSize) : 0;\r\n      let breakLoop;\r\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\r\n        if (slides[i] && !breakLoop) {\r\n          slideSize += Math.ceil(slides[i].swiperSlideSize);\r\n          spv += 1;\r\n          if (slideSize > swiperSize) breakLoop = true;\r\n        }\r\n      }\r\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\r\n        if (slides[i] && !breakLoop) {\r\n          slideSize += slides[i].swiperSlideSize;\r\n          spv += 1;\r\n          if (slideSize > swiperSize) breakLoop = true;\r\n        }\r\n      }\r\n    } else {\r\n      // eslint-disable-next-line\r\n      if (view === 'current') {\r\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\r\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\r\n          if (slideInView) {\r\n            spv += 1;\r\n          }\r\n        }\r\n      } else {\r\n        // previous\r\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\r\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\r\n          if (slideInView) {\r\n            spv += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return spv;\r\n  }\r\n  update() {\r\n    const swiper = this;\r\n    if (!swiper || swiper.destroyed) return;\r\n    const {\r\n      snapGrid,\r\n      params\r\n    } = swiper;\r\n    // Breakpoints\r\n    if (params.breakpoints) {\r\n      swiper.setBreakpoint();\r\n    }\r\n    [...swiper.el.querySelectorAll('[loading=\"lazy\"]')].forEach(imageEl => {\r\n      if (imageEl.complete) {\r\n        processLazyPreloader(swiper, imageEl);\r\n      }\r\n    });\r\n    swiper.updateSize();\r\n    swiper.updateSlides();\r\n    swiper.updateProgress();\r\n    swiper.updateSlidesClasses();\r\n    function setTranslate() {\r\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\r\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\r\n      swiper.setTranslate(newTranslate);\r\n      swiper.updateActiveIndex();\r\n      swiper.updateSlidesClasses();\r\n    }\r\n    let translated;\r\n    if (params.freeMode && params.freeMode.enabled && !params.cssMode) {\r\n      setTranslate();\r\n      if (params.autoHeight) {\r\n        swiper.updateAutoHeight();\r\n      }\r\n    } else {\r\n      if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {\r\n        const slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;\r\n        translated = swiper.slideTo(slides.length - 1, 0, false, true);\r\n      } else {\r\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\r\n      }\r\n      if (!translated) {\r\n        setTranslate();\r\n      }\r\n    }\r\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\r\n      swiper.checkOverflow();\r\n    }\r\n    swiper.emit('update');\r\n  }\r\n  changeDirection(newDirection, needUpdate) {\r\n    if (needUpdate === void 0) {\r\n      needUpdate = true;\r\n    }\r\n    const swiper = this;\r\n    const currentDirection = swiper.params.direction;\r\n    if (!newDirection) {\r\n      // eslint-disable-next-line\r\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\r\n    }\r\n    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\r\n      return swiper;\r\n    }\r\n    swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`);\r\n    swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`);\r\n    swiper.emitContainerClasses();\r\n    swiper.params.direction = newDirection;\r\n    swiper.slides.forEach(slideEl => {\r\n      if (newDirection === 'vertical') {\r\n        slideEl.style.width = '';\r\n      } else {\r\n        slideEl.style.height = '';\r\n      }\r\n    });\r\n    swiper.emit('changeDirection');\r\n    if (needUpdate) swiper.update();\r\n    return swiper;\r\n  }\r\n  changeLanguageDirection(direction) {\r\n    const swiper = this;\r\n    if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;\r\n    swiper.rtl = direction === 'rtl';\r\n    swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;\r\n    if (swiper.rtl) {\r\n      swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);\r\n      swiper.el.dir = 'rtl';\r\n    } else {\r\n      swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);\r\n      swiper.el.dir = 'ltr';\r\n    }\r\n    swiper.update();\r\n  }\r\n  mount(element) {\r\n    const swiper = this;\r\n    if (swiper.mounted) return true;\r\n\r\n    // Find el\r\n    let el = element || swiper.params.el;\r\n    if (typeof el === 'string') {\r\n      el = document.querySelector(el);\r\n    }\r\n    if (!el) {\r\n      return false;\r\n    }\r\n    el.swiper = swiper;\r\n    if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === swiper.params.swiperElementNodeName.toUpperCase()) {\r\n      swiper.isElement = true;\r\n    }\r\n    const getWrapperSelector = () => {\r\n      return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\r\n    };\r\n    const getWrapper = () => {\r\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\r\n        const res = el.shadowRoot.querySelector(getWrapperSelector());\r\n        // Children needs to return slot items\r\n        return res;\r\n      }\r\n      return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(el, getWrapperSelector())[0];\r\n    };\r\n    // Find Wrapper\r\n    let wrapperEl = getWrapper();\r\n    if (!wrapperEl && swiper.params.createElements) {\r\n      wrapperEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)('div', swiper.params.wrapperClass);\r\n      el.append(wrapperEl);\r\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(el, `.${swiper.params.slideClass}`).forEach(slideEl => {\r\n        wrapperEl.append(slideEl);\r\n      });\r\n    }\r\n    Object.assign(swiper, {\r\n      el,\r\n      wrapperEl,\r\n      slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,\r\n      hostEl: swiper.isElement ? el.parentNode.host : el,\r\n      mounted: true,\r\n      // RTL\r\n      rtl: el.dir.toLowerCase() === 'rtl' || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(el, 'direction') === 'rtl',\r\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(el, 'direction') === 'rtl'),\r\n      wrongRTL: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(wrapperEl, 'display') === '-webkit-box'\r\n    });\r\n    return true;\r\n  }\r\n  init(el) {\r\n    const swiper = this;\r\n    if (swiper.initialized) return swiper;\r\n    const mounted = swiper.mount(el);\r\n    if (mounted === false) return swiper;\r\n    swiper.emit('beforeInit');\r\n\r\n    // Set breakpoint\r\n    if (swiper.params.breakpoints) {\r\n      swiper.setBreakpoint();\r\n    }\r\n\r\n    // Add Classes\r\n    swiper.addClasses();\r\n\r\n    // Update size\r\n    swiper.updateSize();\r\n\r\n    // Update slides\r\n    swiper.updateSlides();\r\n    if (swiper.params.watchOverflow) {\r\n      swiper.checkOverflow();\r\n    }\r\n\r\n    // Set Grab Cursor\r\n    if (swiper.params.grabCursor && swiper.enabled) {\r\n      swiper.setGrabCursor();\r\n    }\r\n\r\n    // Slide To Initial Slide\r\n    if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\r\n      swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);\r\n    } else {\r\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\r\n    }\r\n\r\n    // Create loop\r\n    if (swiper.params.loop) {\r\n      swiper.loopCreate();\r\n    }\r\n\r\n    // Attach events\r\n    swiper.attachEvents();\r\n    const lazyElements = [...swiper.el.querySelectorAll('[loading=\"lazy\"]')];\r\n    if (swiper.isElement) {\r\n      lazyElements.push(...swiper.hostEl.querySelectorAll('[loading=\"lazy\"]'));\r\n    }\r\n    lazyElements.forEach(imageEl => {\r\n      if (imageEl.complete) {\r\n        processLazyPreloader(swiper, imageEl);\r\n      } else {\r\n        imageEl.addEventListener('load', e => {\r\n          processLazyPreloader(swiper, e.target);\r\n        });\r\n      }\r\n    });\r\n    preload(swiper);\r\n\r\n    // Init Flag\r\n    swiper.initialized = true;\r\n    preload(swiper);\r\n\r\n    // Emit\r\n    swiper.emit('init');\r\n    swiper.emit('afterInit');\r\n    return swiper;\r\n  }\r\n  destroy(deleteInstance, cleanStyles) {\r\n    if (deleteInstance === void 0) {\r\n      deleteInstance = true;\r\n    }\r\n    if (cleanStyles === void 0) {\r\n      cleanStyles = true;\r\n    }\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      el,\r\n      wrapperEl,\r\n      slides\r\n    } = swiper;\r\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\r\n      return null;\r\n    }\r\n    swiper.emit('beforeDestroy');\r\n\r\n    // Init Flag\r\n    swiper.initialized = false;\r\n\r\n    // Detach events\r\n    swiper.detachEvents();\r\n\r\n    // Destroy loop\r\n    if (params.loop) {\r\n      swiper.loopDestroy();\r\n    }\r\n\r\n    // Cleanup styles\r\n    if (cleanStyles) {\r\n      swiper.removeClasses();\r\n      if (el && typeof el !== 'string') {\r\n        el.removeAttribute('style');\r\n      }\r\n      if (wrapperEl) {\r\n        wrapperEl.removeAttribute('style');\r\n      }\r\n      if (slides && slides.length) {\r\n        slides.forEach(slideEl => {\r\n          slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\r\n          slideEl.removeAttribute('style');\r\n          slideEl.removeAttribute('data-swiper-slide-index');\r\n        });\r\n      }\r\n    }\r\n    swiper.emit('destroy');\r\n\r\n    // Detach emitter events\r\n    Object.keys(swiper.eventsListeners).forEach(eventName => {\r\n      swiper.off(eventName);\r\n    });\r\n    if (deleteInstance !== false) {\r\n      if (swiper.el && typeof swiper.el !== 'string') {\r\n        swiper.el.swiper = null;\r\n      }\r\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(swiper);\r\n    }\r\n    swiper.destroyed = true;\r\n    return null;\r\n  }\r\n  static extendDefaults(newDefaults) {\r\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(extendedDefaults, newDefaults);\r\n  }\r\n  static get extendedDefaults() {\r\n    return extendedDefaults;\r\n  }\r\n  static get defaults() {\r\n    return defaults;\r\n  }\r\n  static installModule(mod) {\r\n    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\r\n    const modules = Swiper.prototype.__modules__;\r\n    if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\r\n      modules.push(mod);\r\n    }\r\n  }\r\n  static use(module) {\r\n    if (Array.isArray(module)) {\r\n      module.forEach(m => Swiper.installModule(m));\r\n      return Swiper;\r\n    }\r\n    Swiper.installModule(module);\r\n    return Swiper;\r\n  }\r\n}\r\nObject.keys(prototypes).forEach(prototypeGroup => {\r\n  Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\r\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\r\n  });\r\n});\r\nSwiper.use([Resize, Observer]);\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/swiper-core.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/update-on-virtual-data.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/shared/update-on-virtual-data.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getChangedParams),\n/* harmony export */   g: () => (/* binding */ getParams),\n/* harmony export */   m: () => (/* binding */ mountSwiper),\n/* harmony export */   u: () => (/* binding */ updateOnVirtualData)\n/* harmony export */ });\n/* harmony import */ var _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./update-swiper.mjs */ \"(ssr)/./node_modules/swiper/shared/update-swiper.mjs\");\n/* harmony import */ var _swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swiper-core.mjs */ \"(ssr)/./node_modules/swiper/shared/swiper-core.mjs\");\n\r\n\r\n\r\nfunction getParams(obj, splitEvents) {\r\n  if (obj === void 0) {\r\n    obj = {};\r\n  }\r\n  if (splitEvents === void 0) {\r\n    splitEvents = true;\r\n  }\r\n  const params = {\r\n    on: {}\r\n  };\r\n  const events = {};\r\n  const passedParams = {};\r\n  (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(params, _swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__.d);\r\n  params._emitClasses = true;\r\n  params.init = false;\r\n  const rest = {};\r\n  const allowedParams = _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.p.map(key => key.replace(/_/, ''));\r\n  const plainObj = Object.assign({}, obj);\r\n  Object.keys(plainObj).forEach(key => {\r\n    if (typeof obj[key] === 'undefined') return;\r\n    if (allowedParams.indexOf(key) >= 0) {\r\n      if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj[key])) {\r\n        params[key] = {};\r\n        passedParams[key] = {};\r\n        (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(params[key], obj[key]);\r\n        (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(passedParams[key], obj[key]);\r\n      } else {\r\n        params[key] = obj[key];\r\n        passedParams[key] = obj[key];\r\n      }\r\n    } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === 'function') {\r\n      if (splitEvents) {\r\n        events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\r\n      } else {\r\n        params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\r\n      }\r\n    } else {\r\n      rest[key] = obj[key];\r\n    }\r\n  });\r\n  ['navigation', 'pagination', 'scrollbar'].forEach(key => {\r\n    if (params[key] === true) params[key] = {};\r\n    if (params[key] === false) delete params[key];\r\n  });\r\n  return {\r\n    params,\r\n    passedParams,\r\n    rest,\r\n    events\r\n  };\r\n}\r\n\r\nfunction mountSwiper(_ref, swiperParams) {\r\n  let {\r\n    el,\r\n    nextEl,\r\n    prevEl,\r\n    paginationEl,\r\n    scrollbarEl,\r\n    swiper\r\n  } = _ref;\r\n  if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(swiperParams) && nextEl && prevEl) {\r\n    swiper.params.navigation.nextEl = nextEl;\r\n    swiper.originalParams.navigation.nextEl = nextEl;\r\n    swiper.params.navigation.prevEl = prevEl;\r\n    swiper.originalParams.navigation.prevEl = prevEl;\r\n  }\r\n  if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(swiperParams) && paginationEl) {\r\n    swiper.params.pagination.el = paginationEl;\r\n    swiper.originalParams.pagination.el = paginationEl;\r\n  }\r\n  if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(swiperParams) && scrollbarEl) {\r\n    swiper.params.scrollbar.el = scrollbarEl;\r\n    swiper.originalParams.scrollbar.el = scrollbarEl;\r\n  }\r\n  swiper.init(el);\r\n}\r\n\r\nfunction getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {\r\n  const keys = [];\r\n  if (!oldParams) return keys;\r\n  const addKey = key => {\r\n    if (keys.indexOf(key) < 0) keys.push(key);\r\n  };\r\n  if (children && oldChildren) {\r\n    const oldChildrenKeys = oldChildren.map(getKey);\r\n    const childrenKeys = children.map(getKey);\r\n    if (oldChildrenKeys.join('') !== childrenKeys.join('')) addKey('children');\r\n    if (oldChildren.length !== children.length) addKey('children');\r\n  }\r\n  const watchParams = _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.p.filter(key => key[0] === '_').map(key => key.replace(/_/, ''));\r\n  watchParams.forEach(key => {\r\n    if (key in swiperParams && key in oldParams) {\r\n      if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(swiperParams[key]) && (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(oldParams[key])) {\r\n        const newKeys = Object.keys(swiperParams[key]);\r\n        const oldKeys = Object.keys(oldParams[key]);\r\n        if (newKeys.length !== oldKeys.length) {\r\n          addKey(key);\r\n        } else {\r\n          newKeys.forEach(newKey => {\r\n            if (swiperParams[key][newKey] !== oldParams[key][newKey]) {\r\n              addKey(key);\r\n            }\r\n          });\r\n          oldKeys.forEach(oldKey => {\r\n            if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);\r\n          });\r\n        }\r\n      } else if (swiperParams[key] !== oldParams[key]) {\r\n        addKey(key);\r\n      }\r\n    }\r\n  });\r\n  return keys;\r\n}\r\n\r\nconst updateOnVirtualData = swiper => {\r\n  if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled) return;\r\n  swiper.updateSlides();\r\n  swiper.updateProgress();\r\n  swiper.updateSlidesClasses();\r\n  if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {\r\n    swiper.parallax.setTranslate();\r\n  }\r\n};\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC91cGRhdGUtb24tdmlydHVhbC1kYXRhLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBbUo7QUFDakc7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLHFEQUFNLFNBQVMsK0NBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlEQUFVO0FBQ2xDLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQSxVQUFVLHFEQUFRO0FBQ2xCO0FBQ0E7QUFDQSxRQUFRLHFEQUFNO0FBQ2QsUUFBUSxxREFBTTtBQUNkLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxrQkFBa0IscUJBQXFCLEVBQUUsY0FBYztBQUN2RCxRQUFRO0FBQ1IscUJBQXFCLHFCQUFxQixFQUFFLGNBQWM7QUFDMUQ7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osTUFBTSxxREFBZTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxREFBZTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFEQUFjO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpREFBVTtBQUNoQztBQUNBO0FBQ0EsVUFBVSxxREFBUSx1QkFBdUIscURBQVE7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3VwZGF0ZS1vbi12aXJ0dWFsLWRhdGEubWpzPzY4NzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZSBhcyBleHRlbmQsIHAgYXMgcGFyYW1zTGlzdCwgaSBhcyBpc09iamVjdCwgbiBhcyBuZWVkc05hdmlnYXRpb24sIGEgYXMgbmVlZHNQYWdpbmF0aW9uLCBiIGFzIG5lZWRzU2Nyb2xsYmFyIH0gZnJvbSAnLi91cGRhdGUtc3dpcGVyLm1qcyc7XHJcbmltcG9ydCB7IGQgYXMgZGVmYXVsdHMgfSBmcm9tICcuL3N3aXBlci1jb3JlLm1qcyc7XHJcblxyXG5mdW5jdGlvbiBnZXRQYXJhbXMob2JqLCBzcGxpdEV2ZW50cykge1xyXG4gIGlmIChvYmogPT09IHZvaWQgMCkge1xyXG4gICAgb2JqID0ge307XHJcbiAgfVxyXG4gIGlmIChzcGxpdEV2ZW50cyA9PT0gdm9pZCAwKSB7XHJcbiAgICBzcGxpdEV2ZW50cyA9IHRydWU7XHJcbiAgfVxyXG4gIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgIG9uOiB7fVxyXG4gIH07XHJcbiAgY29uc3QgZXZlbnRzID0ge307XHJcbiAgY29uc3QgcGFzc2VkUGFyYW1zID0ge307XHJcbiAgZXh0ZW5kKHBhcmFtcywgZGVmYXVsdHMpO1xyXG4gIHBhcmFtcy5fZW1pdENsYXNzZXMgPSB0cnVlO1xyXG4gIHBhcmFtcy5pbml0ID0gZmFsc2U7XHJcbiAgY29uc3QgcmVzdCA9IHt9O1xyXG4gIGNvbnN0IGFsbG93ZWRQYXJhbXMgPSBwYXJhbXNMaXN0Lm1hcChrZXkgPT4ga2V5LnJlcGxhY2UoL18vLCAnJykpO1xyXG4gIGNvbnN0IHBsYWluT2JqID0gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTtcclxuICBPYmplY3Qua2V5cyhwbGFpbk9iaikuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuICAgIGlmIChhbGxvd2VkUGFyYW1zLmluZGV4T2Yoa2V5KSA+PSAwKSB7XHJcbiAgICAgIGlmIChpc09iamVjdChvYmpba2V5XSkpIHtcclxuICAgICAgICBwYXJhbXNba2V5XSA9IHt9O1xyXG4gICAgICAgIHBhc3NlZFBhcmFtc1trZXldID0ge307XHJcbiAgICAgICAgZXh0ZW5kKHBhcmFtc1trZXldLCBvYmpba2V5XSk7XHJcbiAgICAgICAgZXh0ZW5kKHBhc3NlZFBhcmFtc1trZXldLCBvYmpba2V5XSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGFyYW1zW2tleV0gPSBvYmpba2V5XTtcclxuICAgICAgICBwYXNzZWRQYXJhbXNba2V5XSA9IG9ialtrZXldO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGtleS5zZWFyY2goL29uW0EtWl0vKSA9PT0gMCAmJiB0eXBlb2Ygb2JqW2tleV0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgaWYgKHNwbGl0RXZlbnRzKSB7XHJcbiAgICAgICAgZXZlbnRzW2Ake2tleVsyXS50b0xvd2VyQ2FzZSgpfSR7a2V5LnN1YnN0cigzKX1gXSA9IG9ialtrZXldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBhcmFtcy5vbltgJHtrZXlbMl0udG9Mb3dlckNhc2UoKX0ke2tleS5zdWJzdHIoMyl9YF0gPSBvYmpba2V5XTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzdFtrZXldID0gb2JqW2tleV07XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgaWYgKHBhcmFtc1trZXldID09PSB0cnVlKSBwYXJhbXNba2V5XSA9IHt9O1xyXG4gICAgaWYgKHBhcmFtc1trZXldID09PSBmYWxzZSkgZGVsZXRlIHBhcmFtc1trZXldO1xyXG4gIH0pO1xyXG4gIHJldHVybiB7XHJcbiAgICBwYXJhbXMsXHJcbiAgICBwYXNzZWRQYXJhbXMsXHJcbiAgICByZXN0LFxyXG4gICAgZXZlbnRzXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gbW91bnRTd2lwZXIoX3JlZiwgc3dpcGVyUGFyYW1zKSB7XHJcbiAgbGV0IHtcclxuICAgIGVsLFxyXG4gICAgbmV4dEVsLFxyXG4gICAgcHJldkVsLFxyXG4gICAgcGFnaW5hdGlvbkVsLFxyXG4gICAgc2Nyb2xsYmFyRWwsXHJcbiAgICBzd2lwZXJcclxuICB9ID0gX3JlZjtcclxuICBpZiAobmVlZHNOYXZpZ2F0aW9uKHN3aXBlclBhcmFtcykgJiYgbmV4dEVsICYmIHByZXZFbCkge1xyXG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5leHRFbCA9IG5leHRFbDtcclxuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLm5leHRFbCA9IG5leHRFbDtcclxuICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5wcmV2RWwgPSBwcmV2RWw7XHJcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMubmF2aWdhdGlvbi5wcmV2RWwgPSBwcmV2RWw7XHJcbiAgfVxyXG4gIGlmIChuZWVkc1BhZ2luYXRpb24oc3dpcGVyUGFyYW1zKSAmJiBwYWdpbmF0aW9uRWwpIHtcclxuICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCA9IHBhZ2luYXRpb25FbDtcclxuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLmVsID0gcGFnaW5hdGlvbkVsO1xyXG4gIH1cclxuICBpZiAobmVlZHNTY3JvbGxiYXIoc3dpcGVyUGFyYW1zKSAmJiBzY3JvbGxiYXJFbCkge1xyXG4gICAgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgPSBzY3JvbGxiYXJFbDtcclxuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5zY3JvbGxiYXIuZWwgPSBzY3JvbGxiYXJFbDtcclxuICB9XHJcbiAgc3dpcGVyLmluaXQoZWwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDaGFuZ2VkUGFyYW1zKHN3aXBlclBhcmFtcywgb2xkUGFyYW1zLCBjaGlsZHJlbiwgb2xkQ2hpbGRyZW4sIGdldEtleSkge1xyXG4gIGNvbnN0IGtleXMgPSBbXTtcclxuICBpZiAoIW9sZFBhcmFtcykgcmV0dXJuIGtleXM7XHJcbiAgY29uc3QgYWRkS2V5ID0ga2V5ID0+IHtcclxuICAgIGlmIChrZXlzLmluZGV4T2Yoa2V5KSA8IDApIGtleXMucHVzaChrZXkpO1xyXG4gIH07XHJcbiAgaWYgKGNoaWxkcmVuICYmIG9sZENoaWxkcmVuKSB7XHJcbiAgICBjb25zdCBvbGRDaGlsZHJlbktleXMgPSBvbGRDaGlsZHJlbi5tYXAoZ2V0S2V5KTtcclxuICAgIGNvbnN0IGNoaWxkcmVuS2V5cyA9IGNoaWxkcmVuLm1hcChnZXRLZXkpO1xyXG4gICAgaWYgKG9sZENoaWxkcmVuS2V5cy5qb2luKCcnKSAhPT0gY2hpbGRyZW5LZXlzLmpvaW4oJycpKSBhZGRLZXkoJ2NoaWxkcmVuJyk7XHJcbiAgICBpZiAob2xkQ2hpbGRyZW4ubGVuZ3RoICE9PSBjaGlsZHJlbi5sZW5ndGgpIGFkZEtleSgnY2hpbGRyZW4nKTtcclxuICB9XHJcbiAgY29uc3Qgd2F0Y2hQYXJhbXMgPSBwYXJhbXNMaXN0LmZpbHRlcihrZXkgPT4ga2V5WzBdID09PSAnXycpLm1hcChrZXkgPT4ga2V5LnJlcGxhY2UoL18vLCAnJykpO1xyXG4gIHdhdGNoUGFyYW1zLmZvckVhY2goa2V5ID0+IHtcclxuICAgIGlmIChrZXkgaW4gc3dpcGVyUGFyYW1zICYmIGtleSBpbiBvbGRQYXJhbXMpIHtcclxuICAgICAgaWYgKGlzT2JqZWN0KHN3aXBlclBhcmFtc1trZXldKSAmJiBpc09iamVjdChvbGRQYXJhbXNba2V5XSkpIHtcclxuICAgICAgICBjb25zdCBuZXdLZXlzID0gT2JqZWN0LmtleXMoc3dpcGVyUGFyYW1zW2tleV0pO1xyXG4gICAgICAgIGNvbnN0IG9sZEtleXMgPSBPYmplY3Qua2V5cyhvbGRQYXJhbXNba2V5XSk7XHJcbiAgICAgICAgaWYgKG5ld0tleXMubGVuZ3RoICE9PSBvbGRLZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgYWRkS2V5KGtleSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG5ld0tleXMuZm9yRWFjaChuZXdLZXkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc3dpcGVyUGFyYW1zW2tleV1bbmV3S2V5XSAhPT0gb2xkUGFyYW1zW2tleV1bbmV3S2V5XSkge1xyXG4gICAgICAgICAgICAgIGFkZEtleShrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIG9sZEtleXMuZm9yRWFjaChvbGRLZXkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc3dpcGVyUGFyYW1zW2tleV1bb2xkS2V5XSAhPT0gb2xkUGFyYW1zW2tleV1bb2xkS2V5XSkgYWRkS2V5KGtleSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyUGFyYW1zW2tleV0gIT09IG9sZFBhcmFtc1trZXldKSB7XHJcbiAgICAgICAgYWRkS2V5KGtleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4ga2V5cztcclxufVxyXG5cclxuY29uc3QgdXBkYXRlT25WaXJ0dWFsRGF0YSA9IHN3aXBlciA9PiB7XHJcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcy52aXJ0dWFsIHx8IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiAhc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcclxuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XHJcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XHJcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcclxuICBpZiAoc3dpcGVyLnBhcmFsbGF4ICYmIHN3aXBlci5wYXJhbXMucGFyYWxsYXggJiYgc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSB7XHJcbiAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgZ2V0Q2hhbmdlZFBhcmFtcyBhcyBhLCBnZXRQYXJhbXMgYXMgZywgbW91bnRTd2lwZXIgYXMgbSwgdXBkYXRlT25WaXJ0dWFsRGF0YSBhcyB1IH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/update-on-virtual-data.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/update-swiper.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/update-swiper.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ needsPagination),\n/* harmony export */   b: () => (/* binding */ needsScrollbar),\n/* harmony export */   c: () => (/* binding */ attrToProp),\n/* harmony export */   d: () => (/* binding */ uniqueClasses),\n/* harmony export */   e: () => (/* binding */ extend),\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   n: () => (/* binding */ needsNavigation),\n/* harmony export */   p: () => (/* binding */ paramsList),\n/* harmony export */   u: () => (/* binding */ updateSwiper),\n/* harmony export */   w: () => (/* binding */ wrapperClass)\n/* harmony export */ });\n/* underscore in name -> watch for changes */\r\nconst paramsList = ['eventsPrefix', 'injectStyles', 'injectStylesUrls', 'modules', 'init', '_direction', 'oneWayMovement', 'swiperElementNodeName', 'touchEventsTarget', 'initialSlide', '_speed', 'cssMode', 'updateOnWindowResize', 'resizeObserver', 'nested', 'focusableElements', '_enabled', '_width', '_height', 'preventInteractionOnTransition', 'userAgent', 'url', '_edgeSwipeDetection', '_edgeSwipeThreshold', '_freeMode', '_autoHeight', 'setWrapperSize', 'virtualTranslate', '_effect', 'breakpoints', 'breakpointsBase', '_spaceBetween', '_slidesPerView', 'maxBackfaceHiddenSlides', '_grid', '_slidesPerGroup', '_slidesPerGroupSkip', '_slidesPerGroupAuto', '_centeredSlides', '_centeredSlidesBounds', '_slidesOffsetBefore', '_slidesOffsetAfter', 'normalizeSlideIndex', '_centerInsufficientSlides', '_watchOverflow', 'roundLengths', 'touchRatio', 'touchAngle', 'simulateTouch', '_shortSwipes', '_longSwipes', 'longSwipesRatio', 'longSwipesMs', '_followFinger', 'allowTouchMove', '_threshold', 'touchMoveStopPropagation', 'touchStartPreventDefault', 'touchStartForcePreventDefault', 'touchReleaseOnEdges', 'uniqueNavElements', '_resistance', '_resistanceRatio', '_watchSlidesProgress', '_grabCursor', 'preventClicks', 'preventClicksPropagation', '_slideToClickedSlide', '_loop', 'loopAdditionalSlides', 'loopAddBlankSlides', 'loopPreventsSliding', '_rewind', '_allowSlidePrev', '_allowSlideNext', '_swipeHandler', '_noSwiping', 'noSwipingClass', 'noSwipingSelector', 'passiveListeners', 'containerModifierClass', 'slideClass', 'slideActiveClass', 'slideVisibleClass', 'slideFullyVisibleClass', 'slideNextClass', 'slidePrevClass', 'slideBlankClass', 'wrapperClass', 'lazyPreloaderClass', 'lazyPreloadPrevNext', 'runCallbacksOnInit', 'observer', 'observeParents', 'observeSlideChildren',\r\n// modules\r\n'a11y', '_autoplay', '_controller', 'coverflowEffect', 'cubeEffect', 'fadeEffect', 'flipEffect', 'creativeEffect', 'cardsEffect', 'hashNavigation', 'history', 'keyboard', 'mousewheel', '_navigation', '_pagination', 'parallax', '_scrollbar', '_thumbs', 'virtual', 'zoom', 'control'];\r\n\r\nfunction isObject(o) {\r\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object' && !o.__swiper__;\r\n}\r\nfunction extend(target, src) {\r\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\r\n  Object.keys(src).filter(key => noExtend.indexOf(key) < 0).forEach(key => {\r\n    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\r\n      if (src[key].__swiper__) target[key] = src[key];else extend(target[key], src[key]);\r\n    } else {\r\n      target[key] = src[key];\r\n    }\r\n  });\r\n}\r\nfunction needsNavigation(params) {\r\n  if (params === void 0) {\r\n    params = {};\r\n  }\r\n  return params.navigation && typeof params.navigation.nextEl === 'undefined' && typeof params.navigation.prevEl === 'undefined';\r\n}\r\nfunction needsPagination(params) {\r\n  if (params === void 0) {\r\n    params = {};\r\n  }\r\n  return params.pagination && typeof params.pagination.el === 'undefined';\r\n}\r\nfunction needsScrollbar(params) {\r\n  if (params === void 0) {\r\n    params = {};\r\n  }\r\n  return params.scrollbar && typeof params.scrollbar.el === 'undefined';\r\n}\r\nfunction uniqueClasses(classNames) {\r\n  if (classNames === void 0) {\r\n    classNames = '';\r\n  }\r\n  const classes = classNames.split(' ').map(c => c.trim()).filter(c => !!c);\r\n  const unique = [];\r\n  classes.forEach(c => {\r\n    if (unique.indexOf(c) < 0) unique.push(c);\r\n  });\r\n  return unique.join(' ');\r\n}\r\nfunction attrToProp(attrName) {\r\n  if (attrName === void 0) {\r\n    attrName = '';\r\n  }\r\n  return attrName.replace(/-[a-z]/g, l => l.toUpperCase().replace('-', ''));\r\n}\r\nfunction wrapperClass(className) {\r\n  if (className === void 0) {\r\n    className = '';\r\n  }\r\n  if (!className) return 'swiper-wrapper';\r\n  if (!className.includes('swiper-wrapper')) return `swiper-wrapper ${className}`;\r\n  return className;\r\n}\r\n\r\nfunction updateSwiper(_ref) {\r\n  let {\r\n    swiper,\r\n    slides,\r\n    passedParams,\r\n    changedParams,\r\n    nextEl,\r\n    prevEl,\r\n    scrollbarEl,\r\n    paginationEl\r\n  } = _ref;\r\n  const updateParams = changedParams.filter(key => key !== 'children' && key !== 'direction' && key !== 'wrapperClass');\r\n  const {\r\n    params: currentParams,\r\n    pagination,\r\n    navigation,\r\n    scrollbar,\r\n    virtual,\r\n    thumbs\r\n  } = swiper;\r\n  let needThumbsInit;\r\n  let needControllerInit;\r\n  let needPaginationInit;\r\n  let needScrollbarInit;\r\n  let needNavigationInit;\r\n  let loopNeedDestroy;\r\n  let loopNeedEnable;\r\n  let loopNeedReloop;\r\n  if (changedParams.includes('thumbs') && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {\r\n    needThumbsInit = true;\r\n  }\r\n  if (changedParams.includes('controller') && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\r\n    needControllerInit = true;\r\n  }\r\n  if (changedParams.includes('pagination') && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\r\n    needPaginationInit = true;\r\n  }\r\n  if (changedParams.includes('scrollbar') && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\r\n    needScrollbarInit = true;\r\n  }\r\n  if (changedParams.includes('navigation') && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\r\n    needNavigationInit = true;\r\n  }\r\n  const destroyModule = mod => {\r\n    if (!swiper[mod]) return;\r\n    swiper[mod].destroy();\r\n    if (mod === 'navigation') {\r\n      if (swiper.isElement) {\r\n        swiper[mod].prevEl.remove();\r\n        swiper[mod].nextEl.remove();\r\n      }\r\n      currentParams[mod].prevEl = undefined;\r\n      currentParams[mod].nextEl = undefined;\r\n      swiper[mod].prevEl = undefined;\r\n      swiper[mod].nextEl = undefined;\r\n    } else {\r\n      if (swiper.isElement) {\r\n        swiper[mod].el.remove();\r\n      }\r\n      currentParams[mod].el = undefined;\r\n      swiper[mod].el = undefined;\r\n    }\r\n  };\r\n  if (changedParams.includes('loop') && swiper.isElement) {\r\n    if (currentParams.loop && !passedParams.loop) {\r\n      loopNeedDestroy = true;\r\n    } else if (!currentParams.loop && passedParams.loop) {\r\n      loopNeedEnable = true;\r\n    } else {\r\n      loopNeedReloop = true;\r\n    }\r\n  }\r\n  updateParams.forEach(key => {\r\n    if (isObject(currentParams[key]) && isObject(passedParams[key])) {\r\n      Object.assign(currentParams[key], passedParams[key]);\r\n      if ((key === 'navigation' || key === 'pagination' || key === 'scrollbar') && 'enabled' in passedParams[key] && !passedParams[key].enabled) {\r\n        destroyModule(key);\r\n      }\r\n    } else {\r\n      const newValue = passedParams[key];\r\n      if ((newValue === true || newValue === false) && (key === 'navigation' || key === 'pagination' || key === 'scrollbar')) {\r\n        if (newValue === false) {\r\n          destroyModule(key);\r\n        }\r\n      } else {\r\n        currentParams[key] = passedParams[key];\r\n      }\r\n    }\r\n  });\r\n  if (updateParams.includes('controller') && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\r\n    swiper.controller.control = currentParams.controller.control;\r\n  }\r\n  if (changedParams.includes('children') && slides && virtual && currentParams.virtual.enabled) {\r\n    virtual.slides = slides;\r\n    virtual.update(true);\r\n  } else if (changedParams.includes('virtual') && virtual && currentParams.virtual.enabled) {\r\n    if (slides) virtual.slides = slides;\r\n    virtual.update(true);\r\n  }\r\n  if (changedParams.includes('children') && slides && currentParams.loop) {\r\n    loopNeedReloop = true;\r\n  }\r\n  if (needThumbsInit) {\r\n    const initialized = thumbs.init();\r\n    if (initialized) thumbs.update(true);\r\n  }\r\n  if (needControllerInit) {\r\n    swiper.controller.control = currentParams.controller.control;\r\n  }\r\n  if (needPaginationInit) {\r\n    if (swiper.isElement && (!paginationEl || typeof paginationEl === 'string')) {\r\n      paginationEl = document.createElement('div');\r\n      paginationEl.classList.add('swiper-pagination');\r\n      paginationEl.part.add('pagination');\r\n      swiper.el.appendChild(paginationEl);\r\n    }\r\n    if (paginationEl) currentParams.pagination.el = paginationEl;\r\n    pagination.init();\r\n    pagination.render();\r\n    pagination.update();\r\n  }\r\n  if (needScrollbarInit) {\r\n    if (swiper.isElement && (!scrollbarEl || typeof scrollbarEl === 'string')) {\r\n      scrollbarEl = document.createElement('div');\r\n      scrollbarEl.classList.add('swiper-scrollbar');\r\n      scrollbarEl.part.add('scrollbar');\r\n      swiper.el.appendChild(scrollbarEl);\r\n    }\r\n    if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;\r\n    scrollbar.init();\r\n    scrollbar.updateSize();\r\n    scrollbar.setTranslate();\r\n  }\r\n  if (needNavigationInit) {\r\n    if (swiper.isElement) {\r\n      if (!nextEl || typeof nextEl === 'string') {\r\n        nextEl = document.createElement('div');\r\n        nextEl.classList.add('swiper-button-next');\r\n        nextEl.innerHTML = swiper.hostEl.constructor.nextButtonSvg;\r\n        nextEl.part.add('button-next');\r\n        swiper.el.appendChild(nextEl);\r\n      }\r\n      if (!prevEl || typeof prevEl === 'string') {\r\n        prevEl = document.createElement('div');\r\n        prevEl.classList.add('swiper-button-prev');\r\n        prevEl.innerHTML = swiper.hostEl.constructor.prevButtonSvg;\r\n        prevEl.part.add('button-prev');\r\n        swiper.el.appendChild(prevEl);\r\n      }\r\n    }\r\n    if (nextEl) currentParams.navigation.nextEl = nextEl;\r\n    if (prevEl) currentParams.navigation.prevEl = prevEl;\r\n    navigation.init();\r\n    navigation.update();\r\n  }\r\n  if (changedParams.includes('allowSlideNext')) {\r\n    swiper.allowSlideNext = passedParams.allowSlideNext;\r\n  }\r\n  if (changedParams.includes('allowSlidePrev')) {\r\n    swiper.allowSlidePrev = passedParams.allowSlidePrev;\r\n  }\r\n  if (changedParams.includes('direction')) {\r\n    swiper.changeDirection(passedParams.direction, false);\r\n  }\r\n  if (loopNeedDestroy || loopNeedReloop) {\r\n    swiper.loopDestroy();\r\n  }\r\n  if (loopNeedEnable || loopNeedReloop) {\r\n    swiper.loopCreate();\r\n  }\r\n  swiper.update();\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/update-swiper.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/utils.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/shared/utils.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ elementParents),\n/* harmony export */   b: () => (/* binding */ elementOffset),\n/* harmony export */   c: () => (/* binding */ createElement),\n/* harmony export */   d: () => (/* binding */ now),\n/* harmony export */   e: () => (/* binding */ elementChildren),\n/* harmony export */   f: () => (/* binding */ elementOuterSize),\n/* harmony export */   g: () => (/* binding */ getSlideTransformEl),\n/* harmony export */   h: () => (/* binding */ elementIndex),\n/* harmony export */   i: () => (/* binding */ classesToTokens),\n/* harmony export */   j: () => (/* binding */ getTranslate),\n/* harmony export */   k: () => (/* binding */ elementTransitionEnd),\n/* harmony export */   l: () => (/* binding */ isObject),\n/* harmony export */   m: () => (/* binding */ makeElementsArray),\n/* harmony export */   n: () => (/* binding */ nextTick),\n/* harmony export */   o: () => (/* binding */ getRotateFix),\n/* harmony export */   p: () => (/* binding */ elementStyle),\n/* harmony export */   q: () => (/* binding */ elementNextAll),\n/* harmony export */   r: () => (/* binding */ elementPrevAll),\n/* harmony export */   s: () => (/* binding */ setCSSProperty),\n/* harmony export */   t: () => (/* binding */ animateCSSModeScroll),\n/* harmony export */   u: () => (/* binding */ showWarning),\n/* harmony export */   v: () => (/* binding */ elementIsChildOf),\n/* harmony export */   w: () => (/* binding */ extend),\n/* harmony export */   x: () => (/* binding */ deleteProps)\n/* harmony export */ });\n/* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\r\n\r\nfunction classesToTokens(classes) {\r\n  if (classes === void 0) {\r\n    classes = '';\r\n  }\r\n  return classes.trim().split(' ').filter(c => !!c.trim());\r\n}\r\n\r\nfunction deleteProps(obj) {\r\n  const object = obj;\r\n  Object.keys(object).forEach(key => {\r\n    try {\r\n      object[key] = null;\r\n    } catch (e) {\r\n      // no getter for object\r\n    }\r\n    try {\r\n      delete object[key];\r\n    } catch (e) {\r\n      // something got wrong\r\n    }\r\n  });\r\n}\r\nfunction nextTick(callback, delay) {\r\n  if (delay === void 0) {\r\n    delay = 0;\r\n  }\r\n  return setTimeout(callback, delay);\r\n}\r\nfunction now() {\r\n  return Date.now();\r\n}\r\nfunction getComputedStyle(el) {\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  let style;\r\n  if (window.getComputedStyle) {\r\n    style = window.getComputedStyle(el, null);\r\n  }\r\n  if (!style && el.currentStyle) {\r\n    style = el.currentStyle;\r\n  }\r\n  if (!style) {\r\n    style = el.style;\r\n  }\r\n  return style;\r\n}\r\nfunction getTranslate(el, axis) {\r\n  if (axis === void 0) {\r\n    axis = 'x';\r\n  }\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  let matrix;\r\n  let curTransform;\r\n  let transformMatrix;\r\n  const curStyle = getComputedStyle(el);\r\n  if (window.WebKitCSSMatrix) {\r\n    curTransform = curStyle.transform || curStyle.webkitTransform;\r\n    if (curTransform.split(',').length > 6) {\r\n      curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\r\n    }\r\n    // Some old versions of Webkit choke when 'none' is passed; pass\r\n    // empty string instead in this case\r\n    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\r\n  } else {\r\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\r\n    matrix = transformMatrix.toString().split(',');\r\n  }\r\n  if (axis === 'x') {\r\n    // Latest Chrome and webkits Fix\r\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;\r\n    // Crazy IE10 Matrix\r\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);\r\n    // Normal Browsers\r\n    else curTransform = parseFloat(matrix[4]);\r\n  }\r\n  if (axis === 'y') {\r\n    // Latest Chrome and webkits Fix\r\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;\r\n    // Crazy IE10 Matrix\r\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);\r\n    // Normal Browsers\r\n    else curTransform = parseFloat(matrix[5]);\r\n  }\r\n  return curTransform || 0;\r\n}\r\nfunction isObject(o) {\r\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\r\n}\r\nfunction isNode(node) {\r\n  // eslint-disable-next-line\r\n  if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\r\n    return node instanceof HTMLElement;\r\n  }\r\n  return node && (node.nodeType === 1 || node.nodeType === 11);\r\n}\r\nfunction extend() {\r\n  const to = Object(arguments.length <= 0 ? undefined : arguments[0]);\r\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\r\n  for (let i = 1; i < arguments.length; i += 1) {\r\n    const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\r\n    if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\r\n      const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\r\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\r\n        const nextKey = keysArray[nextIndex];\r\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\r\n        if (desc !== undefined && desc.enumerable) {\r\n          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\r\n            if (nextSource[nextKey].__swiper__) {\r\n              to[nextKey] = nextSource[nextKey];\r\n            } else {\r\n              extend(to[nextKey], nextSource[nextKey]);\r\n            }\r\n          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\r\n            to[nextKey] = {};\r\n            if (nextSource[nextKey].__swiper__) {\r\n              to[nextKey] = nextSource[nextKey];\r\n            } else {\r\n              extend(to[nextKey], nextSource[nextKey]);\r\n            }\r\n          } else {\r\n            to[nextKey] = nextSource[nextKey];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return to;\r\n}\r\nfunction setCSSProperty(el, varName, varValue) {\r\n  el.style.setProperty(varName, varValue);\r\n}\r\nfunction animateCSSModeScroll(_ref) {\r\n  let {\r\n    swiper,\r\n    targetPosition,\r\n    side\r\n  } = _ref;\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  const startPosition = -swiper.translate;\r\n  let startTime = null;\r\n  let time;\r\n  const duration = swiper.params.speed;\r\n  swiper.wrapperEl.style.scrollSnapType = 'none';\r\n  window.cancelAnimationFrame(swiper.cssModeFrameID);\r\n  const dir = targetPosition > startPosition ? 'next' : 'prev';\r\n  const isOutOfBound = (current, target) => {\r\n    return dir === 'next' && current >= target || dir === 'prev' && current <= target;\r\n  };\r\n  const animate = () => {\r\n    time = new Date().getTime();\r\n    if (startTime === null) {\r\n      startTime = time;\r\n    }\r\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\r\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\r\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\r\n    if (isOutOfBound(currentPosition, targetPosition)) {\r\n      currentPosition = targetPosition;\r\n    }\r\n    swiper.wrapperEl.scrollTo({\r\n      [side]: currentPosition\r\n    });\r\n    if (isOutOfBound(currentPosition, targetPosition)) {\r\n      swiper.wrapperEl.style.overflow = 'hidden';\r\n      swiper.wrapperEl.style.scrollSnapType = '';\r\n      setTimeout(() => {\r\n        swiper.wrapperEl.style.overflow = '';\r\n        swiper.wrapperEl.scrollTo({\r\n          [side]: currentPosition\r\n        });\r\n      });\r\n      window.cancelAnimationFrame(swiper.cssModeFrameID);\r\n      return;\r\n    }\r\n    swiper.cssModeFrameID = window.requestAnimationFrame(animate);\r\n  };\r\n  animate();\r\n}\r\nfunction getSlideTransformEl(slideEl) {\r\n  return slideEl.querySelector('.swiper-slide-transform') || slideEl.shadowRoot && slideEl.shadowRoot.querySelector('.swiper-slide-transform') || slideEl;\r\n}\r\nfunction elementChildren(element, selector) {\r\n  if (selector === void 0) {\r\n    selector = '';\r\n  }\r\n  const children = [...element.children];\r\n  if (element instanceof HTMLSlotElement) {\r\n    children.push(...element.assignedElements());\r\n  }\r\n  if (!selector) {\r\n    return children;\r\n  }\r\n  return children.filter(el => el.matches(selector));\r\n}\r\nfunction elementIsChildOf(el, parent) {\r\n  const isChild = parent.contains(el);\r\n  if (!isChild && parent instanceof HTMLSlotElement) {\r\n    const children = [...parent.assignedElements()];\r\n    return children.includes(el);\r\n  }\r\n  return isChild;\r\n}\r\nfunction showWarning(text) {\r\n  try {\r\n    console.warn(text);\r\n    return;\r\n  } catch (err) {\r\n    // err\r\n  }\r\n}\r\nfunction createElement(tag, classes) {\r\n  if (classes === void 0) {\r\n    classes = [];\r\n  }\r\n  const el = document.createElement(tag);\r\n  el.classList.add(...(Array.isArray(classes) ? classes : classesToTokens(classes)));\r\n  return el;\r\n}\r\nfunction elementOffset(el) {\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  const document = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\r\n  const box = el.getBoundingClientRect();\r\n  const body = document.body;\r\n  const clientTop = el.clientTop || body.clientTop || 0;\r\n  const clientLeft = el.clientLeft || body.clientLeft || 0;\r\n  const scrollTop = el === window ? window.scrollY : el.scrollTop;\r\n  const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\r\n  return {\r\n    top: box.top + scrollTop - clientTop,\r\n    left: box.left + scrollLeft - clientLeft\r\n  };\r\n}\r\nfunction elementPrevAll(el, selector) {\r\n  const prevEls = [];\r\n  while (el.previousElementSibling) {\r\n    const prev = el.previousElementSibling; // eslint-disable-line\r\n    if (selector) {\r\n      if (prev.matches(selector)) prevEls.push(prev);\r\n    } else prevEls.push(prev);\r\n    el = prev;\r\n  }\r\n  return prevEls;\r\n}\r\nfunction elementNextAll(el, selector) {\r\n  const nextEls = [];\r\n  while (el.nextElementSibling) {\r\n    const next = el.nextElementSibling; // eslint-disable-line\r\n    if (selector) {\r\n      if (next.matches(selector)) nextEls.push(next);\r\n    } else nextEls.push(next);\r\n    el = next;\r\n  }\r\n  return nextEls;\r\n}\r\nfunction elementStyle(el, prop) {\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  return window.getComputedStyle(el, null).getPropertyValue(prop);\r\n}\r\nfunction elementIndex(el) {\r\n  let child = el;\r\n  let i;\r\n  if (child) {\r\n    i = 0;\r\n    // eslint-disable-next-line\r\n    while ((child = child.previousSibling) !== null) {\r\n      if (child.nodeType === 1) i += 1;\r\n    }\r\n    return i;\r\n  }\r\n  return undefined;\r\n}\r\nfunction elementParents(el, selector) {\r\n  const parents = []; // eslint-disable-line\r\n  let parent = el.parentElement; // eslint-disable-line\r\n  while (parent) {\r\n    if (selector) {\r\n      if (parent.matches(selector)) parents.push(parent);\r\n    } else {\r\n      parents.push(parent);\r\n    }\r\n    parent = parent.parentElement;\r\n  }\r\n  return parents;\r\n}\r\nfunction elementTransitionEnd(el, callback) {\r\n  function fireCallBack(e) {\r\n    if (e.target !== el) return;\r\n    callback.call(el, e);\r\n    el.removeEventListener('transitionend', fireCallBack);\r\n  }\r\n  if (callback) {\r\n    el.addEventListener('transitionend', fireCallBack);\r\n  }\r\n}\r\nfunction elementOuterSize(el, size, includeMargins) {\r\n  const window = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\r\n  if (includeMargins) {\r\n    return el[size === 'width' ? 'offsetWidth' : 'offsetHeight'] + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-right' : 'margin-top')) + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-left' : 'margin-bottom'));\r\n  }\r\n  return el.offsetWidth;\r\n}\r\nfunction makeElementsArray(el) {\r\n  return (Array.isArray(el) ? el : [el]).filter(e => !!e);\r\n}\r\nfunction getRotateFix(swiper) {\r\n  return v => {\r\n    if (Math.abs(v) > 0 && swiper.browser && swiper.browser.need3dFix && Math.abs(v) % 90 === 0) {\r\n      return v + 0.001;\r\n    }\r\n    return v;\r\n  };\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/swiper-react.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/swiper-react.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Swiper: () => (/* binding */ Swiper),\n/* harmony export */   SwiperSlide: () => (/* binding */ SwiperSlide),\n/* harmony export */   useSwiper: () => (/* binding */ useSwiper),\n/* harmony export */   useSwiperSlide: () => (/* binding */ useSwiperSlide)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/swiper-core.mjs */ \"(ssr)/./node_modules/swiper/shared/swiper-core.mjs\");\n/* harmony import */ var _shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/update-on-virtual-data.mjs */ \"(ssr)/./node_modules/swiper/shared/update-on-virtual-data.mjs\");\n/* harmony import */ var _shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/update-swiper.mjs */ \"(ssr)/./node_modules/swiper/shared/update-swiper.mjs\");\n/**\r\n * Swiper React 11.1.14\r\n * Most modern mobile touch slider and framework with hardware accelerated transitions\r\n * https://swiperjs.com\r\n *\r\n * Copyright 2014-2024 Vladimir Kharlampidi\r\n *\r\n * Released under the MIT License\r\n *\r\n * Released on: September 12, 2024\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _extends() {\r\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}\r\n\r\nfunction isChildSwiperSlide(child) {\r\n  return child.type && child.type.displayName && child.type.displayName.includes('SwiperSlide');\r\n}\r\nfunction processChildren(c) {\r\n  const slides = [];\r\n  react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(c).forEach(child => {\r\n    if (isChildSwiperSlide(child)) {\r\n      slides.push(child);\r\n    } else if (child.props && child.props.children) {\r\n      processChildren(child.props.children).forEach(slide => slides.push(slide));\r\n    }\r\n  });\r\n  return slides;\r\n}\r\nfunction getChildren(c) {\r\n  const slides = [];\r\n  const slots = {\r\n    'container-start': [],\r\n    'container-end': [],\r\n    'wrapper-start': [],\r\n    'wrapper-end': []\r\n  };\r\n  react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(c).forEach(child => {\r\n    if (isChildSwiperSlide(child)) {\r\n      slides.push(child);\r\n    } else if (child.props && child.props.slot && slots[child.props.slot]) {\r\n      slots[child.props.slot].push(child);\r\n    } else if (child.props && child.props.children) {\r\n      const foundSlides = processChildren(child.props.children);\r\n      if (foundSlides.length > 0) {\r\n        foundSlides.forEach(slide => slides.push(slide));\r\n      } else {\r\n        slots['container-end'].push(child);\r\n      }\r\n    } else {\r\n      slots['container-end'].push(child);\r\n    }\r\n  });\r\n  return {\r\n    slides,\r\n    slots\r\n  };\r\n}\r\n\r\nfunction renderVirtual(swiper, slides, virtualData) {\r\n  if (!virtualData) return null;\r\n  const getSlideIndex = index => {\r\n    let slideIndex = index;\r\n    if (index < 0) {\r\n      slideIndex = slides.length + index;\r\n    } else if (slideIndex >= slides.length) {\r\n      // eslint-disable-next-line\r\n      slideIndex = slideIndex - slides.length;\r\n    }\r\n    return slideIndex;\r\n  };\r\n  const style = swiper.isHorizontal() ? {\r\n    [swiper.rtlTranslate ? 'right' : 'left']: `${virtualData.offset}px`\r\n  } : {\r\n    top: `${virtualData.offset}px`\r\n  };\r\n  const {\r\n    from,\r\n    to\r\n  } = virtualData;\r\n  const loopFrom = swiper.params.loop ? -slides.length : 0;\r\n  const loopTo = swiper.params.loop ? slides.length * 2 : slides.length;\r\n  const slidesToRender = [];\r\n  for (let i = loopFrom; i < loopTo; i += 1) {\r\n    if (i >= from && i <= to) {\r\n      slidesToRender.push(slides[getSlideIndex(i)]);\r\n    }\r\n  }\r\n  return slidesToRender.map((child, index) => {\r\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\r\n      swiper,\r\n      style,\r\n      key: child.props.virtualIndex || child.key || `slide-${index}`\r\n    });\r\n  });\r\n}\r\n\r\nfunction useIsomorphicLayoutEffect(callback, deps) {\r\n  // eslint-disable-next-line\r\n  if (typeof window === 'undefined') return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(callback, deps);\r\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(callback, deps);\r\n}\r\n\r\nconst SwiperSlideContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\r\nconst useSwiperSlide = () => {\r\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwiperSlideContext);\r\n};\r\nconst SwiperContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\r\nconst useSwiper = () => {\r\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwiperContext);\r\n};\r\n\r\nconst Swiper = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_temp, externalElRef) {\r\n  let {\r\n    className,\r\n    tag: Tag = 'div',\r\n    wrapperTag: WrapperTag = 'div',\r\n    children,\r\n    onSwiper,\r\n    ...rest\r\n  } = _temp === void 0 ? {} : _temp;\r\n  let eventsAssigned = false;\r\n  const [containerClasses, setContainerClasses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('swiper');\r\n  const [virtualData, setVirtualData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\r\n  const [breakpointChanged, setBreakpointChanged] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\r\n  const initializedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\r\n  const swiperElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const swiperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const oldPassedParamsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const oldSlides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const nextElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const prevElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const paginationElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const scrollbarElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const {\r\n    params: swiperParams,\r\n    passedParams,\r\n    rest: restProps,\r\n    events\r\n  } = (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(rest);\r\n  const {\r\n    slides,\r\n    slots\r\n  } = getChildren(children);\r\n  const onBeforeBreakpoint = () => {\r\n    setBreakpointChanged(!breakpointChanged);\r\n  };\r\n  Object.assign(swiperParams.on, {\r\n    _containerClasses(swiper, classes) {\r\n      setContainerClasses(classes);\r\n    }\r\n  });\r\n  const initSwiper = () => {\r\n    // init swiper\r\n    Object.assign(swiperParams.on, events);\r\n    eventsAssigned = true;\r\n    const passParams = {\r\n      ...swiperParams\r\n    };\r\n    delete passParams.wrapperClass;\r\n    swiperRef.current = new _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__.S(passParams);\r\n    if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {\r\n      swiperRef.current.virtual.slides = slides;\r\n      const extendWith = {\r\n        cache: false,\r\n        slides,\r\n        renderExternal: setVirtualData,\r\n        renderExternalUpdate: false\r\n      };\r\n      (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(swiperRef.current.params.virtual, extendWith);\r\n      (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(swiperRef.current.originalParams.virtual, extendWith);\r\n    }\r\n  };\r\n  if (!swiperElRef.current) {\r\n    initSwiper();\r\n  }\r\n\r\n  // Listen for breakpoints change\r\n  if (swiperRef.current) {\r\n    swiperRef.current.on('_beforeBreakpoint', onBeforeBreakpoint);\r\n  }\r\n  const attachEvents = () => {\r\n    if (eventsAssigned || !events || !swiperRef.current) return;\r\n    Object.keys(events).forEach(eventName => {\r\n      swiperRef.current.on(eventName, events[eventName]);\r\n    });\r\n  };\r\n  const detachEvents = () => {\r\n    if (!events || !swiperRef.current) return;\r\n    Object.keys(events).forEach(eventName => {\r\n      swiperRef.current.off(eventName, events[eventName]);\r\n    });\r\n  };\r\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n    return () => {\r\n      if (swiperRef.current) swiperRef.current.off('_beforeBreakpoint', onBeforeBreakpoint);\r\n    };\r\n  });\r\n\r\n  // set initialized flag\r\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n    if (!initializedRef.current && swiperRef.current) {\r\n      swiperRef.current.emitSlidesClasses();\r\n      initializedRef.current = true;\r\n    }\r\n  });\r\n\r\n  // mount swiper\r\n  useIsomorphicLayoutEffect(() => {\r\n    if (externalElRef) {\r\n      externalElRef.current = swiperElRef.current;\r\n    }\r\n    if (!swiperElRef.current) return;\r\n    if (swiperRef.current.destroyed) {\r\n      initSwiper();\r\n    }\r\n    (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.m)({\r\n      el: swiperElRef.current,\r\n      nextEl: nextElRef.current,\r\n      prevEl: prevElRef.current,\r\n      paginationEl: paginationElRef.current,\r\n      scrollbarEl: scrollbarElRef.current,\r\n      swiper: swiperRef.current\r\n    }, swiperParams);\r\n    if (onSwiper && !swiperRef.current.destroyed) onSwiper(swiperRef.current);\r\n    // eslint-disable-next-line\r\n    return () => {\r\n      if (swiperRef.current && !swiperRef.current.destroyed) {\r\n        swiperRef.current.destroy(true, false);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // watch for params change\r\n  useIsomorphicLayoutEffect(() => {\r\n    attachEvents();\r\n    const changedParams = (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, c => c.key);\r\n    oldPassedParamsRef.current = passedParams;\r\n    oldSlides.current = slides;\r\n    if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {\r\n      (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.u)({\r\n        swiper: swiperRef.current,\r\n        slides,\r\n        passedParams,\r\n        changedParams,\r\n        nextEl: nextElRef.current,\r\n        prevEl: prevElRef.current,\r\n        scrollbarEl: scrollbarElRef.current,\r\n        paginationEl: paginationElRef.current\r\n      });\r\n    }\r\n    return () => {\r\n      detachEvents();\r\n    };\r\n  });\r\n\r\n  // update on virtual update\r\n  useIsomorphicLayoutEffect(() => {\r\n    (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(swiperRef.current);\r\n  }, [virtualData]);\r\n\r\n  // bypass swiper instance to slides\r\n  function renderSlides() {\r\n    if (swiperParams.virtual) {\r\n      return renderVirtual(swiperRef.current, slides, virtualData);\r\n    }\r\n    return slides.map((child, index) => {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\r\n        swiper: swiperRef.current,\r\n        swiperSlideIndex: index\r\n      });\r\n    });\r\n  }\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _extends({\r\n    ref: swiperElRef,\r\n    className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(`${containerClasses}${className ? ` ${className}` : ''}`)\r\n  }, restProps), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperContext.Provider, {\r\n    value: swiperRef.current\r\n  }, slots['container-start'], /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrapperTag, {\r\n    className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.w)(swiperParams.wrapperClass)\r\n  }, slots['wrapper-start'], renderSlides(), slots['wrapper-end']), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(swiperParams) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\r\n    ref: prevElRef,\r\n    className: \"swiper-button-prev\"\r\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\r\n    ref: nextElRef,\r\n    className: \"swiper-button-next\"\r\n  })), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.b)(swiperParams) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\r\n    ref: scrollbarElRef,\r\n    className: \"swiper-scrollbar\"\r\n  }), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(swiperParams) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\r\n    ref: paginationElRef,\r\n    className: \"swiper-pagination\"\r\n  }), slots['container-end']));\r\n});\r\nSwiper.displayName = 'Swiper';\r\n\r\nconst SwiperSlide = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_temp, externalRef) {\r\n  let {\r\n    tag: Tag = 'div',\r\n    children,\r\n    className = '',\r\n    swiper,\r\n    zoom,\r\n    lazy,\r\n    virtualIndex,\r\n    swiperSlideIndex,\r\n    ...rest\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const slideElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n  const [slideClasses, setSlideClasses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('swiper-slide');\r\n  const [lazyLoaded, setLazyLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\r\n  function updateClasses(_s, el, classNames) {\r\n    if (el === slideElRef.current) {\r\n      setSlideClasses(classNames);\r\n    }\r\n  }\r\n  useIsomorphicLayoutEffect(() => {\r\n    if (typeof swiperSlideIndex !== 'undefined') {\r\n      slideElRef.current.swiperSlideIndex = swiperSlideIndex;\r\n    }\r\n    if (externalRef) {\r\n      externalRef.current = slideElRef.current;\r\n    }\r\n    if (!slideElRef.current || !swiper) {\r\n      return;\r\n    }\r\n    if (swiper.destroyed) {\r\n      if (slideClasses !== 'swiper-slide') {\r\n        setSlideClasses('swiper-slide');\r\n      }\r\n      return;\r\n    }\r\n    swiper.on('_slideClass', updateClasses);\r\n    // eslint-disable-next-line\r\n    return () => {\r\n      if (!swiper) return;\r\n      swiper.off('_slideClass', updateClasses);\r\n    };\r\n  });\r\n  useIsomorphicLayoutEffect(() => {\r\n    if (swiper && slideElRef.current && !swiper.destroyed) {\r\n      setSlideClasses(swiper.getSlideClasses(slideElRef.current));\r\n    }\r\n  }, [swiper]);\r\n  const slideData = {\r\n    isActive: slideClasses.indexOf('swiper-slide-active') >= 0,\r\n    isVisible: slideClasses.indexOf('swiper-slide-visible') >= 0,\r\n    isPrev: slideClasses.indexOf('swiper-slide-prev') >= 0,\r\n    isNext: slideClasses.indexOf('swiper-slide-next') >= 0\r\n  };\r\n  const renderChildren = () => {\r\n    return typeof children === 'function' ? children(slideData) : children;\r\n  };\r\n  const onLoad = () => {\r\n    setLazyLoaded(true);\r\n  };\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _extends({\r\n    ref: slideElRef,\r\n    className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(`${slideClasses}${className ? ` ${className}` : ''}`),\r\n    \"data-swiper-slide-index\": virtualIndex,\r\n    onLoad: onLoad\r\n  }, rest), zoom && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperSlideContext.Provider, {\r\n    value: slideData\r\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\r\n    className: \"swiper-zoom-container\",\r\n    \"data-swiper-zoom\": typeof zoom === 'number' ? zoom : undefined\r\n  }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\r\n    className: \"swiper-lazy-preloader\"\r\n  }))), !zoom && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperSlideContext.Provider, {\r\n    value: slideData\r\n  }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\r\n    className: \"swiper-lazy-preloader\"\r\n  })));\r\n});\r\nSwiperSlide.displayName = 'SwiperSlide';\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/swiper-react.mjs\n");

/***/ })

};
;